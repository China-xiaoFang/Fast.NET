{
	"compilerOptions": {
		// 表示允许默认从没有默认导出的模块导入。这不会影响代码发出，只会影响类型检查
		"allowSyntheticDefaultImports": true,
		// 启用ES装饰器
		"experimentalDecorators": true,
		// 允许编译Javascript文件
		"allowJs": true,
		// 允许在JS文件中报错，通常与allowJS一起使用
		"checkJs": true,
		// 指定编译后代码使用的模块化规范。
		"module": "ES2022",
		// 指定ECMAScript目标版本
		"target": "ES6",
		// 模块解析策略，ts默认用node的解析策略，即相对的方式导入
		"moduleResolution": "Node",
		// 是否将每个文件转换为单独的模块，默认：false
		"isolatedModules": false,
		// TS需要引用的库，即声明文件，es5 默认引用dom、es5、scripthost,如需要使用es的高级版本特性，通常都需要配置，如es8的数组新特性需要引入"ES2019.Array"
		"lib": ["DOM", "ES6", "DOM.Iterable", "ScriptHost"],
		// 生成对应的 .map 文件; 生成目标文件的sourceMap文件
		"sourceMap": true,
		// 给错误和消息设置样式，使用颜色和上下文; 是否使用颜色对上下文错误和消息进行样式化，默认：true
		"pretty": true,
		// 解析非相对模块的基地址，默认是当前目录
		"baseUrl": ".",
		// 用于设置模块名称基于baseUrl的路径映射关系
		"paths": {
			"@": ["src"],
			"@/*": ["src/*"]
		},
		// 用来指定需要包含的模块，并将其包含在全局范围内
		"types": ["node", "ant-design-vue/typings/global"]
	},
	// 提供用于禁用 JavaScript 项目中某个模块的类型获取的配置
	"exclude": ["node_modules", "dist"],
	// 使用 include 来指定应从绝对类型中使用哪些类型
	"include": [
		"src/**/*.ts",
		"src/**/*.d.ts",
		"src/**/*.tsx",
		"src/**/*.vue",
		"./components.d.ts",
		"*.ts"
	],
	// 项目引用，是 TS 3.0 中的一项新功能，它允许将 TS 程序组织成更小的部分。
	// 使用小技巧：在填写路径时 ** 表示任意目录， * 表示任意文件
	"references": [{ "path": "./tsconfig.node.json" }]
}
