<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Fast.Cache</name>
    </assembly>
    <members>
        <member name="T:Fast.Cache.DefaultCacheContextLocator">
            <summary>
            <see cref="T:Fast.Cache.DefaultCacheContextLocator"/> 默认缓存上下文定位器
            </summary>
        </member>
        <member name="P:Fast.Cache.DefaultCacheContextLocator.ServiceName">
            <summary>
            服务名称
            </summary>
        </member>
        <member name="T:Fast.Cache.ICacheContextLocator">
            <summary>
            缓存上下文定位器
            </summary>
        </member>
        <member name="P:Fast.Cache.ICacheContextLocator.ServiceName">
            <summary>
            服务名称
            </summary>
        </member>
        <member name="T:Fast.Cache.Implements.Cache">
            <summary>
            <see cref="T:Fast.Cache.Implements.Cache"/> 默认缓存实现
            </summary>
        </member>
        <member name="T:Fast.Cache.Implements.Cache`1">
            <summary>
            <see cref="T:Fast.Cache.Implements.Cache`1"/> 缓存实现
            </summary>
        </member>
        <member name="F:Fast.Cache.Implements.Cache`1._client">
            <summary>
            CSRedis 缓存客户端
            </summary>
        </member>
        <member name="M:Fast.Cache.Implements.Cache`1.Create(System.Collections.Generic.List{Fast.Cache.Options.RedisSettingsOptions})">
            <summary>
            创建/初始化服务
            </summary>
        </member>
        <member name="M:Fast.Cache.Implements.Cache`1.Dispose">
            <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
        </member>
        <member name="M:Fast.Cache.Implements.Cache`1.Del(System.String[])">
            <summary>
            删除缓存
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Cache.Implements.Cache`1.DelAsync(System.String[])">
            <summary>
            删除缓存
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Cache.Implements.Cache`1.DelByPattern(System.String)">
            <summary>
            根据前缀删除缓存
            慎用
            </summary>
            <param name="pattern"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Cache.Implements.Cache`1.DelByPatternAsync(System.String)">
            <summary>
            根据前缀删除缓存
            慎用
            </summary>
            <param name="pattern"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Cache.Implements.Cache`1.Exists(System.String)">
            <summary>
            判断是否存在
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Cache.Implements.Cache`1.ExistsAsync(System.String)">
            <summary>
            判断是否存在
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Cache.Implements.Cache`1.Get(System.String)">
            <summary>
            获取缓存
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Cache.Implements.Cache`1.GetAsync(System.String)">
            <summary>
            获取缓存
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Cache.Implements.Cache`1.Get``1(System.String)">
            <summary>
            获取缓存
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Cache.Implements.Cache`1.GetAsync``1(System.String)">
            <summary>
            获取缓存
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Cache.Implements.Cache`1.Set(System.String,System.Object)">
            <summary>
            设置缓存
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Cache.Implements.Cache`1.SetAsync(System.String,System.Object)">
            <summary>
            设置缓存
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Cache.Implements.Cache`1.Set(System.String,System.Object,System.Int32)">
            <summary>
            设置缓存
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="expireSeconds">单位秒</param>
            <returns></returns>
        </member>
        <member name="M:Fast.Cache.Implements.Cache`1.SetAsync(System.String,System.Object,System.Int32)">
            <summary>
            设置缓存
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="expireSeconds">单位秒</param>
            <returns></returns>
        </member>
        <member name="M:Fast.Cache.Implements.Cache`1.Set(System.String,System.Object,System.TimeSpan)">
            <summary>
            设置缓存
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="expireTimeSpan"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Cache.Implements.Cache`1.SetAsync(System.String,System.Object,System.TimeSpan)">
            <summary>
            设置缓存
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="expireTimeSpan"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Cache.Implements.Cache`1.GetAllKeys">
            <summary>
            获取所有缓存Key
            慎用
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fast.Cache.Implements.Cache`1.GetAllKeysAsync">
            <summary>
            获取所有缓存Key
            慎用
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fast.Cache.Implements.Cache`1.GetAndSet(System.String,System.Func{System.String})">
            <summary>
            获取并且设置缓存
            </summary>
            <param name="key"></param>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Cache.Implements.Cache`1.GetAndSetAsync(System.String,System.Func{System.Threading.Tasks.Task{System.String}})">
            <summary>
            获取并且设置缓存
            </summary>
            <param name="key"></param>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Cache.Implements.Cache`1.GetAndSet``1(System.String,System.Func{``0})">
            <summary>
            获取并且设置缓存
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Cache.Implements.Cache`1.GetAndSetAsync``1(System.String,System.Func{System.Threading.Tasks.Task{``0}})">
            <summary>
            获取并且设置缓存
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Cache.Implements.Cache`1.GetAndSet(System.String,System.Int32,System.Func{System.String})">
            <summary>
            获取并且设置缓存
            </summary>
            <param name="key"></param>
            <param name="expireSeconds">单位秒</param>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Cache.Implements.Cache`1.GetAndSetAsync(System.String,System.Int32,System.Func{System.Threading.Tasks.Task{System.String}})">
            <summary>
            获取并且设置缓存
            </summary>
            <param name="key"></param>
            <param name="expireSeconds">单位秒</param>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Cache.Implements.Cache`1.GetAndSet``1(System.String,System.Int32,System.Func{``0})">
            <summary>
            获取并且设置缓存
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="expireSeconds">单位秒</param>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Cache.Implements.Cache`1.GetAndSetAsync``1(System.String,System.Int32,System.Func{System.Threading.Tasks.Task{``0}})">
            <summary>
            获取并且设置缓存
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="expireSeconds">单位秒</param>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Cache.Implements.Cache`1.GetAndSet(System.String,System.TimeSpan,System.Func{System.String})">
            <summary>
            获取并且设置缓存
            </summary>
            <param name="key"></param>
            <param name="expireTimeSpan"></param>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Cache.Implements.Cache`1.GetAndSetAsync(System.String,System.TimeSpan,System.Func{System.Threading.Tasks.Task{System.String}})">
            <summary>
            获取并且设置缓存
            </summary>
            <param name="key"></param>
            <param name="expireTimeSpan"></param>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Cache.Implements.Cache`1.GetAndSet``1(System.String,System.TimeSpan,System.Func{``0})">
            <summary>
            获取并且设置缓存
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="expireTimeSpan"></param>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Cache.Implements.Cache`1.GetAndSetAsync``1(System.String,System.TimeSpan,System.Func{System.Threading.Tasks.Task{``0}})">
            <summary>
            获取并且设置缓存
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="expireTimeSpan"></param>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Cache.Implements.Cache`1.IsEmpty``1(``0)">
            <summary>
            检查 Object 或者 集合 是否为 NULL 或者 空集合
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:Fast.Cache.Injections.CacheInjection">
            <summary>
            <see cref="T:Fast.Cache.Injections.CacheInjection"/> 缓存注入
            </summary>
        </member>
        <member name="P:Fast.Cache.Injections.CacheInjection.Order">
            <summary>
            排序
            <remarks>
            <para>顺序越大，越优先注册</para>
            <para>建议最大不超过9999</para>
            </remarks>
            </summary>
        </member>
        <member name="M:Fast.Cache.Injections.CacheInjection.Configure(Microsoft.AspNetCore.Hosting.IWebHostBuilder)">
            <summary>
            配置
            </summary>
            <param name="builder"></param>
        </member>
        <member name="T:Fast.Cache.ICache">
            <summary>
            <see cref="T:Fast.Cache.ICache"/> 默认缓存服务接口
            </summary>
        </member>
        <member name="T:Fast.Cache.ICache`1">
            <summary>
            <see cref="T:Fast.Cache.ICache`1"/> 缓存服务接口
            </summary>
        </member>
        <member name="M:Fast.Cache.ICache`1.Del(System.String[])">
            <summary>
            删除缓存
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Cache.ICache`1.DelAsync(System.String[])">
            <summary>
            删除缓存
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Cache.ICache`1.DelByPattern(System.String)">
            <summary>
            根据前缀删除缓存
            慎用
            </summary>
            <param name="pattern"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Cache.ICache`1.DelByPatternAsync(System.String)">
            <summary>
            根据前缀删除缓存
            慎用
            </summary>
            <param name="pattern"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Cache.ICache`1.Exists(System.String)">
            <summary>
            判断是否存在
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Cache.ICache`1.ExistsAsync(System.String)">
            <summary>
            判断是否存在
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Cache.ICache`1.Get(System.String)">
            <summary>
            获取缓存
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Cache.ICache`1.Get``1(System.String)">
            <summary>
            获取缓存
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Cache.ICache`1.GetAsync(System.String)">
            <summary>
            获取缓存
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Cache.ICache`1.GetAsync``1(System.String)">
            <summary>
            获取缓存
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Cache.ICache`1.Set(System.String,System.Object)">
            <summary>
            设置缓存
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Cache.ICache`1.Set(System.String,System.Object,System.Int32)">
            <summary>
            设置缓存
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="expireSeconds">单位秒</param>
            <returns></returns>
        </member>
        <member name="M:Fast.Cache.ICache`1.Set(System.String,System.Object,System.TimeSpan)">
            <summary>
            设置缓存
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="expireTimeSpan"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Cache.ICache`1.SetAsync(System.String,System.Object)">
            <summary>
            设置缓存
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Cache.ICache`1.SetAsync(System.String,System.Object,System.Int32)">
            <summary>
            设置缓存
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="expireSeconds">单位秒</param>
            <returns></returns>
        </member>
        <member name="M:Fast.Cache.ICache`1.SetAsync(System.String,System.Object,System.TimeSpan)">
            <summary>
            设置缓存
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="expireTimeSpan"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Cache.ICache`1.GetAllKeys">
            <summary>
            获取所有缓存Key
            慎用
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fast.Cache.ICache`1.GetAllKeysAsync">
            <summary>
            获取所有缓存Key
            慎用
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fast.Cache.ICache`1.GetAndSet(System.String,System.Func{System.String})">
            <summary>
            获取并且设置缓存
            </summary>
            <param name="key"></param>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Cache.ICache`1.GetAndSet``1(System.String,System.Func{``0})">
            <summary>
            获取并且设置缓存
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Cache.ICache`1.GetAndSet(System.String,System.Int32,System.Func{System.String})">
            <summary>
            获取并且设置缓存
            </summary>
            <param name="key"></param>
            <param name="expireSeconds">单位秒</param>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Cache.ICache`1.GetAndSet``1(System.String,System.Int32,System.Func{``0})">
            <summary>
            获取并且设置缓存
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="expireSeconds">单位秒</param>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Cache.ICache`1.GetAndSet(System.String,System.TimeSpan,System.Func{System.String})">
            <summary>
            获取并且设置缓存
            </summary>
            <param name="key"></param>
            <param name="expireTimeSpan"></param>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Cache.ICache`1.GetAndSet``1(System.String,System.TimeSpan,System.Func{``0})">
            <summary>
            获取并且设置缓存
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="expireTimeSpan"></param>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Cache.ICache`1.GetAndSetAsync(System.String,System.Func{System.Threading.Tasks.Task{System.String}})">
            <summary>
            获取并且设置缓存
            </summary>
            <param name="key"></param>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Cache.ICache`1.GetAndSetAsync``1(System.String,System.Func{System.Threading.Tasks.Task{``0}})">
            <summary>
            获取并且设置缓存
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Cache.ICache`1.GetAndSetAsync(System.String,System.Int32,System.Func{System.Threading.Tasks.Task{System.String}})">
            <summary>
            获取并且设置缓存
            </summary>
            <param name="key"></param>
            <param name="expireSeconds">单位秒</param>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Cache.ICache`1.GetAndSetAsync``1(System.String,System.Int32,System.Func{System.Threading.Tasks.Task{``0}})">
            <summary>
            获取并且设置缓存
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="expireSeconds">单位秒</param>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Cache.ICache`1.GetAndSetAsync(System.String,System.TimeSpan,System.Func{System.Threading.Tasks.Task{System.String}})">
            <summary>
            获取并且设置缓存
            </summary>
            <param name="key"></param>
            <param name="expireTimeSpan"></param>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Cache.ICache`1.GetAndSetAsync``1(System.String,System.TimeSpan,System.Func{System.Threading.Tasks.Task{``0}})">
            <summary>
            获取并且设置缓存
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="expireTimeSpan"></param>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="T:Fast.Cache.Options.RedisSettingsOptions">
            <summary>
            <see cref="T:Fast.Cache.Options.RedisSettingsOptions"/> Redis连接字符串配置
            </summary>
        </member>
        <member name="P:Fast.Cache.Options.RedisSettingsOptions.ServiceName">
            <summary>
            服务名称
            </summary>
        </member>
        <member name="P:Fast.Cache.Options.RedisSettingsOptions.ServiceIp">
            <summary>
            服务器Ip地址
            </summary>
        </member>
        <member name="P:Fast.Cache.Options.RedisSettingsOptions.Port">
            <summary>
            端口号
            </summary>
        </member>
        <member name="P:Fast.Cache.Options.RedisSettingsOptions.DbName">
            <summary>
            默认库
            </summary>
        </member>
        <member name="P:Fast.Cache.Options.RedisSettingsOptions.DbPwd">
            <summary>
            密码
            </summary>
        </member>
        <member name="P:Fast.Cache.Options.RedisSettingsOptions.Prefix">
            <summary>
            前缀
            </summary>
        </member>
    </members>
</doc>
