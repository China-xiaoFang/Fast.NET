<?xml version="1.0"?>

<doc>
	<assembly>
		<name>Cache</name>
	</assembly>
	<members>
		<member name="T:Fast.Cache.Extensions.CacheIServiceCollectionExtension">
			<summary>
				<see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> 拓展类
			</summary>
		</member>
		<member
			name="M:Fast.Cache.Extensions.CacheIServiceCollectionExtension.AddCache(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
			<summary>
				添加缓存
				请确保 配置文件中存在 “RedisConnectionString” 节点
			</summary>
			<param name="services">
				<see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />
			</param>
			<returns></returns>
		</member>
		<member name="T:Fast.Cache.Extensions.ValidateExtension">
			<summary>
				验证拓展类
			</summary>
		</member>
		<member name="M:Fast.Cache.Extensions.ValidateExtension.IsEmpty``1(``0)">
			<summary>
				检查 Object 或者 集合 是否为 NULL 或者 空集合
			</summary>
			<typeparam name="T"></typeparam>
			<param name="value"></param>
			<returns></returns>
		</member>
		<member name="T:Fast.Cache.Helpers.FastRedisHelper">
			<summary>
				<see cref="T:Fast.Cache.Helpers.FastRedisHelper" />
			</summary>
		</member>
		<member name="T:Fast.Cache.Implements.Cache">
			<summary>
				<see cref="T:Fast.Cache.Implements.Cache" /> Redis缓存服务
			</summary>
		</member>
		<member name="M:Fast.Cache.Implements.Cache.#ctor(Microsoft.Extensions.Configuration.IConfiguration)">
			<summary>

			</summary>
			<param name="configuration">连接字符串</param>
			<exception cref="T:System.ArgumentNullException"></exception>
		</member>
		<member name="M:Fast.Cache.Implements.Cache.Del(System.String[])">
			<summary>
				删除缓存
			</summary>
			<param name="key"></param>
			<returns></returns>
		</member>
		<member name="M:Fast.Cache.Implements.Cache.DelAsync(System.String[])">
			<summary>
				删除缓存
			</summary>
			<param name="key"></param>
			<returns></returns>
		</member>
		<member name="M:Fast.Cache.Implements.Cache.DelByPattern(System.String)">
			<summary>
				根据前缀删除缓存
				慎用
			</summary>
			<param name="pattern"></param>
			<returns></returns>
		</member>
		<member name="M:Fast.Cache.Implements.Cache.DelByPatternAsync(System.String)">
			<summary>
				根据前缀删除缓存
				慎用
			</summary>
			<param name="pattern"></param>
			<returns></returns>
		</member>
		<member name="M:Fast.Cache.Implements.Cache.Exists(System.String)">
			<summary>
				判断是否存在
			</summary>
			<param name="key"></param>
			<returns></returns>
		</member>
		<member name="M:Fast.Cache.Implements.Cache.ExistsAsync(System.String)">
			<summary>
				判断是否存在
			</summary>
			<param name="key"></param>
			<returns></returns>
		</member>
		<member name="M:Fast.Cache.Implements.Cache.Get(System.String)">
			<summary>
				获取缓存
			</summary>
			<param name="key"></param>
			<returns></returns>
		</member>
		<member name="M:Fast.Cache.Implements.Cache.GetAsync(System.String)">
			<summary>
				获取缓存
			</summary>
			<param name="key"></param>
			<returns></returns>
		</member>
		<member name="M:Fast.Cache.Implements.Cache.Get``1(System.String)">
			<summary>
				获取缓存
			</summary>
			<typeparam name="T"></typeparam>
			<param name="key"></param>
			<returns></returns>
		</member>
		<member name="M:Fast.Cache.Implements.Cache.GetAsync``1(System.String)">
			<summary>
				获取缓存
			</summary>
			<typeparam name="T"></typeparam>
			<param name="key"></param>
			<returns></returns>
		</member>
		<member name="M:Fast.Cache.Implements.Cache.Set(System.String,System.Object)">
			<summary>
				设置缓存
			</summary>
			<param name="key"></param>
			<param name="value"></param>
			<returns></returns>
		</member>
		<member name="M:Fast.Cache.Implements.Cache.SetAsync(System.String,System.Object)">
			<summary>
				设置缓存
			</summary>
			<param name="key"></param>
			<param name="value"></param>
			<returns></returns>
		</member>
		<member name="M:Fast.Cache.Implements.Cache.Set(System.String,System.Object,System.Int32)">
			<summary>
				设置缓存
			</summary>
			<param name="key"></param>
			<param name="value"></param>
			<param name="expireSeconds">单位秒</param>
			<returns></returns>
		</member>
		<member name="M:Fast.Cache.Implements.Cache.SetAsync(System.String,System.Object,System.Int32)">
			<summary>
				设置缓存
			</summary>
			<param name="key"></param>
			<param name="value"></param>
			<param name="expireSeconds">单位秒</param>
			<returns></returns>
		</member>
		<member name="M:Fast.Cache.Implements.Cache.Set(System.String,System.Object,System.TimeSpan)">
			<summary>
				设置缓存
			</summary>
			<param name="key"></param>
			<param name="value"></param>
			<param name="expireTimeSpan"></param>
			<returns></returns>
		</member>
		<member name="M:Fast.Cache.Implements.Cache.SetAsync(System.String,System.Object,System.TimeSpan)">
			<summary>
				设置缓存
			</summary>
			<param name="key"></param>
			<param name="value"></param>
			<param name="expireTimeSpan"></param>
			<returns></returns>
		</member>
		<member name="M:Fast.Cache.Implements.Cache.GetAllKeys">
			<summary>
				获取所有缓存Key
				慎用
			</summary>
			<returns></returns>
		</member>
		<member name="M:Fast.Cache.Implements.Cache.GetAllKeysAsync">
			<summary>
				获取所有缓存Key
				慎用
			</summary>
			<returns></returns>
		</member>
		<member name="M:Fast.Cache.Implements.Cache.GetAndSet(System.String,System.Func{System.String})">
			<summary>
				获取并且设置缓存
			</summary>
			<param name="key"></param>
			<param name="func"></param>
			<returns></returns>
		</member>
		<member
			name="M:Fast.Cache.Implements.Cache.GetAndSetAsync(System.String,System.Func{System.Threading.Tasks.Task{System.String}})">
			<summary>
				获取并且设置缓存
			</summary>
			<param name="key"></param>
			<param name="func"></param>
			<returns></returns>
		</member>
		<member name="M:Fast.Cache.Implements.Cache.GetAndSet``1(System.String,System.Func{``0})">
			<summary>
				获取并且设置缓存
			</summary>
			<typeparam name="T"></typeparam>
			<param name="key"></param>
			<param name="func"></param>
			<returns></returns>
		</member>
		<member
			name="M:Fast.Cache.Implements.Cache.GetAndSetAsync``1(System.String,System.Func{System.Threading.Tasks.Task{``0}})">
			<summary>
				获取并且设置缓存
			</summary>
			<typeparam name="T"></typeparam>
			<param name="key"></param>
			<param name="func"></param>
			<returns></returns>
		</member>
		<member name="M:Fast.Cache.Implements.Cache.GetAndSet(System.String,System.Int32,System.Func{System.String})">
			<summary>
				获取并且设置缓存
			</summary>
			<param name="key"></param>
			<param name="expireSeconds">单位秒</param>
			<param name="func"></param>
			<returns></returns>
		</member>
		<member
			name="M:Fast.Cache.Implements.Cache.GetAndSetAsync(System.String,System.Int32,System.Func{System.Threading.Tasks.Task{System.String}})">
			<summary>
				获取并且设置缓存
			</summary>
			<param name="key"></param>
			<param name="expireSeconds">单位秒</param>
			<param name="func"></param>
			<returns></returns>
		</member>
		<member name="M:Fast.Cache.Implements.Cache.GetAndSet``1(System.String,System.Int32,System.Func{``0})">
			<summary>
				获取并且设置缓存
			</summary>
			<typeparam name="T"></typeparam>
			<param name="key"></param>
			<param name="expireSeconds">单位秒</param>
			<param name="func"></param>
			<returns></returns>
		</member>
		<member
			name="M:Fast.Cache.Implements.Cache.GetAndSetAsync``1(System.String,System.Int32,System.Func{System.Threading.Tasks.Task{``0}})">
			<summary>
				获取并且设置缓存
			</summary>
			<typeparam name="T"></typeparam>
			<param name="key"></param>
			<param name="expireSeconds">单位秒</param>
			<param name="func"></param>
			<returns></returns>
		</member>
		<member name="M:Fast.Cache.Implements.Cache.GetAndSet(System.String,System.TimeSpan,System.Func{System.String})">
			<summary>
				获取并且设置缓存
			</summary>
			<param name="key"></param>
			<param name="expireTimeSpan"></param>
			<param name="func"></param>
			<returns></returns>
		</member>
		<member
			name="M:Fast.Cache.Implements.Cache.GetAndSetAsync(System.String,System.TimeSpan,System.Func{System.Threading.Tasks.Task{System.String}})">
			<summary>
				获取并且设置缓存
			</summary>
			<param name="key"></param>
			<param name="expireTimeSpan"></param>
			<param name="func"></param>
			<returns></returns>
		</member>
		<member name="M:Fast.Cache.Implements.Cache.GetAndSet``1(System.String,System.TimeSpan,System.Func{``0})">
			<summary>
				获取并且设置缓存
			</summary>
			<typeparam name="T"></typeparam>
			<param name="key"></param>
			<param name="expireTimeSpan"></param>
			<param name="func"></param>
			<returns></returns>
		</member>
		<member
			name="M:Fast.Cache.Implements.Cache.GetAndSetAsync``1(System.String,System.TimeSpan,System.Func{System.Threading.Tasks.Task{``0}})">
			<summary>
				获取并且设置缓存
			</summary>
			<typeparam name="T"></typeparam>
			<param name="key"></param>
			<param name="expireTimeSpan"></param>
			<param name="func"></param>
			<returns></returns>
		</member>
		<member name="T:Fast.Cache.Injections.CacheInjection">
			<summary>
				<see cref="T:Fast.Cache.Injections.CacheInjection" /> 缓存注入
			</summary>
		</member>
		<member name="P:Fast.Cache.Injections.CacheInjection.Order">
			<summary>
				排序
				<remarks>
					<para>顺序越大，越优先注册</para>
					<para>建议最大不超过9999</para>
				</remarks>
			</summary>
		</member>
		<member name="M:Fast.Cache.Injections.CacheInjection.Configure(Microsoft.AspNetCore.Hosting.IWebHostBuilder)">
			<summary>
				配置
			</summary>
			<param name="builder"></param>
		</member>
		<member name="T:Fast.Cache.ICache">
			<summary>
				<see cref="T:Fast.Cache.ICache" /> Redis缓存服务接口
			</summary>
		</member>
		<member name="M:Fast.Cache.ICache.Del(System.String[])">
			<summary>
				删除缓存
			</summary>
			<param name="key"></param>
			<returns></returns>
		</member>
		<member name="M:Fast.Cache.ICache.DelAsync(System.String[])">
			<summary>
				删除缓存
			</summary>
			<param name="key"></param>
			<returns></returns>
		</member>
		<member name="M:Fast.Cache.ICache.DelByPattern(System.String)">
			<summary>
				根据前缀删除缓存
				慎用
			</summary>
			<param name="pattern"></param>
			<returns></returns>
		</member>
		<member name="M:Fast.Cache.ICache.DelByPatternAsync(System.String)">
			<summary>
				根据前缀删除缓存
				慎用
			</summary>
			<param name="pattern"></param>
			<returns></returns>
		</member>
		<member name="M:Fast.Cache.ICache.Exists(System.String)">
			<summary>
				判断是否存在
			</summary>
			<param name="key"></param>
			<returns></returns>
		</member>
		<member name="M:Fast.Cache.ICache.ExistsAsync(System.String)">
			<summary>
				判断是否存在
			</summary>
			<param name="key"></param>
			<returns></returns>
		</member>
		<member name="M:Fast.Cache.ICache.Get(System.String)">
			<summary>
				获取缓存
			</summary>
			<param name="key"></param>
			<returns></returns>
		</member>
		<member name="M:Fast.Cache.ICache.Get``1(System.String)">
			<summary>
				获取缓存
			</summary>
			<typeparam name="T"></typeparam>
			<param name="key"></param>
			<returns></returns>
		</member>
		<member name="M:Fast.Cache.ICache.GetAsync(System.String)">
			<summary>
				获取缓存
			</summary>
			<param name="key"></param>
			<returns></returns>
		</member>
		<member name="M:Fast.Cache.ICache.GetAsync``1(System.String)">
			<summary>
				获取缓存
			</summary>
			<typeparam name="T"></typeparam>
			<param name="key"></param>
			<returns></returns>
		</member>
		<member name="M:Fast.Cache.ICache.Set(System.String,System.Object)">
			<summary>
				设置缓存
			</summary>
			<param name="key"></param>
			<param name="value"></param>
			<returns></returns>
		</member>
		<member name="M:Fast.Cache.ICache.Set(System.String,System.Object,System.Int32)">
			<summary>
				设置缓存
			</summary>
			<param name="key"></param>
			<param name="value"></param>
			<param name="expireSeconds">单位秒</param>
			<returns></returns>
		</member>
		<member name="M:Fast.Cache.ICache.Set(System.String,System.Object,System.TimeSpan)">
			<summary>
				设置缓存
			</summary>
			<param name="key"></param>
			<param name="value"></param>
			<param name="expireTimeSpan"></param>
			<returns></returns>
		</member>
		<member name="M:Fast.Cache.ICache.SetAsync(System.String,System.Object)">
			<summary>
				设置缓存
			</summary>
			<param name="key"></param>
			<param name="value"></param>
			<returns></returns>
		</member>
		<member name="M:Fast.Cache.ICache.SetAsync(System.String,System.Object,System.Int32)">
			<summary>
				设置缓存
			</summary>
			<param name="key"></param>
			<param name="value"></param>
			<param name="expireSeconds">单位秒</param>
			<returns></returns>
		</member>
		<member name="M:Fast.Cache.ICache.SetAsync(System.String,System.Object,System.TimeSpan)">
			<summary>
				设置缓存
			</summary>
			<param name="key"></param>
			<param name="value"></param>
			<param name="expireTimeSpan"></param>
			<returns></returns>
		</member>
		<member name="M:Fast.Cache.ICache.GetAllKeys">
			<summary>
				获取所有缓存Key
				慎用
			</summary>
			<returns></returns>
		</member>
		<member name="M:Fast.Cache.ICache.GetAllKeysAsync">
			<summary>
				获取所有缓存Key
				慎用
			</summary>
			<returns></returns>
		</member>
		<member name="M:Fast.Cache.ICache.GetAndSet(System.String,System.Func{System.String})">
			<summary>
				获取并且设置缓存
			</summary>
			<param name="key"></param>
			<param name="func"></param>
			<returns></returns>
		</member>
		<member name="M:Fast.Cache.ICache.GetAndSet``1(System.String,System.Func{``0})">
			<summary>
				获取并且设置缓存
			</summary>
			<typeparam name="T"></typeparam>
			<param name="key"></param>
			<param name="func"></param>
			<returns></returns>
		</member>
		<member name="M:Fast.Cache.ICache.GetAndSet(System.String,System.Int32,System.Func{System.String})">
			<summary>
				获取并且设置缓存
			</summary>
			<param name="key"></param>
			<param name="expireSeconds">单位秒</param>
			<param name="func"></param>
			<returns></returns>
		</member>
		<member name="M:Fast.Cache.ICache.GetAndSet``1(System.String,System.Int32,System.Func{``0})">
			<summary>
				获取并且设置缓存
			</summary>
			<typeparam name="T"></typeparam>
			<param name="key"></param>
			<param name="expireSeconds">单位秒</param>
			<param name="func"></param>
			<returns></returns>
		</member>
		<member name="M:Fast.Cache.ICache.GetAndSet(System.String,System.TimeSpan,System.Func{System.String})">
			<summary>
				获取并且设置缓存
			</summary>
			<param name="key"></param>
			<param name="expireTimeSpan"></param>
			<param name="func"></param>
			<returns></returns>
		</member>
		<member name="M:Fast.Cache.ICache.GetAndSet``1(System.String,System.TimeSpan,System.Func{``0})">
			<summary>
				获取并且设置缓存
			</summary>
			<typeparam name="T"></typeparam>
			<param name="key"></param>
			<param name="expireTimeSpan"></param>
			<param name="func"></param>
			<returns></returns>
		</member>
		<member
			name="M:Fast.Cache.ICache.GetAndSetAsync(System.String,System.Func{System.Threading.Tasks.Task{System.String}})">
			<summary>
				获取并且设置缓存
			</summary>
			<param name="key"></param>
			<param name="func"></param>
			<returns></returns>
		</member>
		<member name="M:Fast.Cache.ICache.GetAndSetAsync``1(System.String,System.Func{System.Threading.Tasks.Task{``0}})">
			<summary>
				获取并且设置缓存
			</summary>
			<typeparam name="T"></typeparam>
			<param name="key"></param>
			<param name="func"></param>
			<returns></returns>
		</member>
		<member
			name="M:Fast.Cache.ICache.GetAndSetAsync(System.String,System.Int32,System.Func{System.Threading.Tasks.Task{System.String}})">
			<summary>
				获取并且设置缓存
			</summary>
			<param name="key"></param>
			<param name="expireSeconds">单位秒</param>
			<param name="func"></param>
			<returns></returns>
		</member>
		<member
			name="M:Fast.Cache.ICache.GetAndSetAsync``1(System.String,System.Int32,System.Func{System.Threading.Tasks.Task{``0}})">
			<summary>
				获取并且设置缓存
			</summary>
			<typeparam name="T"></typeparam>
			<param name="key"></param>
			<param name="expireSeconds">单位秒</param>
			<param name="func"></param>
			<returns></returns>
		</member>
		<member
			name="M:Fast.Cache.ICache.GetAndSetAsync(System.String,System.TimeSpan,System.Func{System.Threading.Tasks.Task{System.String}})">
			<summary>
				获取并且设置缓存
			</summary>
			<param name="key"></param>
			<param name="expireTimeSpan"></param>
			<param name="func"></param>
			<returns></returns>
		</member>
		<member
			name="M:Fast.Cache.ICache.GetAndSetAsync``1(System.String,System.TimeSpan,System.Func{System.Threading.Tasks.Task{``0}})">
			<summary>
				获取并且设置缓存
			</summary>
			<typeparam name="T"></typeparam>
			<param name="key"></param>
			<param name="expireTimeSpan"></param>
			<param name="func"></param>
			<returns></returns>
		</member>
	</members>
</doc>