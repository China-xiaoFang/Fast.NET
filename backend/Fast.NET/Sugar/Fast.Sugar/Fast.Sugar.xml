<?xml version="1.0"?>

<doc>
	<assembly>
		<name>Fast.Sugar</name>
	</assembly>
	<members>
		<member name="T:Fast.Sugar.Attributes.SugarDbTypeEnum">
			<summary>
				Sugar数据库类型
			</summary>
		</member>
		<member name="F:Fast.Sugar.Attributes.SugarDbTypeEnum.Default">
			<summary>
				默认库
			</summary>
		</member>
		<member name="F:Fast.Sugar.Attributes.SugarDbTypeEnum.Tenant">
			<summary>
				租户库
			</summary>
		</member>
		<member name="F:Fast.Sugar.Attributes.SugarDbTypeEnum.SystemLog">
			<summary>
				系统日志库
			</summary>
		</member>
		<member name="F:Fast.Sugar.Attributes.SugarDbTypeEnum.ActionLog">
			<summary>
				操作日志库
			</summary>
		</member>
		<member name="T:Fast.Sugar.Attributes.SugarDbTypeAttribute">
			<summary>
				Sugar数据库类型特征，区分是那个数据库，默认是Default库（0）
			</summary>
		</member>
		<member name="P:Fast.Sugar.Attributes.SugarDbTypeAttribute.DbType">
			<summary>
				数据库类型
			</summary>
		</member>
		<member name="P:Fast.Sugar.Attributes.SugarDbTypeAttribute.DbTypeName">
			<summary>
				数据库类型名称
			</summary>
		</member>
		<member name="M:Fast.Sugar.Attributes.SugarDbTypeAttribute.#ctor">
			<summary>
				Sugar数据库类型特征，区分是那个数据库，默认是Default库（0）
			</summary>
		</member>
		<member name="M:Fast.Sugar.Attributes.SugarDbTypeAttribute.#ctor(System.Int32,System.String)">
			<summary>
				Sugar数据库类型特征，区分是那个数据库，默认是Default库（0）
			</summary>
			<param name="dbType">数据库类型（Int类型）</param>
			<param name="dbTypeName">数据库类型名称</param>
		</member>
		<member name="M:Fast.Sugar.Attributes.SugarDbTypeAttribute.#ctor(Fast.Sugar.Attributes.SugarDbTypeEnum)">
			<summary>
				Sugar数据库类型特征，区分是那个数据库，默认是Default库（0）
			</summary>
			<param name="dbType">数据库类型（SugarDbTypeEnum类型）</param>
		</member>
		<member name="T:Fast.Sugar.BaseModel.BaseEntity">
			<summary>
				实体基类
			</summary>
		</member>
		<member name="P:Fast.Sugar.BaseModel.BaseEntity.CreatedTime">
			<summary>
				创建时间
			</summary>
		</member>
		<member name="P:Fast.Sugar.BaseModel.BaseEntity.CreatedUserId">
			<summary>
				创建者Id
			</summary>
		</member>
		<member name="P:Fast.Sugar.BaseModel.BaseEntity.CreatedUserName">
			<summary>
				创建者名称
			</summary>
		</member>
		<member name="P:Fast.Sugar.BaseModel.BaseEntity.UpdatedTime">
			<summary>
				更新时间
			</summary>
		</member>
		<member name="P:Fast.Sugar.BaseModel.BaseEntity.UpdatedUserId">
			<summary>
				更新者Id
			</summary>
		</member>
		<member name="P:Fast.Sugar.BaseModel.BaseEntity.UpdatedUserName">
			<summary>
				更新者名称
			</summary>
		</member>
		<member name="P:Fast.Sugar.BaseModel.BaseEntity.UpdatedVersion">
			<summary>
				更新版本控制字段
			</summary>
		</member>
		<member name="P:Fast.Sugar.BaseModel.BaseEntity.IsDeleted">
			<summary>
				软删除
			</summary>
		</member>
		<member name="M:Fast.Sugar.BaseModel.BaseEntity.UpdateColumn">
			<summary>
				更新信息列
			</summary>
			<returns></returns>
		</member>
		<member name="M:Fast.Sugar.BaseModel.BaseEntity.FalseDeleteColumn">
			<summary>
				假删除的列，包含更新信息
			</summary>
			<returns></returns>
		</member>
		<member name="T:Fast.Sugar.BaseModel.BaseLogEntity">
			<summary>
				记录基类实现
			</summary>
		</member>
		<member name="P:Fast.Sugar.BaseModel.BaseLogEntity.Id">
			<summary>
				主键Id
			</summary>
		</member>
		<member name="P:Fast.Sugar.BaseModel.BaseLogEntity.PhoneModel">
			<summary>
				手机型号
			</summary>
		</member>
		<member name="P:Fast.Sugar.BaseModel.BaseLogEntity.OS">
			<summary>
				操作系统
			</summary>
		</member>
		<member name="P:Fast.Sugar.BaseModel.BaseLogEntity.Browser">
			<summary>
				浏览器
			</summary>
		</member>
		<member name="P:Fast.Sugar.BaseModel.BaseLogEntity.Province">
			<summary>
				省份
			</summary>
		</member>
		<member name="P:Fast.Sugar.BaseModel.BaseLogEntity.City">
			<summary>
				城市
			</summary>
		</member>
		<member name="P:Fast.Sugar.BaseModel.BaseLogEntity.Operator">
			<summary>
				运营商
			</summary>
		</member>
		<member name="P:Fast.Sugar.BaseModel.BaseLogEntity.Ip">
			<summary>
				Ip
			</summary>
		</member>
		<member name="M:Fast.Sugar.BaseModel.BaseLogEntity.RecordCreate">
			<summary>
				记录表创建
			</summary>
		</member>
		<member name="T:Fast.Sugar.BaseModel.BaseTenant">
			<summary>
				租户基类
			</summary>
		</member>
		<member name="P:Fast.Sugar.BaseModel.BaseTenant.TenantId">
			<summary>
				租户Id
			</summary>
		</member>
		<member name="T:Fast.Sugar.BaseModel.BaseTEntity">
			<summary>
				租户实体基类
			</summary>
		</member>
		<member name="P:Fast.Sugar.BaseModel.BaseTEntity.TenantId">
			<summary>
				租户Id
			</summary>
		</member>
		<member name="T:Fast.Sugar.BaseModel.IdentityEntity">
			<summary>
				递增主键实体基类
			</summary>
		</member>
		<member name="P:Fast.Sugar.BaseModel.IdentityEntity.Id">
			<summary>
				主键Id
			</summary>
		</member>
		<member name="T:Fast.Sugar.BaseModel.Interface.IBaseDeleted">
			<summary>
				IsDeleted 软删除 接口定义类
			</summary>
		</member>
		<member name="P:Fast.Sugar.BaseModel.Interface.IBaseDeleted.IsDeleted">
			<summary>
				软删除
			</summary>
		</member>
		<member name="T:Fast.Sugar.BaseModel.Interface.IBaseEntity">
			<summary>
				BaseEntity 接口定义类
			</summary>
		</member>
		<member name="P:Fast.Sugar.BaseModel.Interface.IBaseEntity.CreatedTime">
			<summary>
				创建时间
			</summary>
		</member>
		<member name="P:Fast.Sugar.BaseModel.Interface.IBaseEntity.UpdatedTime">
			<summary>
				更新时间
			</summary>
		</member>
		<member name="P:Fast.Sugar.BaseModel.Interface.IBaseEntity.CreatedUserId">
			<summary>
				创建者Id
			</summary>
		</member>
		<member name="P:Fast.Sugar.BaseModel.Interface.IBaseEntity.CreatedUserName">
			<summary>
				创建者名称
			</summary>
		</member>
		<member name="P:Fast.Sugar.BaseModel.Interface.IBaseEntity.UpdatedUserId">
			<summary>
				更新者Id
			</summary>
		</member>
		<member name="P:Fast.Sugar.BaseModel.Interface.IBaseEntity.UpdatedUserName">
			<summary>
				更新者名称
			</summary>
		</member>
		<member name="P:Fast.Sugar.BaseModel.Interface.IBaseEntity.UpdatedVersion">
			<summary>
				更新版本控制字段
			</summary>
		</member>
		<member name="P:Fast.Sugar.BaseModel.Interface.IBaseEntity.IsDeleted">
			<summary>
				软删除
			</summary>
		</member>
		<member name="M:Fast.Sugar.BaseModel.Interface.IBaseEntity.UpdateColumn">
			<summary>
				更新信息列
			</summary>
			<returns></returns>
		</member>
		<member name="M:Fast.Sugar.BaseModel.Interface.IBaseEntity.FalseDeleteColumn">
			<summary>
				假删除的列，包含更新信息
			</summary>
			<returns></returns>
		</member>
		<member name="T:Fast.Sugar.BaseModel.Interface.IBaseLogEntity">
			<summary>
				IBaseRecordEntity 接口定义
			</summary>
		</member>
		<member name="P:Fast.Sugar.BaseModel.Interface.IBaseLogEntity.PhoneModel">
			<summary>
				手机型号
			</summary>
		</member>
		<member name="P:Fast.Sugar.BaseModel.Interface.IBaseLogEntity.OS">
			<summary>
				操作系统
			</summary>
		</member>
		<member name="P:Fast.Sugar.BaseModel.Interface.IBaseLogEntity.Browser">
			<summary>
				浏览器
			</summary>
		</member>
		<member name="P:Fast.Sugar.BaseModel.Interface.IBaseLogEntity.Province">
			<summary>
				省份
			</summary>
		</member>
		<member name="P:Fast.Sugar.BaseModel.Interface.IBaseLogEntity.City">
			<summary>
				城市
			</summary>
		</member>
		<member name="P:Fast.Sugar.BaseModel.Interface.IBaseLogEntity.Operator">
			<summary>
				运营商
			</summary>
		</member>
		<member name="P:Fast.Sugar.BaseModel.Interface.IBaseLogEntity.Ip">
			<summary>
				Ip
			</summary>
		</member>
		<member name="M:Fast.Sugar.BaseModel.Interface.IBaseLogEntity.RecordCreate">
			<summary>
				记录表创建
			</summary>
		</member>
		<member name="T:Fast.Sugar.BaseModel.Interface.IBaseTenant">
			<summary>
				BaseTEntity 接口定义类
			</summary>
		</member>
		<member name="P:Fast.Sugar.BaseModel.Interface.IBaseTenant.TenantId">
			<summary>
				租户Id
			</summary>
		</member>
		<member name="T:Fast.Sugar.BaseModel.Interface.IDbEntity">
			<summary>
				所有的数据库Model，都应该继承此接口
			</summary>
		</member>
		<member name="T:Fast.Sugar.BaseModel.Interface.IPrimaryKeyEntity`1">
			<summary>
				主键接口
			</summary>
			<typeparam name="T"></typeparam>
		</member>
		<member name="P:Fast.Sugar.BaseModel.Interface.IPrimaryKeyEntity`1.Id">
			<summary>
				主键Id
			</summary>
		</member>
		<member name="T:Fast.Sugar.BaseModel.PrimaryKeyEntity">
			<summary>
				主键实体基类
			</summary>
		</member>
		<member name="P:Fast.Sugar.BaseModel.PrimaryKeyEntity.Id">
			<summary>
				主键Id
			</summary>
		</member>
		<member name="T:Fast.Sugar.Enum.DiffLogTypeEnum">
			<summary>
				差异日志类型
			</summary>
		</member>
		<member name="F:Fast.Sugar.Enum.DiffLogTypeEnum.Insert">
			<summary>
				添加
			</summary>
		</member>
		<member name="F:Fast.Sugar.Enum.DiffLogTypeEnum.Update">
			<summary>
				更新
			</summary>
		</member>
		<member name="F:Fast.Sugar.Enum.DiffLogTypeEnum.Delete">
			<summary>
				删除
			</summary>
		</member>
		<member name="F:Fast.Sugar.Enum.DiffLogTypeEnum.None">
			<summary>
				未知
			</summary>
		</member>
		<member name="T:Fast.Sugar.Extensions.SqlSugarExtension">
			<summary>
				SqlSugar 拓展类
			</summary>
		</member>
		<member name="M:Fast.Sugar.Extensions.SqlSugarExtension.GetDefaultDataBaseInfo">
			<summary>
				获取默认连接配置
			</summary>
			<returns></returns>
		</member>
		<member
			name="M:Fast.Sugar.Extensions.SqlSugarExtension.LoadSqlSugar``1(SqlSugar.ISqlSugarClient,Fast.Authentication.IUser,Fast.Cache.ICache,System.Nullable{System.Int64})">
			<summary>
				LoadSqlSugar，支持传入租户Id，获取租户Id的DbClient
				默认是当前登录用户的租户Id
			</summary>
			<typeparam name="TEntity"></typeparam>
			<param name="db"></param>
			<param name="_user"></param>
			<param name="_cache"></param>
			<param name="tenantId"></param>
			<returns></returns>
		</member>
		<member name="M:Fast.Sugar.Extensions.SqlSugarExtension.GetSugarTableName(System.Type)">
			<summary>
				获取SugarTable特性中的TableName
			</summary>
			<param name="type"></param>
			<returns></returns>
		</member>
		<member name="M:Fast.Sugar.Extensions.SqlSugarExtension.ToDataTable``1(System.Collections.Generic.List{``0})">
			<summary>
				转为DataTable
			</summary>
			<typeparam name="T"></typeparam>
			<param name="list"></param>
			<returns></returns>
		</member>
		<member
			name="M:Fast.Sugar.Extensions.SqlSugarExtension.ToPagedList``1(SqlSugar.ISugarQueryable{``0},System.Int32,System.Int32)">
			<summary>
				SqlSugar分页扩展
			</summary>
			<typeparam name="TEntity"></typeparam>
			<param name="queryable"></param>
			<param name="pageIndex"></param>
			<param name="pageSize"></param>
			<returns></returns>
		</member>
		<member
			name="M:Fast.Sugar.Extensions.SqlSugarExtension.ToPagedListAsync``1(SqlSugar.ISugarQueryable{``0},System.Int32,System.Int32)">
			<summary>
				SqlSugar分页扩展
			</summary>
			<typeparam name="TEntity"></typeparam>
			<param name="queryable"></param>
			<param name="pageIndex"></param>
			<param name="pageSize"></param>
			<returns></returns>
		</member>
		<member
			name="M:Fast.Sugar.Extensions.SqlSugarExtension.ToPagedList``2(SqlSugar.ISugarQueryable{``0},System.Int32,System.Int32,System.Linq.Expressions.Expression{System.Func{``0,``1}})">
			<summary>
				SqlSugar分页扩展
			</summary>
			<typeparam name="TEntity"></typeparam>
			<typeparam name="TResult"></typeparam>
			<param name="queryable"></param>
			<param name="pageIndex"></param>
			<param name="pageSize"></param>
			<param name="expression"></param>
			<returns></returns>
		</member>
		<member
			name="M:Fast.Sugar.Extensions.SqlSugarExtension.ToPagedListAsync``2(SqlSugar.ISugarQueryable{``0},System.Int32,System.Int32,System.Linq.Expressions.Expression{System.Func{``0,``1}})">
			<summary>
				SqlSugar分页扩展
			</summary>
			<typeparam name="TEntity"></typeparam>
			<typeparam name="TResult"></typeparam>
			<param name="queryable"></param>
			<param name="pageIndex"></param>
			<param name="pageSize"></param>
			<param name="expression"></param>
			<returns></returns>
		</member>
		<member name="T:Fast.Sugar.Extensions.SqlSugarIServiceCollectionExtension">
			<summary>
				<see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> 拓展类
			</summary>
		</member>
		<member
			name="M:Fast.Sugar.Extensions.SqlSugarIServiceCollectionExtension.AddSqlSugar(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
			<summary>
				SqlSugarClient的配置
				Client不能单例注入
			</summary>
			<param name="service"></param>
		</member>
		<member name="T:Fast.Sugar.Filter.SugarEntityFilter">
			<summary>
				Sugar实体类过滤器
			</summary>
		</member>
		<member name="P:Fast.Sugar.Filter.SugarEntityFilter.LogWhiteList">
			<summary>
				日志白名单表集合
			</summary>
		</member>
		<member
			name="M:Fast.Sugar.Filter.SugarEntityFilter.LoadSugarFilter(SqlSugar.ISqlSugarClient,System.Int32,System.Double,System.Boolean)">
			<summary>
				加载过滤器
			</summary>
			<param name="_db"></param>
			<param name="commandTimeOut">超时时间</param>
			<param name="sugarSqlExecMaxSeconds">SqlSugar Sql执行最大秒数，如果超过记录警告日志</param>
			<param name="diffLog">差异日志</param>
		</member>
		<member
			name="M:Fast.Sugar.Filter.SugarEntityFilter.SetEntityValue(System.String,System.Collections.Generic.ICollection{System.Object},System.Object,SqlSugar.DataFilterModel@,System.String)">
			<summary>
				设置Entity Value
			</summary>
			<param name="fieldName"></param>
			<param name="emptyList"></param>
			<param name="setValue"></param>
			<param name="entityInfo"></param>
			<param name="propertyName"></param>
		</member>
		<member
			name="M:Fast.Sugar.Filter.SugarEntityFilter.EntityValueCheck(System.String,System.Collections.Generic.ICollection{System.Object},SqlSugar.DataFilterModel)">
			<summary>
				Entity Value 检测
			</summary>
			<param name="propertyName"></param>
			<param name="emptyList"></param>
			<param name="entityInfo"></param>
			<returns></returns>
		</member>
		<member
			name="M:Fast.Sugar.Filter.SugarEntityFilter.ParameterFormat(System.String,System.Collections.Generic.IReadOnlyList{SqlSugar.SugarParameter})">
			<summary>
				格式化参数拼接成完整的SQL语句
			</summary>
			<param name="sql"></param>
			<param name="pars"></param>
			<returns></returns>
		</member>
		<member name="M:Fast.Sugar.Filter.SugarEntityFilter.ParameterFormat(System.String,System.Object)">
			<summary>
				格式化参数拼接成完整的SQL语句
			</summary>
			<param name="sql"></param>
			<param name="pars"></param>
			<returns></returns>
		</member>
		<member name="T:Fast.Sugar.Internal.SqlSugarPagedList`1">
			<summary>
				SqlSugar 分页泛型集合
			</summary>
			<typeparam name="TEntity"></typeparam>
		</member>
		<member name="P:Fast.Sugar.Internal.SqlSugarPagedList`1.PageIndex">
			<summary>
				页码
			</summary>
		</member>
		<member name="P:Fast.Sugar.Internal.SqlSugarPagedList`1.PageSize">
			<summary>
				页容量
			</summary>
		</member>
		<member name="P:Fast.Sugar.Internal.SqlSugarPagedList`1.TotalCount">
			<summary>
				总条数
			</summary>
		</member>
		<member name="P:Fast.Sugar.Internal.SqlSugarPagedList`1.TotalPages">
			<summary>
				总页数
			</summary>
		</member>
		<member name="P:Fast.Sugar.Internal.SqlSugarPagedList`1.Items">
			<summary>
				当前页集合
			</summary>
		</member>
		<member name="P:Fast.Sugar.Internal.SqlSugarPagedList`1.HasPrevPages">
			<summary>
				是否有上一页
			</summary>
		</member>
		<member name="P:Fast.Sugar.Internal.SqlSugarPagedList`1.HasNextPages">
			<summary>
				是否有下一页
			</summary>
		</member>
		<member name="T:Fast.Sugar.Internal.SugarEntityTypeInfo">
			<summary>
				Sugar实体类型信息
			</summary>
		</member>
		<member
			name="M:Fast.Sugar.Internal.SugarEntityTypeInfo.#ctor(System.String,System.Int32,System.String,System.Boolean,System.Type)">
			<summary>
				Sugar实体类型信息
			</summary>
			<param name="className">类名称</param>
			<param name="dbType">数据库类型</param>
			<param name="dbTypeName">数据库类型名称</param>
			<param name="isSplitTable">是否分表</param>
			<param name="type">实体类型</param>
		</member>
		<member name="P:Fast.Sugar.Internal.SugarEntityTypeInfo.ClassName">
			<summary>
				类名称
			</summary>
		</member>
		<member name="P:Fast.Sugar.Internal.SugarEntityTypeInfo.DbType">
			<summary>
				数据库类型
			</summary>
		</member>
		<member name="P:Fast.Sugar.Internal.SugarEntityTypeInfo.DbTypeName">
			<summary>
				数据库类型名称
			</summary>
		</member>
		<member name="P:Fast.Sugar.Internal.SugarEntityTypeInfo.IsSplitTable">
			<summary>
				是否分表
			</summary>
		</member>
		<member name="P:Fast.Sugar.Internal.SugarEntityTypeInfo.Type">
			<summary>
				实体类型
			</summary>
		</member>
		<member name="P:Fast.Sugar.Options.ConnectionConfigOption.ConnectionId">
			<summary>
				SqlSugarClient 连接Id
			</summary>
		</member>
		<member name="P:Fast.Sugar.Options.ConnectionConfigOption.ServiceIp">
			<summary>
				服务器Ip地址
			</summary>
		</member>
		<member name="P:Fast.Sugar.Options.ConnectionConfigOption.Port">
			<summary>
				端口号
			</summary>
		</member>
		<member name="P:Fast.Sugar.Options.ConnectionConfigOption.DbName">
			<summary>
				数据库名称
			</summary>
		</member>
		<member name="P:Fast.Sugar.Options.ConnectionConfigOption.DbUser">
			<summary>
				数据库用户
			</summary>
		</member>
		<member name="P:Fast.Sugar.Options.ConnectionConfigOption.DbPwd">
			<summary>
				数据库密码
			</summary>
		</member>
		<member name="P:Fast.Sugar.Options.ConnectionConfigOption.SugarSysDbType">
			<summary>
				系统数据库类型
			</summary>
		</member>
		<member name="P:Fast.Sugar.Options.ConnectionConfigOption.SugarDbTypeName">
			<summary>
				系统数据库类型名称
			</summary>
		</member>
		<member name="P:Fast.Sugar.Options.ConnectionConfigOption.DbType">
			<summary>
				数据库类型，用于区分使用的是那个类型的数据库
			</summary>
		</member>
		<member name="P:Fast.Sugar.Options.ConnectionConfigOption.CommandTimeOut">
			<summary>
				超时时间，单位秒
			</summary>
		</member>
		<member name="P:Fast.Sugar.Options.ConnectionConfigOption.SugarSqlExecMaxSeconds">
			<summary>
				SqlSugar Sql执行最大秒数，如果超过记录警告日志
			</summary>
		</member>
		<member name="P:Fast.Sugar.Options.ConnectionConfigOption.DiffLog">
			<summary>
				差异日志
			</summary>
		</member>
		<member name="T:Fast.Sugar.Repository.ISqlSugarRepository">
			<summary>
				非泛型 SqlSugar 仓储
			</summary>
		</member>
		<member name="M:Fast.Sugar.Repository.ISqlSugarRepository.Change``1">
			<summary>
				切换仓储
			</summary>
			<typeparam name="TEntity">实体类型</typeparam>
			<returns>仓储</returns>
		</member>
		<member name="T:Fast.Sugar.Repository.ISqlSugarRepository`1">
			<summary>
				SqlSugar 仓储接口定义
			</summary>
			<typeparam name="TEntity"></typeparam>
		</member>
		<member name="P:Fast.Sugar.Repository.ISqlSugarRepository`1.DataBaseInfo">
			<summary>
				当前仓储的数据库信息
			</summary>
		</member>
		<member name="P:Fast.Sugar.Repository.ISqlSugarRepository`1.Entities">
			<summary>
				实体集合
			</summary>
		</member>
		<member name="P:Fast.Sugar.Repository.ISqlSugarRepository`1.Context">
			<summary>
				数据库上下文
			</summary>
		</member>
		<member name="P:Fast.Sugar.Repository.ISqlSugarRepository`1.Ado">
			<summary>
				原生 Ado 对象
			</summary>
		</member>
		<member name="M:Fast.Sugar.Repository.ISqlSugarRepository`1.AsQueryable">
			<summary>
				构建查询分析器
			</summary>
			<returns></returns>
		</member>
		<member
			name="M:Fast.Sugar.Repository.ISqlSugarRepository`1.AsQueryable(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
			<summary>
				构建查询分析器
			</summary>
			<param name="whereExpression"></param>
			<returns></returns>
		</member>
		<member name="M:Fast.Sugar.Repository.ISqlSugarRepository`1.Change``1">
			<summary>
				切换仓储/切换租户仓储
			</summary>
			<typeparam name="TChangeEntity">实体类型</typeparam>
			<returns>仓储</returns>
		</member>
		<member
			name="M:Fast.Sugar.Repository.ISqlSugarRepository`1.Count(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
			<summary>
				获取总数
			</summary>
			<param name="whereExpression"></param>
			<returns></returns>
		</member>
		<member
			name="M:Fast.Sugar.Repository.ISqlSugarRepository`1.CountAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
			<summary>
				获取总数
			</summary>
			<param name="whereExpression"></param>
			<returns></returns>
		</member>
		<member
			name="M:Fast.Sugar.Repository.ISqlSugarRepository`1.Any(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
			<summary>
				检查是否存在
			</summary>
			<param name="whereExpression"></param>
			<returns></returns>
		</member>
		<member
			name="M:Fast.Sugar.Repository.ISqlSugarRepository`1.AnyAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
			<summary>
				检查是否存在
			</summary>
			<param name="whereExpression"></param>
			<returns></returns>
		</member>
		<member name="M:Fast.Sugar.Repository.ISqlSugarRepository`1.Single(System.Object)">
			<summary>
				根据主键获取实体
			</summary>
			<param name="Id"></param>
			<returns></returns>
		</member>
		<member
			name="M:Fast.Sugar.Repository.ISqlSugarRepository`1.Single(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
			<summary>
				根据条件获取实体
			</summary>
			<param name="whereExpression"></param>
			<returns></returns>
		</member>
		<member name="M:Fast.Sugar.Repository.ISqlSugarRepository`1.SingleAsync(System.Object)">
			<summary>
				根据主键获取实体
			</summary>
			<param name="Id"></param>
			<returns></returns>
		</member>
		<member
			name="M:Fast.Sugar.Repository.ISqlSugarRepository`1.SingleAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
			<summary>
				根据条件获取实体
			</summary>
			<param name="whereExpression"></param>
			<returns></returns>
		</member>
		<member
			name="M:Fast.Sugar.Repository.ISqlSugarRepository`1.FirstOrDefault(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
			<summary>
				获取一个实体
			</summary>
			<param name="whereExpression"></param>
			<returns></returns>
		</member>
		<member
			name="M:Fast.Sugar.Repository.ISqlSugarRepository`1.FirstOrDefaultAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
			<summary>
				获取一个实体
			</summary>
			<param name="whereExpression"></param>
			<returns></returns>
		</member>
		<member name="M:Fast.Sugar.Repository.ISqlSugarRepository`1.ToListAsync">
			<summary>
				获取列表
			</summary>
			<returns></returns>
		</member>
		<member
			name="M:Fast.Sugar.Repository.ISqlSugarRepository`1.ToListAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
			<summary>
				获取列表
			</summary>
			<param name="whereExpression"></param>
			<returns></returns>
		</member>
		<member
			name="M:Fast.Sugar.Repository.ISqlSugarRepository`1.ToListAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Object}},SqlSugar.OrderByType)">
			<summary>
				获取列表
			</summary>
			<param name="whereExpression"></param>
			<param name="orderByExpression"></param>
			<param name="orderByType"></param>
			<returns></returns>
		</member>
		<member
			name="M:Fast.Sugar.Repository.ISqlSugarRepository`1.ToList(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
			<summary>
				获取列表
			</summary>
			<param name="whereExpression"></param>
			<returns></returns>
		</member>
		<member
			name="M:Fast.Sugar.Repository.ISqlSugarRepository`1.ToList(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Object}},SqlSugar.OrderByType)">
			<summary>
				获取列表
			</summary>
			<param name="whereExpression"></param>
			<param name="orderByExpression"></param>
			<param name="orderByType"></param>
			<returns></returns>
		</member>
		<member
			name="M:Fast.Sugar.Repository.ISqlSugarRepository`1.IsExists(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
			<summary>
				查询是否存在
			</summary>
			<param name="whereExpression"></param>
			<returns></returns>
		</member>
		<member
			name="M:Fast.Sugar.Repository.ISqlSugarRepository`1.IsExistsAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
			<summary>
				查询是否存在
			</summary>
			<param name="whereExpression"></param>
			<returns></returns>
		</member>
		<member
			name="M:Fast.Sugar.Repository.ISqlSugarRepository`1.Where(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
			<summary>
				根据表达式查询多条记录
			</summary>
			<param name="predicate"></param>
			<returns></returns>
		</member>
		<member
			name="M:Fast.Sugar.Repository.ISqlSugarRepository`1.Where(System.Boolean,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
			<summary>
				根据表达式查询多条记录
			</summary>
			<param name="condition"></param>
			<param name="predicate"></param>
			<returns></returns>
		</member>
		<member name="M:Fast.Sugar.Repository.ISqlSugarRepository`1.AsEnumerable">
			<summary>
				直接返回数据库结果
			</summary>
			<returns></returns>
		</member>
		<member
			name="M:Fast.Sugar.Repository.ISqlSugarRepository`1.AsEnumerable(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
			<summary>
				直接返回数据库结果
			</summary>
			<param name="predicate"></param>
			<returns></returns>
		</member>
		<member name="M:Fast.Sugar.Repository.ISqlSugarRepository`1.AsAsyncEnumerable">
			<summary>
				直接返回数据库结果
			</summary>
			<returns></returns>
		</member>
		<member
			name="M:Fast.Sugar.Repository.ISqlSugarRepository`1.AsAsyncEnumerable(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
			<summary>
				直接返回数据库结果
			</summary>
			<param name="predicate"></param>
			<returns></returns>
		</member>
		<member name="M:Fast.Sugar.Repository.ISqlSugarRepository`1.Insert(`0)">
			<summary>
				新增一条记录
			</summary>
			<param name="entity"></param>
			<returns></returns>
		</member>
		<member name="M:Fast.Sugar.Repository.ISqlSugarRepository`1.Insert(`0[])">
			<summary>
				新增多条记录
			</summary>
			<param name="entities"></param>
			<returns></returns>
		</member>
		<member name="M:Fast.Sugar.Repository.ISqlSugarRepository`1.Insert(System.Collections.Generic.IEnumerable{`0})">
			<summary>
				新增多条记录
			</summary>
			<param name="entities"></param>
			<returns></returns>
		</member>
		<member name="M:Fast.Sugar.Repository.ISqlSugarRepository`1.InsertAsync(`0)">
			<summary>
				新增一条记录
			</summary>
			<param name="entity"></param>
			<returns></returns>
		</member>
		<member name="M:Fast.Sugar.Repository.ISqlSugarRepository`1.InsertAsync(`0[])">
			<summary>
				新增多条记录
			</summary>
			<param name="entities"></param>
			<returns></returns>
		</member>
		<member name="M:Fast.Sugar.Repository.ISqlSugarRepository`1.InsertAsync(System.Collections.Generic.IEnumerable{`0})">
			<summary>
				新增多条记录
			</summary>
			<param name="entities"></param>
			<returns></returns>
		</member>
		<member name="M:Fast.Sugar.Repository.ISqlSugarRepository`1.InsertReturnIdentity(`0)">
			<summary>
				新增一条记录返回自增Id
			</summary>
			<param name="insertObj"></param>
			<returns></returns>
		</member>
		<member name="M:Fast.Sugar.Repository.ISqlSugarRepository`1.InsertReturnIdentityAsync(`0)">
			<summary>
				新增一条记录返回自增Id
			</summary>
			<param name="insertObj"></param>
			<returns></returns>
		</member>
		<member name="M:Fast.Sugar.Repository.ISqlSugarRepository`1.ExecuteReturnBigIdentity(`0)">
			<summary>
				新增一条记录返回Long类型的Id
			</summary>
			<param name="entity"></param>
			<returns></returns>
		</member>
		<member name="M:Fast.Sugar.Repository.ISqlSugarRepository`1.ExecuteReturnBigIdentityAsync(`0)">
			<summary>
				新增一条记录返回Long类型的Id
			</summary>
			<param name="entity"></param>
			<returns></returns>
		</member>
		<member name="M:Fast.Sugar.Repository.ISqlSugarRepository`1.InsertReturnEntity(`0)">
			<summary>
				新增一条记录返回新增的数据
			</summary>
			<param name="insertObj"></param>
			<returns></returns>
		</member>
		<member name="M:Fast.Sugar.Repository.ISqlSugarRepository`1.InsertReturnEntityAsync(`0)">
			<summary>
				新增一条记录返回新增的数据
			</summary>
			<param name="insertObj"></param>
			<returns></returns>
		</member>
		<member name="M:Fast.Sugar.Repository.ISqlSugarRepository`1.Update(`0,System.Boolean)">
			<summary>
				更新一条记录
			</summary>
			<param name="entity"></param>
			<param name="isNoUpdateNull">是否排除NULL值字段更新</param>
			<returns></returns>
		</member>
		<member name="M:Fast.Sugar.Repository.ISqlSugarRepository`1.Update(`0[])">
			<summary>
				更新多条记录
			</summary>
			<param name="entities"></param>
			<returns></returns>
		</member>
		<member name="M:Fast.Sugar.Repository.ISqlSugarRepository`1.Update(System.Collections.Generic.IEnumerable{`0})">
			<summary>
				更新多条记录
			</summary>
			<param name="entities"></param>
			<returns></returns>
		</member>
		<member name="M:Fast.Sugar.Repository.ISqlSugarRepository`1.UpdateAsync(`0)">
			<summary>
				更新一条记录
			</summary>
			<param name="entity"></param>
			<returns></returns>
		</member>
		<member name="M:Fast.Sugar.Repository.ISqlSugarRepository`1.UpdateAsync(`0[])">
			<summary>
				更新多条记录
			</summary>
			<param name="entities"></param>
			<returns></returns>
		</member>
		<member name="M:Fast.Sugar.Repository.ISqlSugarRepository`1.UpdateAsync(System.Collections.Generic.IEnumerable{`0})">
			<summary>
				更新多条记录
			</summary>
			<param name="entities"></param>
			<returns></returns>
		</member>
		<member
			name="M:Fast.Sugar.Repository.ISqlSugarRepository`1.UpdateNoPrimaryKey(`0,System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
			<summary>
				无主键更新一条记录
			</summary>
			<param name="entity">更新的实体</param>
			<param name="columns">根据那些字段更新</param>
			<returns></returns>
		</member>
		<member
			name="M:Fast.Sugar.Repository.ISqlSugarRepository`1.UpdateNoPrimaryKey(System.Collections.Generic.List{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
			<summary>
				无主键更新多条记录
			</summary>
			<param name="entity">更新的实体</param>
			<param name="columns">根据那些字段更新</param>
			<returns></returns>
		</member>
		<member
			name="M:Fast.Sugar.Repository.ISqlSugarRepository`1.UpdateNoPrimaryKeyAsync(`0,System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
			<summary>
				无主键更新一条记录
			</summary>
			<param name="entity">更新的实体</param>
			<param name="columns">根据那些字段更新</param>
			<returns></returns>
		</member>
		<member
			name="M:Fast.Sugar.Repository.ISqlSugarRepository`1.UpdateNoPrimaryKeyAsync(System.Collections.Generic.List{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
			<summary>
				无主键更新多条记录
			</summary>
			<param name="entity">更新的实体</param>
			<param name="columns">根据那些字段更新</param>
			<returns></returns>
		</member>
		<member name="M:Fast.Sugar.Repository.ISqlSugarRepository`1.Delete(`0)">
			<summary>
				删除一条记录
			</summary>
			<param name="entity"></param>
			<returns></returns>
		</member>
		<member name="M:Fast.Sugar.Repository.ISqlSugarRepository`1.Delete(System.Object)">
			<summary>
				删除一条记录
			</summary>
			<param name="key"></param>
			<returns></returns>
		</member>
		<member name="M:Fast.Sugar.Repository.ISqlSugarRepository`1.Delete(System.Object[])">
			<summary>
				删除多条记录
			</summary>
			<param name="keys"></param>
			<returns></returns>
		</member>
		<member
			name="M:Fast.Sugar.Repository.ISqlSugarRepository`1.Delete(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
			<summary>
				自定义条件删除记录
			</summary>
			<param name="whereExpression"></param>
			<returns></returns>
		</member>
		<member name="M:Fast.Sugar.Repository.ISqlSugarRepository`1.DeleteAsync(`0)">
			<summary>
				删除一条记录
			</summary>
			<param name="entity"></param>
			<returns></returns>
		</member>
		<member name="M:Fast.Sugar.Repository.ISqlSugarRepository`1.DeleteAsync(System.Object)">
			<summary>
				删除一条记录
			</summary>
			<param name="key"></param>
			<returns></returns>
		</member>
		<member name="M:Fast.Sugar.Repository.ISqlSugarRepository`1.DeleteAsync(System.Object[])">
			<summary>
				删除多条记录
			</summary>
			<param name="keys"></param>
			<returns></returns>
		</member>
		<member
			name="M:Fast.Sugar.Repository.ISqlSugarRepository`1.DeleteAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
			<summary>
				自定义条件删除记录
			</summary>
			<param name="whereExpression"></param>
			<returns></returns>
		</member>
		<member name="M:Fast.Sugar.Repository.ISqlSugarRepository`1.ToPagedList(System.Int32,System.Int32)">
			<summary>
				分页查询
			</summary>
			<typeparam name="TEntity"></typeparam>
			<param name="pageIndex"></param>
			<param name="pageSize"></param>
			<returns></returns>
		</member>
		<member name="M:Fast.Sugar.Repository.ISqlSugarRepository`1.ToPagedListAsync(System.Int32,System.Int32)">
			<summary>
				分页查询
			</summary>
			<typeparam name="TEntity"></typeparam>
			<param name="pageIndex"></param>
			<param name="pageSize"></param>
			<returns></returns>
		</member>
		<member
			name="M:Fast.Sugar.Repository.ISqlSugarRepository`1.ToPagedList``1(System.Int32,System.Int32,System.Linq.Expressions.Expression{System.Func{`0,``0}})">
			<summary>
				分页查询
			</summary>
			<typeparam name="TEntity"></typeparam>
			<typeparam name="TResult"></typeparam>
			<param name="pageIndex"></param>
			<param name="pageSize"></param>
			<param name="expression"></param>
			<returns></returns>
		</member>
		<member
			name="M:Fast.Sugar.Repository.ISqlSugarRepository`1.ToPagedListAsync``1(System.Int32,System.Int32,System.Linq.Expressions.Expression{System.Func{`0,``0}})">
			<summary>
				分页查询
			</summary>
			<typeparam name="TEntity"></typeparam>
			<typeparam name="TResult"></typeparam>
			<param name="pageIndex"></param>
			<param name="pageSize"></param>
			<param name="expression"></param>
			<returns></returns>
		</member>
		<member name="T:Fast.Sugar.Repository.SqlSugarRepository">
			<summary>
				非泛型 SqlSugar 仓储
			</summary>
		</member>
		<member name="F:Fast.Sugar.Repository.SqlSugarRepository._serviceProvider">
			<summary>
				服务提供器
			</summary>
		</member>
		<member name="M:Fast.Sugar.Repository.SqlSugarRepository.#ctor(System.IServiceProvider)">
			<summary>
				构造函数
			</summary>
			<param name="serviceProvider">服务提供器</param>
		</member>
		<member name="M:Fast.Sugar.Repository.SqlSugarRepository.Change``1">
			<summary>
				切换仓储
			</summary>
			<typeparam name="TEntity">实体类型</typeparam>
			<returns>仓储</returns>
		</member>
		<member name="T:Fast.Sugar.Repository.SqlSugarRepository`1">
			<summary>
				SqlSugar 仓储实现类
			</summary>
			<typeparam name="TEntity"></typeparam>
		</member>
		<member name="F:Fast.Sugar.Repository.SqlSugarRepository`1._serviceProvider">
			<summary>
				服务提供器
			</summary>
		</member>
		<member name="F:Fast.Sugar.Repository.SqlSugarRepository`1._db">
			<summary>
				初始化 SqlSugar 客户端
			</summary>
		</member>
		<member
			name="M:Fast.Sugar.Repository.SqlSugarRepository`1.#ctor(System.IServiceProvider,SqlSugar.ISqlSugarClient,Fast.Authentication.IUser,Fast.Cache.ICache)">
			<summary>

			</summary>
			<param name="serviceProvider"></param>
			<param name="db"></param>
			<param name="user"></param>
			<param name="cache"></param>
		</member>
		<member name="P:Fast.Sugar.Repository.SqlSugarRepository`1.DataBaseInfo">
			<summary>
				当前仓储的数据库信息
			</summary>
		</member>
		<member name="P:Fast.Sugar.Repository.SqlSugarRepository`1.Entities">
			<summary>
				实体集合
			</summary>
		</member>
		<member name="P:Fast.Sugar.Repository.SqlSugarRepository`1.Context">
			<summary>
				数据库上下文
			</summary>
		</member>
		<member name="P:Fast.Sugar.Repository.SqlSugarRepository`1.Ado">
			<summary>
				原生 Ado 对象
			</summary>
		</member>
		<member name="M:Fast.Sugar.Repository.SqlSugarRepository`1.AsQueryable">
			<summary>
				构建查询分析器
			</summary>
			<returns></returns>
		</member>
		<member
			name="M:Fast.Sugar.Repository.SqlSugarRepository`1.AsQueryable(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
			<summary>
				构建查询分析器
			</summary>
			<param name="whereExpression"></param>
			<returns></returns>
		</member>
		<member name="M:Fast.Sugar.Repository.SqlSugarRepository`1.Change``1">
			<summary>
				切换仓储/切换租户仓储
			</summary>
			<typeparam name="TChangeEntity">实体类型</typeparam>
			<returns>仓储</returns>
		</member>
		<member
			name="M:Fast.Sugar.Repository.SqlSugarRepository`1.Count(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
			<summary>
				获取总数
			</summary>
			<param name="whereExpression"></param>
			<returns></returns>
		</member>
		<member
			name="M:Fast.Sugar.Repository.SqlSugarRepository`1.CountAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
			<summary>
				获取总数
			</summary>
			<param name="whereExpression"></param>
			<returns></returns>
		</member>
		<member
			name="M:Fast.Sugar.Repository.SqlSugarRepository`1.Any(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
			<summary>
				检查是否存在
			</summary>
			<param name="whereExpression"></param>
			<returns></returns>
		</member>
		<member
			name="M:Fast.Sugar.Repository.SqlSugarRepository`1.AnyAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
			<summary>
				检查是否存在
			</summary>
			<param name="whereExpression"></param>
			<returns></returns>
		</member>
		<member name="M:Fast.Sugar.Repository.SqlSugarRepository`1.Single(System.Object)">
			<summary>
				根据主键获取实体
			</summary>
			<param name="Id"></param>
			<returns></returns>
		</member>
		<member name="M:Fast.Sugar.Repository.SqlSugarRepository`1.SingleAsync(System.Object)">
			<summary>
				根据主键获取实体
			</summary>
			<param name="Id"></param>
			<returns></returns>
		</member>
		<member
			name="M:Fast.Sugar.Repository.SqlSugarRepository`1.Single(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
			<summary>
				根据条件获取实体
			</summary>
			<param name="whereExpression"></param>
			<returns></returns>
		</member>
		<member
			name="M:Fast.Sugar.Repository.SqlSugarRepository`1.SingleAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
			<summary>
				根据条件获取实体
			</summary>
			<param name="whereExpression"></param>
			<returns></returns>
		</member>
		<member
			name="M:Fast.Sugar.Repository.SqlSugarRepository`1.FirstOrDefault(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
			<summary>
				获取一个实体
			</summary>
			<param name="whereExpression"></param>
			<returns></returns>
		</member>
		<member
			name="M:Fast.Sugar.Repository.SqlSugarRepository`1.FirstOrDefaultAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
			<summary>
				获取一个实体
			</summary>
			<param name="whereExpression"></param>
			<returns></returns>
		</member>
		<member name="M:Fast.Sugar.Repository.SqlSugarRepository`1.ToListAsync">
			<summary>
				获取列表
			</summary>
			<returns></returns>
		</member>
		<member
			name="M:Fast.Sugar.Repository.SqlSugarRepository`1.ToList(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
			<summary>
				获取列表
			</summary>
			<param name="whereExpression"></param>
			<returns></returns>
		</member>
		<member
			name="M:Fast.Sugar.Repository.SqlSugarRepository`1.ToListAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
			<summary>
				获取列表
			</summary>
			<param name="whereExpression"></param>
			<returns></returns>
		</member>
		<member
			name="M:Fast.Sugar.Repository.SqlSugarRepository`1.ToList(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Object}},SqlSugar.OrderByType)">
			<summary>
				获取列表
			</summary>
			<param name="whereExpression"></param>
			<param name="orderByExpression"></param>
			<param name="orderByType"></param>
			<returns></returns>
		</member>
		<member
			name="M:Fast.Sugar.Repository.SqlSugarRepository`1.ToListAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Object}},SqlSugar.OrderByType)">
			<summary>
				获取列表
			</summary>
			<param name="whereExpression"></param>
			<param name="orderByExpression"></param>
			<param name="orderByType"></param>
			<returns></returns>
		</member>
		<member
			name="M:Fast.Sugar.Repository.SqlSugarRepository`1.IsExists(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
			<summary>
				查询是否存在
			</summary>
			<param name="whereExpression"></param>
			<returns></returns>
		</member>
		<member
			name="M:Fast.Sugar.Repository.SqlSugarRepository`1.IsExistsAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
			<summary>
				查询是否存在
			</summary>
			<param name="whereExpression"></param>
			<returns></returns>
		</member>
		<member
			name="M:Fast.Sugar.Repository.SqlSugarRepository`1.Where(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
			<summary>
				根据表达式查询多条记录
			</summary>
			<param name="predicate"></param>
			<returns></returns>
		</member>
		<member
			name="M:Fast.Sugar.Repository.SqlSugarRepository`1.Where(System.Boolean,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
			<summary>
				根据表达式查询多条记录
			</summary>
			<param name="condition"></param>
			<param name="predicate"></param>
			<returns></returns>
		</member>
		<member name="M:Fast.Sugar.Repository.SqlSugarRepository`1.AsEnumerable">
			<summary>
				直接返回数据库结果
			</summary>
			<returns></returns>
		</member>
		<member
			name="M:Fast.Sugar.Repository.SqlSugarRepository`1.AsEnumerable(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
			<summary>
				直接返回数据库结果
			</summary>
			<param name="predicate"></param>
			<returns></returns>
		</member>
		<member name="M:Fast.Sugar.Repository.SqlSugarRepository`1.AsAsyncEnumerable">
			<summary>
				直接返回数据库结果
			</summary>
			<returns></returns>
		</member>
		<member
			name="M:Fast.Sugar.Repository.SqlSugarRepository`1.AsAsyncEnumerable(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
			<summary>
				直接返回数据库结果
			</summary>
			<param name="predicate"></param>
			<returns></returns>
		</member>
		<member name="M:Fast.Sugar.Repository.SqlSugarRepository`1.Insert(`0)">
			<summary>
				新增一条记录
			</summary>
			<param name="entity"></param>
			<returns></returns>
		</member>
		<member name="M:Fast.Sugar.Repository.SqlSugarRepository`1.InsertAsync(`0)">
			<summary>
				新增一条记录
			</summary>
			<param name="entity"></param>
			<returns></returns>
		</member>
		<member name="M:Fast.Sugar.Repository.SqlSugarRepository`1.Insert(`0[])">
			<summary>
				新增多条记录
			</summary>
			<param name="entities"></param>
			<returns></returns>
		</member>
		<member name="M:Fast.Sugar.Repository.SqlSugarRepository`1.InsertAsync(`0[])">
			<summary>
				新增多条记录
			</summary>
			<param name="entities"></param>
			<returns></returns>
		</member>
		<member name="M:Fast.Sugar.Repository.SqlSugarRepository`1.Insert(System.Collections.Generic.IEnumerable{`0})">
			<summary>
				新增多条记录
			</summary>
			<param name="entities"></param>
			<returns></returns>
		</member>
		<member name="M:Fast.Sugar.Repository.SqlSugarRepository`1.InsertAsync(System.Collections.Generic.IEnumerable{`0})">
			<summary>
				新增多条记录
			</summary>
			<param name="entities"></param>
			<returns></returns>
		</member>
		<member name="M:Fast.Sugar.Repository.SqlSugarRepository`1.InsertReturnIdentity(`0)">
			<summary>
				新增一条记录返回自增Id
			</summary>
			<param name="insertObj"></param>
			<returns></returns>
		</member>
		<member name="M:Fast.Sugar.Repository.SqlSugarRepository`1.InsertReturnIdentityAsync(`0)">
			<summary>
				新增一条记录返回自增Id
			</summary>
			<param name="insertObj"></param>
			<returns></returns>
		</member>
		<member name="M:Fast.Sugar.Repository.SqlSugarRepository`1.ExecuteReturnBigIdentity(`0)">
			<summary>
				新增一条记录返回Long类型的Id
			</summary>
			<param name="entity"></param>
			<returns></returns>
		</member>
		<member name="M:Fast.Sugar.Repository.SqlSugarRepository`1.ExecuteReturnBigIdentityAsync(`0)">
			<summary>
				新增一条记录返回Long类型的Id
			</summary>
			<param name="entity"></param>
			<returns></returns>
		</member>
		<member name="M:Fast.Sugar.Repository.SqlSugarRepository`1.InsertReturnEntity(`0)">
			<summary>
				新增一条记录返回新增的数据
			</summary>
			<param name="insertObj"></param>
			<returns></returns>
		</member>
		<member name="M:Fast.Sugar.Repository.SqlSugarRepository`1.InsertReturnEntityAsync(`0)">
			<summary>
				新增一条记录返回新增的数据
			</summary>
			<param name="insertObj"></param>
			<returns></returns>
		</member>
		<member name="M:Fast.Sugar.Repository.SqlSugarRepository`1.Update(`0,System.Boolean)">
			<summary>
				更新一条记录
			</summary>
			<param name="entity"></param>
			<param name="isNoUpdateNull">是否排除NULL值字段更新</param>
			<returns></returns>
		</member>
		<member name="M:Fast.Sugar.Repository.SqlSugarRepository`1.UpdateAsync(`0)">
			<summary>
				更新一条记录
			</summary>
			<param name="entity"></param>
			<returns></returns>
		</member>
		<member name="M:Fast.Sugar.Repository.SqlSugarRepository`1.Update(`0[])">
			<summary>
				更新多条记录
			</summary>
			<param name="entities"></param>
			<returns></returns>
		</member>
		<member name="M:Fast.Sugar.Repository.SqlSugarRepository`1.UpdateAsync(`0[])">
			<summary>
				更新多条记录
			</summary>
			<param name="entities"></param>
			<returns></returns>
		</member>
		<member name="M:Fast.Sugar.Repository.SqlSugarRepository`1.Update(System.Collections.Generic.IEnumerable{`0})">
			<summary>
				更新多条记录
			</summary>
			<param name="entities"></param>
			<returns></returns>
		</member>
		<member name="M:Fast.Sugar.Repository.SqlSugarRepository`1.UpdateAsync(System.Collections.Generic.IEnumerable{`0})">
			<summary>
				更新多条记录
			</summary>
			<param name="entities"></param>
			<returns></returns>
		</member>
		<member
			name="M:Fast.Sugar.Repository.SqlSugarRepository`1.UpdateNoPrimaryKey(`0,System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
			<summary>
				无主键更新一条记录
			</summary>
			<param name="entity">更新的实体</param>
			<param name="columns">根据那些字段更新</param>
			<returns></returns>
		</member>
		<member
			name="M:Fast.Sugar.Repository.SqlSugarRepository`1.UpdateNoPrimaryKeyAsync(`0,System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
			<summary>
				无主键更新一条记录
			</summary>
			<param name="entity">更新的实体</param>
			<param name="columns">根据那些字段更新</param>
			<returns></returns>
		</member>
		<member
			name="M:Fast.Sugar.Repository.SqlSugarRepository`1.UpdateNoPrimaryKey(System.Collections.Generic.List{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
			<summary>
				无主键更新多条记录
			</summary>
			<param name="entity">更新的实体</param>
			<param name="columns">根据那些字段更新</param>
			<returns></returns>
		</member>
		<member
			name="M:Fast.Sugar.Repository.SqlSugarRepository`1.UpdateNoPrimaryKeyAsync(System.Collections.Generic.List{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
			<summary>
				无主键更新多条记录
			</summary>
			<param name="entity">更新的实体</param>
			<param name="columns">根据那些字段更新</param>
			<returns></returns>
		</member>
		<member name="M:Fast.Sugar.Repository.SqlSugarRepository`1.Delete(`0)">
			<summary>
				删除一条记录
			</summary>
			<param name="entity"></param>
			<returns></returns>
		</member>
		<member name="M:Fast.Sugar.Repository.SqlSugarRepository`1.Delete(System.Object)">
			<summary>
				删除一条记录
			</summary>
			<param name="key"></param>
			<returns></returns>
		</member>
		<member name="M:Fast.Sugar.Repository.SqlSugarRepository`1.Delete(System.Object[])">
			<summary>
				删除多条记录
			</summary>
			<param name="keys"></param>
			<returns></returns>
		</member>
		<member
			name="M:Fast.Sugar.Repository.SqlSugarRepository`1.Delete(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
			<summary>
				自定义条件删除记录
			</summary>
			<param name="whereExpression"></param>
			<returns></returns>
		</member>
		<member name="M:Fast.Sugar.Repository.SqlSugarRepository`1.DeleteAsync(`0)">
			<summary>
				删除一条记录
			</summary>
			<param name="entity"></param>
			<returns></returns>
		</member>
		<member name="M:Fast.Sugar.Repository.SqlSugarRepository`1.DeleteAsync(System.Object)">
			<summary>
				删除一条记录
			</summary>
			<param name="key"></param>
			<returns></returns>
		</member>
		<member name="M:Fast.Sugar.Repository.SqlSugarRepository`1.DeleteAsync(System.Object[])">
			<summary>
				删除多条记录
			</summary>
			<param name="keys"></param>
			<returns></returns>
		</member>
		<member
			name="M:Fast.Sugar.Repository.SqlSugarRepository`1.DeleteAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
			<summary>
				自定义条件删除记录
			</summary>
			<param name="whereExpression"></param>
			<returns></returns>
		</member>
		<member name="M:Fast.Sugar.Repository.SqlSugarRepository`1.ToPagedList(System.Int32,System.Int32)">
			<summary>
				分页查询
			</summary>
			<typeparam name="TEntity"></typeparam>
			<param name="pageIndex"></param>
			<param name="pageSize"></param>
			<returns></returns>
		</member>
		<member name="M:Fast.Sugar.Repository.SqlSugarRepository`1.ToPagedListAsync(System.Int32,System.Int32)">
			<summary>
				分页查询
			</summary>
			<typeparam name="TEntity"></typeparam>
			<param name="pageIndex"></param>
			<param name="pageSize"></param>
			<returns></returns>
		</member>
		<member
			name="M:Fast.Sugar.Repository.SqlSugarRepository`1.ToPagedList``1(System.Int32,System.Int32,System.Linq.Expressions.Expression{System.Func{`0,``0}})">
			<summary>
				分页查询
			</summary>
			<typeparam name="TEntity"></typeparam>
			<typeparam name="TResult"></typeparam>
			<param name="pageIndex"></param>
			<param name="pageSize"></param>
			<param name="expression"></param>
			<returns></returns>
		</member>
		<member
			name="M:Fast.Sugar.Repository.SqlSugarRepository`1.ToPagedListAsync``1(System.Int32,System.Int32,System.Linq.Expressions.Expression{System.Func{`0,``0}})">
			<summary>
				分页查询
			</summary>
			<typeparam name="TEntity"></typeparam>
			<typeparam name="TResult"></typeparam>
			<param name="pageIndex"></param>
			<param name="pageSize"></param>
			<param name="expression"></param>
			<returns></returns>
		</member>
		<member name="T:Fast.Sugar.Util.DataBaseUtil">
			<summary>
				数据库工具类
				各种类型数据库的兼容
			</summary>
		</member>
		<member name="M:Fast.Sugar.Util.DataBaseUtil.GetConnectionStr(Fast.Sugar.Options.ConnectionConfigOption)">
			<summary>
				得到数据库连接字符串
			</summary>
			<param name="dbInfo"></param>
			<returns></returns>
		</member>
		<member name="M:Fast.Sugar.Util.DataBaseUtil.GetSugarExternalServices(SqlSugar.DbType)">
			<summary>
				目前暂时支持Sql Server 和 MySql
			</summary>
			<param name="dbType"></param>
			<returns></returns>
		</member>
		<member
			name="M:Fast.Sugar.Util.DataBaseUtil.SetDbTypeNvarchar(SqlSugar.DbType,System.String,SqlSugar.EntityColumnInfo@)">
			<summary>
				设置Nvarchar类型
			</summary>
			<param name="dbType"></param>
			<param name="length"></param>
			<param name="columnInfo"></param>
		</member>
		<member name="M:Fast.Sugar.Util.DataBaseUtil.SetDbTypeDateTime(SqlSugar.DbType,SqlSugar.EntityColumnInfo@)">
			<summary>
				设置DateTime类型
			</summary>
			<param name="dbType"></param>
			<param name="columnInfo"></param>
		</member>
		<member name="T:Fast.Sugar.Util.EntityUtil">
			<summary>
				数据库实体工具类
			</summary>
		</member>
		<member name="P:Fast.Sugar.Util.EntityUtil._cacheEntityTypeList">
			<summary>
				缓存 Entity 类型
			</summary>
		</member>
		<member name="M:Fast.Sugar.Util.EntityUtil.ClearCacheEntityType">
			<summary>
				清空缓存 Entity 类型
			</summary>
		</member>
		<member name="M:Fast.Sugar.Util.EntityUtil.ReflexGetAllTEntityList">
			<summary>
				反射获取所有的数据库Model Type
			</summary>
			<returns></returns>
		</member>
		<member name="M:Fast.Sugar.Util.EntityUtil.ReflexGetAllTEntity(System.String)">
			<summary>
				反射获取所有的数据库Model
			</summary>
			<returns></returns>
		</member>
		<member name="T:Fast.Sugar.Util.HttpUtil">
			<summary>
				Http 工具类
			</summary>
		</member>
		<member name="M:Fast.Sugar.Util.HttpUtil.GetUserAgentInfo(System.String)">
			<summary>
				得到UserAgent信息
			</summary>
			<param name="userAgent"></param>
			<returns></returns>
		</member>
		<member name="M:Fast.Sugar.Util.HttpUtil.GetOSVersion(System.String)">
			<summary>
				获取操作系统版本
			</summary>
			<param name="userAgent"></param>
			<returns></returns>
		</member>
		<member name="M:Fast.Sugar.Util.HttpUtil.WanInfo(System.String)">
			<summary>
				根据IP地址获取公网信息
				不传值默认获取服务器的公网信息
			</summary>
			<returns></returns>
		</member>
		<member name="M:Fast.Sugar.Util.HttpUtil.WanInfoAsync(System.String)">
			<summary>
				根据IP地址获取公网信息
				不传值默认获取服务器的公网信息
				带缓存
			</summary>
			<returns></returns>
		</member>
		<member name="T:Fast.Sugar.Util.WhoisIPInfoEntity">
			<summary>
				万网Ip信息Model类
			</summary>
		</member>
		<member name="P:Fast.Sugar.Util.WhoisIPInfoEntity.Ip">
			<summary>
				Ip地址
			</summary>
		</member>
		<member name="P:Fast.Sugar.Util.WhoisIPInfoEntity.Pro">
			<summary>
				省份
			</summary>
		</member>
		<member name="P:Fast.Sugar.Util.WhoisIPInfoEntity.ProCode">
			<summary>
				省份邮政编码
			</summary>
		</member>
		<member name="P:Fast.Sugar.Util.WhoisIPInfoEntity.City">
			<summary>
				城市
			</summary>
		</member>
		<member name="P:Fast.Sugar.Util.WhoisIPInfoEntity.CityCode">
			<summary>
				城市邮政编码
			</summary>
		</member>
		<member name="P:Fast.Sugar.Util.WhoisIPInfoEntity.Address">
			<summary>
				地理信息
			</summary>
		</member>
		<member name="P:Fast.Sugar.Util.WhoisIPInfoEntity.Operator">
			<summary>
				运营商
			</summary>
		</member>
		<member name="T:Fast.Sugar.Util.UserAgentInfoEntity">
			<summary>
				UserAgent 信息Model类
			</summary>
		</member>
		<member name="P:Fast.Sugar.Util.UserAgentInfoEntity.PhoneModel">
			<summary>
				手机型号
			</summary>
		</member>
		<member name="P:Fast.Sugar.Util.UserAgentInfoEntity.OS">
			<summary>
				操作系统（版本）
			</summary>
		</member>
		<member name="P:Fast.Sugar.Util.UserAgentInfoEntity.Browser">
			<summary>
				浏览器（版本）
			</summary>
		</member>
		<member name="T:Fast.Sugar.Util.SqlSugarClientUtil">
			<summary>
				SqlSugarClient工具类
			</summary>
		</member>
		<member
			name="M:Fast.Sugar.Util.SqlSugarClientUtil.GetDbInfo(SqlSugar.ISqlSugarClient,System.String,System.Int32,System.Int64,Fast.Cache.ICache)">
			<summary>
				得到DbInfo
			</summary>
			<param name="_db"></param>
			<param name="tableName">表名称</param>
			<param name="dbType"></param>
			<param name="tenantId"></param>
			<param name="_cache"></param>
			<returns></returns>
			<exception cref="T:SqlSugar.SqlSugarException"></exception>
		</member>
		<member
			name="M:Fast.Sugar.Util.SqlSugarClientUtil.GetSqlSugarClient(SqlSugar.ITenant,Fast.Sugar.Options.ConnectionConfigOption)">
			<summary>
				得到SqlSugar客户端
			</summary>
			<param name="_tenant"></param>
			<param name="dbInfo"></param>
			<returns></returns>
		</member>
	</members>
</doc>