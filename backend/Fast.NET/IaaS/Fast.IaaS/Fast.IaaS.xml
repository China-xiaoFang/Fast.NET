<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Fast.IaaS</name>
    </assembly>
    <members>
        <member name="T:Fast.IaaS.Extensions.AsciiExtension">
            <summary>
            Ascii 拓展类
            </summary>
        </member>
        <member name="M:Fast.IaaS.Extensions.AsciiExtension.EnAscii(System.String)">
            <summary>
            将字符串转换为 ASCII 编码形式。
            </summary>
            <param name="str">要进行编码的字符串。</param>
            <returns>转换后的 ASCII 编码形式字符串。</returns>
        </member>
        <member name="M:Fast.IaaS.Extensions.AsciiExtension.DeAscii(System.String)">
            <summary>
            将 ASCII 编码形式的字符串转换为字符串。
            </summary>
            <param name="str">要进行解码的 ASCII 编码形式字符串。</param>
            <returns>解码后的字符串。</returns>
        </member>
        <member name="T:Fast.IaaS.Extensions.AssemblyExtension">
            <summary>
            <see cref="T:System.Reflection.Assembly"/> 拓展类
            </summary>
        </member>
        <member name="M:Fast.IaaS.Extensions.AssemblyExtension.GetTypes(System.Reflection.Assembly,System.Boolean)">
            <summary>
            获取所有类型
            </summary>
            <param name="assembly"><see cref="T:System.Reflection.Assembly"/></param>
            <param name="exported">类型导出设置</param>
            <returns><see cref="T:System.Type"/>[]</returns>
        </member>
        <member name="M:Fast.IaaS.Extensions.AssemblyExtension.GetDescription(System.Reflection.Assembly)">
            <summary>
            获取程序集描述
            </summary>
            <param name="assembly"><see cref="T:System.Reflection.Assembly"/></param>
            <returns><see cref="T:System.String"/></returns>
        </member>
        <member name="M:Fast.IaaS.Extensions.AssemblyExtension.GetVersion(System.Reflection.Assembly)">
            <summary>
            获取程序集版本
            </summary>
            <param name="assembly"><see cref="T:System.Reflection.Assembly"/></param>
            <returns><see cref="T:System.String"/></returns>
        </member>
        <member name="T:Fast.IaaS.Extensions.Base64Extension">
            <summary>
            Base64 拓展类
            </summary>
        </member>
        <member name="M:Fast.IaaS.Extensions.Base64Extension.ToBase64(System.String,System.Int32)">
            <summary>
            普通 字符串 转换为 base64 字符串
            </summary>
            <param name="str">&lt;see cref="string"/&gt;</param>
            <param name="randomPrefixStrLength"></param>
            <returns><see cref="T:System.String"/></returns>
        </member>
        <member name="M:Fast.IaaS.Extensions.Base64Extension.Base64ToString(System.String,System.Int32)">
            <summary>
            base64 字符串 转换为 普通 字符串
            </summary>
            <param name="base64Str"><see cref="T:System.String"/></param>
            <param name="randomPrefixStrLength"></param>
            <returns><see cref="T:System.String"/></returns>
        </member>
        <member name="T:Fast.IaaS.Extensions.ConvertExtension">
            <summary>
            <see cref="T:System.Convert"/> 转换拓展类
            </summary>
        </member>
        <member name="M:Fast.IaaS.Extensions.ConvertExtension.ParseToLong(System.Object)">
            <summary>
            将object转换为long，若转换失败，则返回0。不抛出异常。  
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.IaaS.Extensions.ConvertExtension.ParseToLong(System.String,System.Int64)">
            <summary>
            将object转换为long，若转换失败，则返回指定值。不抛出异常。  
            </summary>
            <param name="str"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.IaaS.Extensions.ConvertExtension.ParseToInt(System.Object)">
            <summary>
            将object转换为int，若转换失败，则返回0。不抛出异常。  
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.IaaS.Extensions.ConvertExtension.ParseToInt(System.Object,System.Int32)">
            <summary>
            将object转换为int，若转换失败，则返回指定值。不抛出异常。 
            null返回默认值
            </summary>
            <param name="str"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.IaaS.Extensions.ConvertExtension.ParseToShort(System.Object)">
            <summary>
            将object转换为short，若转换失败，则返回0。不抛出异常。  
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.IaaS.Extensions.ConvertExtension.ParseToShort(System.Object,System.Int16)">
            <summary>
            将object转换为short，若转换失败，则返回指定值。不抛出异常。  
            </summary>
            <param name="str"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.IaaS.Extensions.ConvertExtension.ParseToDecimal(System.Object,System.Decimal)">
            <summary>
            将object转换为demical，若转换失败，则返回指定值。不抛出异常。  
            </summary>
            <param name="str"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.IaaS.Extensions.ConvertExtension.ParseToDecimal(System.Object)">
            <summary>
            将object转换为demical，若转换失败，则返回0。不抛出异常。  
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.IaaS.Extensions.ConvertExtension.ParseToBool(System.Object)">
            <summary>
            将object转换为bool，若转换失败，则返回false。不抛出异常。  
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.IaaS.Extensions.ConvertExtension.ParseToBool(System.Object,System.Boolean)">
            <summary>
            将object转换为bool，若转换失败，则返回指定值。不抛出异常。  
            </summary>
            <param name="str"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.IaaS.Extensions.ConvertExtension.ParseToFloat(System.Object)">
            <summary>
            将object转换为float，若转换失败，则返回0。不抛出异常。  
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.IaaS.Extensions.ConvertExtension.ParseToFloat(System.Object,System.Single)">
            <summary>
            将object转换为float，若转换失败，则返回指定值。不抛出异常。  
            </summary>
            <param name="str"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.IaaS.Extensions.ConvertExtension.ParseToGuid(System.String)">
            <summary>
            将string转换为Guid，若转换失败，则返回Guid.Empty。不抛出异常。  
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.IaaS.Extensions.ConvertExtension.ParseToDateTime(System.String)">
            <summary>
            将string转换为DateTime，若转换失败，则返回日期最小值。不抛出异常。  
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.IaaS.Extensions.ConvertExtension.ParseToDateTime(System.String,System.Nullable{System.DateTime})">
            <summary>
            将string转换为DateTime，若转换失败，则返回默认值。  
            </summary>
            <param name="str"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.IaaS.Extensions.ConvertExtension.ParseToString(System.Object)">
            <summary>
            将object转换为string，若转换失败，则返回""。不抛出异常。  
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.IaaS.Extensions.ConvertExtension.ParseToStrings``1(System.Object)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.IaaS.Extensions.ConvertExtension.ParseToDouble(System.Object)">
            <summary>
            将object转换为double，若转换失败，则返回0。不抛出异常。  
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.IaaS.Extensions.ConvertExtension.ParseToDouble(System.Object,System.Double)">
            <summary>
            将object转换为double，若转换失败，则返回指定值。不抛出异常。  
            </summary>
            <param name="str"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.IaaS.Extensions.ConvertExtension.CastSuper``1(System.Collections.IEnumerable)">
            <summary>
            强制转换类型
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="T:Fast.IaaS.Extensions.DateTimeExtension">
            <summary>
            <see cref="T:System.DateTime"/> 拓展类
            </summary>
        </member>
        <member name="M:Fast.IaaS.Extensions.DateTimeExtension.GetSayHello(System.DateTime)">
            <summary>
            得到问好
            </summary>
            <param name="dateTime"><see cref="T:System.DateTime"/></param>
            <returns><see cref="T:System.String"/></returns>
        </member>
        <member name="M:Fast.IaaS.Extensions.DateTimeExtension.GetCurMonthFirstDay(System.DateTime,System.String,System.String)">
            <summary>
            获取指定年月的第一天
            </summary>
            <param name="dateTime"><see cref="T:System.DateTime"/></param>
            <param name="year"></param>
            <param name="mon"></param>
            <returns><see cref="T:System.String"/></returns>
        </member>
        <member name="M:Fast.IaaS.Extensions.DateTimeExtension.GetCurMonthFirstDay(System.DateTime,System.Int32,System.Int32)">
            <summary>
            获取指定年月的第一天
            </summary>
            <param name="dateTime"><see cref="T:System.DateTime"/></param>
            <param name="year"></param>
            <param name="mon"></param>
            <returns><see cref="T:System.DateTime"/></returns>
        </member>
        <member name="M:Fast.IaaS.Extensions.DateTimeExtension.GetCurMonthLastDay(System.DateTime,System.String,System.String)">
            <summary>
            获取指定年月的最后一天
            </summary>
            <param name="dateTime"><see cref="T:System.DateTime"/></param>
            <param name="year"></param>
            <param name="mon"></param>
            <returns><see cref="T:System.DateTime"/></returns>
        </member>
        <member name="M:Fast.IaaS.Extensions.DateTimeExtension.GetCurMonthLastDay(System.DateTime,System.Int32,System.Int32)">
            <summary>
            获取指定年月的最后一天
            </summary>
            <param name="dateTime"><see cref="T:System.DateTime"/></param>
            <param name="year"></param>
            <param name="mon"></param>
            <returns><see cref="T:System.DateTime"/></returns>
        </member>
        <member name="M:Fast.IaaS.Extensions.DateTimeExtension.GetCurMonthFirstDay(System.DateTime)">
            <summary>
            获取当前月的第一天
            </summary>
            <param name="dateTime"><see cref="T:System.DateTime"/></param>
            <returns><see cref="T:System.DateTime"/></returns>
        </member>
        <member name="M:Fast.IaaS.Extensions.DateTimeExtension.GetCurMonthLastDay(System.DateTime)">
            <summary>
            获取当前月的最后一天
            </summary>
            <param name="dateTime"><see cref="T:System.DateTime"/></param>
            <returns><see cref="T:System.DateTime"/></returns>
        </member>
        <member name="M:Fast.IaaS.Extensions.DateTimeExtension.GetUpMonthFirstDay(System.DateTime)">
            <summary>
            获取上月的第一天
            </summary>
            <param name="dateTime"><see cref="T:System.DateTime"/></param>
            <returns><see cref="T:System.DateTime"/></returns>
        </member>
        <member name="M:Fast.IaaS.Extensions.DateTimeExtension.GetUpMonthLastDay(System.DateTime)">
            <summary>
            获取上月的最后一天
            </summary>
            <param name="dateTime"><see cref="T:System.DateTime"/></param>
            <returns><see cref="T:System.DateTime"/></returns>
        </member>
        <member name="M:Fast.IaaS.Extensions.DateTimeExtension.GetCurWeekDay(System.DateTime)">
            <summary>
            获取本周时间
            </summary>
            <param name="dateTime"><see cref="T:System.DateTime"/></param>
            <returns>(<see cref="T:System.DateTime"/>, <see cref="T:System.DateTime"/>)</returns>
        </member>
        <member name="M:Fast.IaaS.Extensions.DateTimeExtension.GetUpWeekDay(System.DateTime)">
            <summary>
            获取上周时间
            </summary>
            <param name="dateTime"><see cref="T:System.DateTime"/></param>
            <returns>(<see cref="T:System.DateTime"/>, <see cref="T:System.DateTime"/>)</returns>
        </member>
        <member name="M:Fast.IaaS.Extensions.DateTimeExtension.GetCurDay(System.DateTime)">
            <summary>
            获取当天时间
            </summary>
            <param name="dateTime"><see cref="T:System.DateTime"/></param>
            <returns>(<see cref="T:System.DateTime"/>, <see cref="T:System.DateTime"/>)</returns>
        </member>
        <member name="M:Fast.IaaS.Extensions.DateTimeExtension.GetUpDay(System.DateTime)">
            <summary>
            获取昨天时间
            </summary>
            <param name="dateTime"><see cref="T:System.DateTime"/></param>
            <returns>(<see cref="T:System.DateTime"/>, <see cref="T:System.DateTime"/>)</returns>
        </member>
        <member name="M:Fast.IaaS.Extensions.DateTimeExtension.DateDiff(System.DateTime,System.DateTime,System.DateTime)">
            <summary>
            计算两个时间的差
            </summary>
            <param name="dateTime"><see cref="T:System.DateTime"/></param>
            <param name="startTime"></param>
            <param name="lastTime"></param>
            <returns><see cref="T:System.Int32"/></returns>
        </member>
        <member name="M:Fast.IaaS.Extensions.DateTimeExtension.ToDateTime_Milliseconds(System.Int64)">
            <summary>
            将毫秒时间戳转换为DateTime，若转换失败，则返回日期最小值。不抛出异常。  
            </summary>
            <param name="timeStamps"><see cref="T:System.Int64"/></param>
            <returns><see cref="T:System.DateTime"/></returns>
        </member>
        <member name="M:Fast.IaaS.Extensions.DateTimeExtension.ToDateTime_Milliseconds(System.Int64,System.Nullable{System.DateTime})">
            <summary>
            将毫秒时间戳转换为DateTime，若转换失败，则返回默认值。
            </summary>
            <param name="timeStamps"><see cref="T:System.Int64"/></param>
            <param name="defaultValue"></param>
            <returns><see cref="T:System.DateTime"/></returns>
        </member>
        <member name="M:Fast.IaaS.Extensions.DateTimeExtension.ToDateTime_Seconds(System.Int64)">
            <summary>
            将秒时间戳转换为DateTime，若转换失败，则返回日期最小值。不抛出异常。  
            </summary>
            <param name="timeStamps"><see cref="T:System.Int64"/></param>
            <returns><see cref="T:System.DateTime"/></returns>
        </member>
        <member name="M:Fast.IaaS.Extensions.DateTimeExtension.ToDateTime_Seconds(System.Int64,System.Nullable{System.DateTime})">
            <summary>
            将秒时间戳转换为DateTime，若转换失败，则返回默认值。
            </summary>
            <param name="timeStamps"><see cref="T:System.Int64"/></param>
            <param name="defaultValue"></param>
            <returns><see cref="T:System.DateTime"/></returns>
        </member>
        <member name="M:Fast.IaaS.Extensions.DateTimeExtension.GetZodiac(System.DateTime)">
            <summary>
            获取生肖
            </summary>
            <param name="dateTime"><see cref="T:System.DateTime"/></param>
            <returns><see cref="T:System.String"/></returns>
        </member>
        <member name="M:Fast.IaaS.Extensions.DateTimeExtension.GetConstellation(System.DateTime)">
            <summary>
            获取星座
            </summary>
            <param name="dateTime"><see cref="T:System.DateTime"/></param>
            <returns><see cref="T:System.String"/></returns>
        </member>
        <member name="M:Fast.IaaS.Extensions.DateTimeExtension.GetLifeCode(System.DateTime)">
            <summary>
            生命密码
            </summary>
            <param name="dateTime"><see cref="T:System.DateTime"/></param>
            <returns><see cref="T:System.Int32"/></returns>
        </member>
        <member name="T:Fast.IaaS.Extensions.DecimalExtension">
            <summary>
            <see cref="T:System.Decimal"/> 拓展类
            </summary>
        </member>
        <member name="M:Fast.IaaS.Extensions.DecimalExtension.GetPercentage(System.Decimal)">
            <summary>
            得到百分比
            </summary>
            <param name="data"><see cref="T:System.Decimal"/></param>
            <returns><see cref="T:System.String"/></returns>
        </member>
        <member name="M:Fast.IaaS.Extensions.DecimalExtension.GetPercentage(System.Decimal,System.Decimal)">
            <summary>
            得到百分比
            </summary>
            <param name="num1"><see cref="T:System.Decimal"/></param>
            <param name="num2"><see cref="T:System.Decimal"/></param>
            <returns><see cref="T:System.String"/></returns>
        </member>
        <member name="M:Fast.IaaS.Extensions.DecimalExtension.GetDecimal(System.Decimal)">
            <summary>
            获取 decimal，小数点后面有几位就保留几位
            </summary>
            <param name="data"><see cref="T:System.Decimal"/></param>
            <returns><see cref="T:System.Decimal"/></returns>
        </member>
        <member name="T:Fast.IaaS.Extensions.EnumExtension">
            <summary>
            <see cref="T:System.Enum"/> 拓展类
            </summary>
        </member>
        <member name="M:Fast.IaaS.Extensions.EnumExtension.GetEnumDescription(System.Object)">
            <summary>
            获取枚举的Description
            </summary>
            <param name="value"><see cref="T:System.Object"/></param>
            <returns><see cref="T:System.String"/></returns>
        </member>
        <member name="M:Fast.IaaS.Extensions.EnumExtension.EnumToList(System.Type)">
            <summary>
            将枚举转成枚举信息集合
            </summary>
            <param name="type"><see cref="T:System.Type"/></param>
            <returns><see cref="T:System.Collections.Generic.List`1"/></returns>
        </member>
        <member name="T:Fast.IaaS.Extensions.EnumEntity">
            <summary>
            枚举的Entity类
            </summary>
        </member>
        <member name="P:Fast.IaaS.Extensions.EnumEntity.Describe">
            <summary>  
            枚举的描述  
            </summary>  
        </member>
        <member name="P:Fast.IaaS.Extensions.EnumEntity.Name">
            <summary>  
            枚举名称  
            </summary>  
        </member>
        <member name="P:Fast.IaaS.Extensions.EnumEntity.Value">
            <summary>  
            枚举对象的值  
            </summary>  
        </member>
        <member name="T:Fast.IaaS.Extensions.GroupByExtension">
            <summary>
            GroupBy 拓展类
            </summary>
        </member>
        <member name="M:Fast.IaaS.Extensions.GroupByExtension.GroupByMultiple``1(System.Collections.Generic.IEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
            <summary>
            多个GroupBy
            </summary>
            <typeparam name="TKey"></typeparam>
            <param name="source"></param>
            <param name="groupByProperties"></param>
            <returns></returns>
        </member>
        <member name="T:Fast.IaaS.Extensions.HttpContextExtension">
            <summary>
            <see cref="T:Microsoft.AspNetCore.Http.HttpContext"/> 拓展类
            </summary>
        </member>
        <member name="M:Fast.IaaS.Extensions.HttpContextExtension.GetMetadata``1(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            获取 Action 特性
            </summary>
            <typeparam name="TAttribute"></typeparam>
            <param name="httpContext"><see cref="T:Microsoft.AspNetCore.Http.HttpContext"/></param>
            <returns><see cref="!:TAttribute"/></returns>
        </member>
        <member name="M:Fast.IaaS.Extensions.HttpContextExtension.GetControllerActionDescriptor(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            获取 控制器/Action 描述器
            </summary>
            <param name="httpContext"><see cref="T:Microsoft.AspNetCore.Http.HttpContext"/></param>
            <returns><see cref="T:Microsoft.AspNetCore.Mvc.Controllers.ControllerActionDescriptor"/></returns>
        </member>
        <member name="M:Fast.IaaS.Extensions.HttpContextExtension.SignInToSwagger(Microsoft.AspNetCore.Http.HttpContext,System.String)">
            <summary>
            设置规范化文档自动登录
            </summary>
            <param name="httpContext"><see cref="T:Microsoft.AspNetCore.Http.HttpContext"/></param>
            <param name="accessToken"></param>
        </member>
        <member name="M:Fast.IaaS.Extensions.HttpContextExtension.SignOutToSwagger(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            设置规范化文档退出登录
            </summary>
            <param name="httpContext"><see cref="T:Microsoft.AspNetCore.Http.HttpContext"/></param>
        </member>
        <member name="M:Fast.IaaS.Extensions.HttpContextExtension.ReadBodyContentAsync(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            读取 Body 内容
            </summary>
            <param name="httpContext"><see cref="T:Microsoft.AspNetCore.Http.HttpContext"/></param>
            <remarks>需先在 Startup 的 Configure 中注册 app.EnableBuffering()</remarks>
            <returns><see cref="T:System.String"/></returns>
        </member>
        <member name="M:Fast.IaaS.Extensions.HttpContextExtension.ReadBodyContentAsync(Microsoft.AspNetCore.Http.HttpRequest)">
            <summary>
            读取 Body 内容
            </summary>
            <param name="request"><see cref="T:Microsoft.AspNetCore.Http.HttpRequest"/></param>
            <remarks>需先在 Startup 的 Configure 中注册 app.EnableBuffering()</remarks>
            <returns><see cref="T:System.String"/></returns>
        </member>
        <member name="M:Fast.IaaS.Extensions.HttpContextExtension.IsWebSocketRequest(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            判断是否是 WebSocket 请求
            </summary>
            <param name="httpContext"><see cref="T:Microsoft.AspNetCore.Http.HttpContext"/></param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:Fast.IaaS.Extensions.HttpContextExtension.RequestUrlAddress(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            完整请求地址
            </summary>
            <param name="httpContext"><see cref="T:Microsoft.AspNetCore.Http.HttpContext"/></param>
            <returns><see cref="T:System.String"/></returns>
        </member>
        <member name="M:Fast.IaaS.Extensions.HttpContextExtension.RequestUrlAddress(Microsoft.AspNetCore.Http.HttpRequest)">
            <summary>
            完整请求地址
            </summary>
            <param name="httpRequest"><see cref="T:Microsoft.AspNetCore.Http.HttpRequest"/></param>
            <returns><see cref="T:System.String"/></returns>
        </member>
        <member name="M:Fast.IaaS.Extensions.HttpContextExtension.RefererUrlAddress(Microsoft.AspNetCore.Http.HttpContext,System.String)">
            <summary>
            来源地址
            </summary>
            <param name="httpContext"><see cref="T:Microsoft.AspNetCore.Http.HttpContext"/></param>
            <param name="refererHeaderKey">默认从 “Referer” 获取</param>
            <returns><see cref="T:System.String"/></returns>
        </member>
        <member name="M:Fast.IaaS.Extensions.HttpContextExtension.UserAgent(Microsoft.AspNetCore.Http.HttpContext,System.String)">
            <summary>
            请求 UserAgent 信息
            </summary>
            <param name="httpContext"><see cref="T:Microsoft.AspNetCore.Http.HttpContext"/></param>
            <param name="userAgentHeaderKey">默认从 “User-Agent” 获取</param>
            <returns><see cref="T:System.String"/></returns>
        </member>
        <member name="M:Fast.IaaS.Extensions.HttpContextExtension.LanIpv4(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            局域网 IPv4 地址
            </summary>
            <param name="httpContext"><see cref="T:Microsoft.AspNetCore.Http.HttpContext"/></param>
            <returns><see cref="T:System.String"/></returns>
        </member>
        <member name="M:Fast.IaaS.Extensions.HttpContextExtension.LanIpv6(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            局域网 IPv6 地址
            </summary>
            <param name="httpContext"><see cref="T:Microsoft.AspNetCore.Http.HttpContext"/></param>
            <returns><see cref="T:System.String"/></returns>
        </member>
        <member name="M:Fast.IaaS.Extensions.HttpContextExtension.LocalIpv4(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            本机 IPv4 地址
            </summary>
            <param name="httpContext"><see cref="T:Microsoft.AspNetCore.Http.HttpContext"/></param>
            <returns><see cref="T:System.String"/></returns>
        </member>
        <member name="M:Fast.IaaS.Extensions.HttpContextExtension.LocalIpv6(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            本机 IPv6 地址
            </summary>
            <param name="httpContext"><see cref="T:Microsoft.AspNetCore.Http.HttpContext"/></param>
            <returns><see cref="T:System.String"/></returns>
        </member>
        <member name="M:Fast.IaaS.Extensions.HttpContextExtension.RemoteIpv4(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            远程 Ipv4 地址
            </summary>
            <param name="httpContext"><see cref="T:Microsoft.AspNetCore.Http.HttpContext"/></param>
            <returns><see cref="T:System.String"/></returns>
        </member>
        <member name="M:Fast.IaaS.Extensions.HttpContextExtension.RemoteIpv6(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            远程 Ipv6 地址
            </summary>
            <param name="httpContext"><see cref="T:Microsoft.AspNetCore.Http.HttpContext"/></param>
            <returns><see cref="T:System.String"/></returns>
        </member>
        <member name="T:Fast.IaaS.Extensions.IDictionaryExtension">
            <summary>
            <see cref="T:System.Collections.Generic.IDictionary`2"/> 拓展类
            </summary>
        </member>
        <member name="M:Fast.IaaS.Extensions.IDictionaryExtension.ToQueryString(System.Collections.Generic.IDictionary{System.String,System.String},System.Boolean,System.Boolean)">
            <summary>
            将一个字典转化为 QueryString
            </summary>
            <param name="dict"><see cref="T:System.Collections.Generic.IDictionary`2"/></param>
            <param name="urlEncode"></param>
            <param name="isToLower">首字母是否小写</param>
            <returns><see cref="T:System.String"/></returns>
        </member>
        <member name="M:Fast.IaaS.Extensions.IDictionaryExtension.RemoveEmptyValueItems(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            移除空值项
            </summary>
            <param name="dict"><see cref="T:System.Collections.Generic.IDictionary`2"/></param>
        </member>
        <member name="M:Fast.IaaS.Extensions.IDictionaryExtension.AddOrUpdate``2(System.Collections.Generic.IDictionary{``0,System.Collections.Generic.List{``1}},``0,``1)">
            <summary>
            添加或更新
            </summary>
            <typeparam name="TKey">字典键类型</typeparam>
            <typeparam name="TValue">字典值类型</typeparam>
            <param name="dictionary"><see cref="T:System.Collections.Generic.IDictionary`2"/></param>
            <param name="key"><typeparamref name="TKey"/></param>
            <param name="value"><typeparamref name="TValue"/></param>
        </member>
        <member name="M:Fast.IaaS.Extensions.IDictionaryExtension.AddOrUpdate``2(System.Collections.Generic.IDictionary{``0,System.Collections.Generic.List{``1}},System.Collections.Generic.IDictionary{``0,System.Collections.Generic.List{``1}})">
            <summary>
            添加或更新
            </summary>
            <typeparam name="TKey">字典键类型</typeparam>
            <typeparam name="TValue">字典值类型</typeparam>
            <param name="dictionary"><see cref="T:System.Collections.Generic.IDictionary`2"/></param>
            <param name="concatDictionary"><see cref="T:System.Collections.Generic.IDictionary`2"/></param>
        </member>
        <member name="M:Fast.IaaS.Extensions.IDictionaryExtension.AddOrUpdate``2(System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            添加或更新
            </summary>
            <typeparam name="TKey">字典键类型</typeparam>
            <typeparam name="TValue">字典值类型</typeparam>
            <param name="dictionary"><see cref="T:System.Collections.Generic.IDictionary`2"/></param>
            <param name="concatDictionary"><see cref="T:System.Collections.Generic.IDictionary`2"/></param>
        </member>
        <member name="M:Fast.IaaS.Extensions.IDictionaryExtension.AddOrUpdate``1(System.Collections.Generic.IDictionary{System.String,``0},System.Collections.Generic.IDictionary{System.String,``0})">
            <summary>
            合并两个字典
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dic"><see cref="T:System.Collections.Generic.IDictionary`2"/>字典</param>
            <param name="newDic"><see cref="T:System.Collections.Generic.IDictionary`2"/>新字典</param>
            <returns><see cref="T:System.Collections.Generic.IDictionary`2"/></returns>
        </member>
        <member name="M:Fast.IaaS.Extensions.IDictionaryExtension.DicToXmlStr(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            将Dic字典转换成字符串
            </summary>
            <param name="dic"><see cref="T:System.Collections.Generic.IDictionary`2"/></param>
            <returns><see cref="T:System.String"/></returns>
        </member>
        <member name="M:Fast.IaaS.Extensions.IDictionaryExtension.XmlStrToDic(System.String)">
            <summary>
            将字符串转换为Dic字典
            </summary>
            <param name="xml"><see cref="T:System.String"/></param>
            <returns><see cref="T:System.Collections.Generic.IDictionary`2"/></returns>
        </member>
        <member name="M:Fast.IaaS.Extensions.IDictionaryExtension.SortDicToXmlStr(System.Collections.Generic.SortedDictionary{System.String,System.Object})">
            <summary>
            将Dic字典转换成字符串
            </summary>
            <param name="dic"><see cref="T:System.Collections.Generic.IDictionary`2"/></param>
            <returns><see cref="T:System.String"/></returns>
        </member>
        <member name="M:Fast.IaaS.Extensions.IDictionaryExtension.XmlStrToSortDic(System.String)">
            <summary>
            将字符串转换为Dic字典
            </summary>
            <param name="xml"><see cref="T:System.String"/></param>
            <returns><see cref="T:System.Collections.Generic.SortedDictionary`2"/></returns>
        </member>
        <member name="T:Fast.IaaS.Extensions.LinqExpressionExtension">
            <summary>
            <see cref="T:System.Linq.Expressions.Expression"/> 拓展类
            </summary>
        </member>
        <member name="M:Fast.IaaS.Extensions.LinqExpressionExtension.GetPropertyName``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            解析表达式属性名称
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <typeparam name="TProperty">属性类型</typeparam>
            <param name="propertySelector"><see cref="T:System.Linq.Expressions.Expression`1"/></param>
            <returns><see cref="T:System.String"/></returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Fast.IaaS.Extensions.LinqExpressionExtension.GetPropertyName``1(System.Linq.Expressions.MemberExpression)">
            <summary>
            解析表达式属性名称
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="memberExpression"><see cref="T:System.Linq.Expressions.MemberExpression"/></param>
            <returns><see cref="T:System.String"/></returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="T:Fast.IaaS.Extensions.ObjectExtension">
            <summary>
            <see cref="T:System.Object"/> 拓展类
            </summary>
        </member>
        <member name="M:Fast.IaaS.Extensions.ObjectExtension.ToQueryString(System.Object,System.Boolean)">
            <summary>
            将一个对象转化为 Get 请求的String字符串
            注：List，Array，Object属性不支持
            </summary>
            <param name="obj"><see cref="T:System.Object"/></param>
            <param name="isToLower">首字母是否小写</param>
            <returns><see cref="T:System.String"/></returns>
        </member>
        <member name="M:Fast.IaaS.Extensions.ObjectExtension.ToDictionary(System.Object)">
            <summary>
            将一个Object对象转为 字典
            </summary>
            <param name="obj"><see cref="T:System.Object"/></param>
            <returns><see cref="T:System.Collections.Generic.IDictionary`2"/></returns>
        </member>
        <member name="M:Fast.IaaS.Extensions.ObjectExtension.TryGetCount(System.Object,System.Int32@)">
            <summary>
            尝试获取对象的数量
            </summary>
            <param name="obj"><see cref="T:System.Object"/></param>
            <param name="count">数量</param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:Fast.IaaS.Extensions.ObjectExtension.IsRichPrimitive(System.Type)">
            <summary>
            判断是否是富基元类型
            </summary>
            <param name="type"><see cref="T:System.Type"/></param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:Fast.IaaS.Extensions.ObjectExtension.IsValueTuple(System.Type)">
            <summary>
            判断是否是元组类型
            </summary>
            <param name="type"><see cref="T:System.Type"/></param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:Fast.IaaS.Extensions.ObjectExtension.GetDescriptionValue``1(System.Reflection.FieldInfo)">
            <summary>
            获取字段特性
            </summary>
            <param name="field"><see cref="T:System.Reflection.FieldInfo"/></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Fast.IaaS.Extensions.ObjectExtension.IsAsync(System.Reflection.MethodInfo)">
            <summary>
            判断方法是否是异步
            </summary>
            <param name="method"><see cref="T:System.Reflection.MethodInfo"/></param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:Fast.IaaS.Extensions.ObjectExtension.GetRealReturnType(System.Reflection.MethodInfo)">
            <summary>
            获取方法真实返回类型
            </summary>
            <param name="method"><see cref="T:System.Reflection.MethodInfo"/></param>
            <returns><see cref="T:System.Type"/></returns>
        </member>
        <member name="M:Fast.IaaS.Extensions.ObjectExtension.GetFoundAttribute``1(System.Reflection.MethodInfo,System.Boolean)">
            <summary>
            查找方法指定特性，如果没找到则继续查找声明类
            </summary>
            <typeparam name="TAttribute"></typeparam>
            <param name="method"><see cref="T:System.Reflection.MethodInfo"/></param>
            <param name="inherit"></param>
            <returns></returns>
        </member>
        <member name="T:Fast.IaaS.Extensions.StringExtension">
            <summary>
            <see cref="T:System.String"/> 拓展类
            </summary>
        </member>
        <member name="M:Fast.IaaS.Extensions.StringExtension.FirstCharToUpper(System.String)">
            <summary>
            字符串首字母大写
            </summary>
            <param name="str"><see cref="T:System.String"/></param>
            <returns><see cref="T:System.String"/></returns>
        </member>
        <member name="M:Fast.IaaS.Extensions.StringExtension.FirstCharToLower(System.String)">
            <summary>
            字符串首字母小写
            </summary>
            <param name="str"><see cref="T:System.String"/></param>
            <returns><see cref="T:System.String"/></returns>
        </member>
        <member name="M:Fast.IaaS.Extensions.StringExtension.ClearStringAffixes(System.String,System.Int32,System.String[])">
            <summary>
            清除字符串前后缀
            </summary>
            <param name="str"><see cref="T:System.String"/>字符串</param>
            <param name="pos">0：前后缀，1：后缀，-1：前缀</param>
            <param name="affixes">前后缀集合</param>
            <returns><see cref="T:System.String"/></returns>
        </member>
        <member name="M:Fast.IaaS.Extensions.StringExtension.SplitCamelCase(System.String)">
            <summary>
            切割骆驼命名式字符串
            </summary>
            <param name="str"><see cref="T:System.String"/></param>
            <returns><see cref="T:System.String"/></returns>
        </member>
        <member name="M:Fast.IaaS.Extensions.StringExtension.Format(System.String,System.Object[])">
            <summary>
            格式化字符串
            </summary>
            <param name="str"><see cref="T:System.String"/></param>
            <param name="args"></param>
            <returns><see cref="T:System.String"/></returns>
        </member>
        <member name="M:Fast.IaaS.Extensions.StringExtension.EnUnicode(System.String)">
            <summary>
            Unicode编码
            </summary>
            <param name="str"><see cref="T:System.String"/></param>
            <returns><see cref="T:System.String"/></returns>
        </member>
        <member name="M:Fast.IaaS.Extensions.StringExtension.DeUnicode(System.String)">
            <summary>
            Unicode解码
            </summary>
            <param name="str"><see cref="T:System.String"/></param>
            <returns><see cref="T:System.String"/></returns>
        </member>
        <member name="M:Fast.IaaS.Extensions.StringExtension.PadStringLeftAlign(System.String,System.Int32)">
            <summary>
            将字符串转化为固定长度左对齐，右补空格
            </summary>
            <param name="strTemp"><see cref="T:System.String"/></param>
            <param name="length"></param>
            <returns><see cref="T:System.String"/></returns>
        </member>
        <member name="M:Fast.IaaS.Extensions.StringExtension.GenerateSpaceString(System.Int32)">
            <summary>
            生成固定长度的空格字符串
            </summary>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.IaaS.Extensions.StringExtension.GetSubStringWithEllipsis(System.String,System.Int32,System.Boolean)">
            <summary>
            截取指定长度的字符串
            </summary>
            <param name="value"><see cref="T:System.String"/></param>
            <param name="length"></param>
            <param name="ellipsis"></param>
            <returns><see cref="T:System.String"/></returns>
        </member>
        <member name="M:Fast.IaaS.Extensions.StringExtension.UrlEncode(System.String)">
            <summary>
            将一个字符串 URL 编码
            </summary>
            <param name="str"><see cref="T:System.String"/></param>
            <returns><see cref="T:System.String"/></returns>
        </member>
        <member name="M:Fast.IaaS.Extensions.StringExtension.UrlDecode(System.String)">
            <summary>
            将一个Url 编码 转为字符串
            </summary>
            <param name="str"><see cref="T:System.String"/></param>
            <returns><see cref="T:System.String"/></returns>
        </member>
        <member name="T:Fast.IaaS.Extensions.TypeExtension">
            <summary>
            <see cref="T:System.Type"/> 拓展类
            </summary>
        </member>
        <member name="M:Fast.IaaS.Extensions.TypeExtension.IsStatic(System.Type)">
            <summary>
            检查类型是否是静态类型
            </summary>
            <param name="type"><see cref="T:System.Type"/></param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:Fast.IaaS.Extensions.TypeExtension.IsAnonymous(System.Type)">
            <summary>
            检查类型是否是匿名类型
            </summary>
            <param name="type"><see cref="T:System.Type"/></param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:Fast.IaaS.Extensions.TypeExtension.IsInstantiable(System.Type)">
            <summary>
            检查类型是否可实例化
            </summary>
            <param name="type"><see cref="T:System.Type"/></param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:Fast.IaaS.Extensions.TypeExtension.IsAlienAssignableTo(System.Type,System.Type)">
            <summary>
            检查类型是否派生自指定类型
            </summary>
            <param name="type"><see cref="T:System.Type"/></param>
            <param name="fromType"><see cref="T:System.Type"/></param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:Fast.IaaS.Extensions.TypeExtension.GetDefinedCustomAttribute``1(System.Type,System.Boolean)">
            <summary>
            获取指定特性实例
            </summary>
            <remarks>若特性不存在则返回 null</remarks>
            <typeparam name="TAttribute">特性类型</typeparam>
            <param name="type"><see cref="T:System.Type"/></param>
            <param name="inherit">是否查找基类型特性</param>
            <returns><typeparamref name="TAttribute"/></returns>
        </member>
        <member name="M:Fast.IaaS.Extensions.TypeExtension.HasDefinePublicParameterlessConstructor(System.Type)">
            <summary>
            检查类型是否定义了公开无参构造函数
            </summary>
            <remarks>用于 <see cref="M:System.Activator.CreateInstance(System.Type)"/> 实例化</remarks>
            <param name="type"><see cref="T:System.Type"/></param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:Fast.IaaS.Extensions.TypeExtension.IsDefinitionEqual(System.Type,System.Type)">
            <summary>
            检查类型和指定类型定义是否相等
            </summary>
            <param name="type"><see cref="T:System.Type"/></param>
            <param name="compareType"><see cref="T:System.Type"/></param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:Fast.IaaS.Extensions.TypeExtension.IsCompatibilityTo(System.Type,System.Type)">
            <summary>
            检查类型和指定继承类型是否兼容
            </summary>
            <param name="type"><see cref="T:System.Type"/></param>
            <param name="inheritType"><see cref="T:System.Type"/></param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:Fast.IaaS.Extensions.TypeExtension.IsDeclarationMethod(System.Type,System.String,System.Reflection.BindingFlags,System.Reflection.MethodInfo@)">
            <summary>
            检查类型是否定义了指定方法
            </summary>
            <param name="type"><see cref="T:System.Type"/></param>
            <param name="name">方法名称</param>
            <param name="accessibilityBindingFlags">可访问性成员绑定标记</param>
            <param name="methodInfo"><see cref="T:System.Reflection.MethodInfo"/></param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:Fast.IaaS.Extensions.TypeExtension.IsInteger(System.Type)">
            <summary>
            检查类型是否是整数类型
            </summary>
            <param name="type"><see cref="T:System.Type"/></param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:Fast.IaaS.Extensions.TypeExtension.IsDecimal(System.Type)">
            <summary>
            检查类型是否是小数类型
            </summary>
            <param name="type"><see cref="T:System.Type"/></param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:Fast.IaaS.Extensions.TypeExtension.IsNumeric(System.Type)">
            <summary>
            检查类型是否是数值类型
            </summary>
            <param name="type"><see cref="T:System.Type"/></param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:Fast.IaaS.Extensions.TypeExtension.IsDictionary(System.Type)">
            <summary>
            检查类型是否是字典类型
            </summary>
            <param name="type"><see cref="T:System.Type"/></param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:Fast.IaaS.Extensions.TypeExtension.CreatePropertySetter(System.Type,System.Reflection.PropertyInfo)">
            <summary>
            创建属性值设置器
            </summary>
            <param name="type"><see cref="T:System.Type"/></param>
            <param name="propertyInfo"><see cref="T:System.Reflection.PropertyInfo"/></param>
            <returns><see cref="T:System.Action`2"/></returns>
        </member>
        <member name="M:Fast.IaaS.Extensions.TypeExtension.CreateFieldSetter(System.Type,System.Reflection.FieldInfo)">
            <summary>
            创建字段值设置器
            </summary>
            <param name="type"><see cref="T:System.Type"/></param>
            <param name="fieldInfo"><see cref="T:System.Reflection.FieldInfo"/></param>
            <returns><see cref="T:System.Action`2"/></returns>
        </member>
        <member name="M:Fast.IaaS.Extensions.TypeExtension.CreatePropertyGetter(System.Type,System.Reflection.PropertyInfo)">
            <summary>
            创建属性值访问器
            </summary>
            <param name="type"><see cref="T:System.Type"/></param>
            <param name="propertyInfo"><see cref="T:System.Reflection.PropertyInfo"/></param>
            <returns><see cref="T:System.Func`2"/></returns>
        </member>
        <member name="M:Fast.IaaS.Extensions.TypeExtension.CreateFieldGetter(System.Type,System.Reflection.FieldInfo)">
            <summary>
            创建字段值访问器
            </summary>
            <param name="type"><see cref="T:System.Type"/></param>
            <param name="fieldInfo"><see cref="T:System.Reflection.FieldInfo"/></param>
            <returns><see cref="T:System.Func`2"/></returns>
        </member>
        <member name="M:Fast.IaaS.Extensions.TypeExtension.GetTypeAttribute``1(System.Type,System.Boolean)">
            <summary>
            获取类型自定义特性
            </summary>
            <typeparam name="TAttribute">特性类型</typeparam>
            <param name="type">类类型</param>
            <param name="inherit">是否继承查找</param>
            <returns>特性对象</returns>
        </member>
        <member name="M:Fast.IaaS.Extensions.TypeExtension.HasImplementedRawGeneric(System.Type,System.Type)">
            <summary>
            判断类型是否实现某个泛型
            </summary>
            <param name="type">类型</param>
            <param name="generic">泛型类型</param>
            <returns>bool</returns>
        </member>
        <member name="T:Fast.IaaS.Extensions.ValidateExtension">
            <summary>
            验证拓展类
            </summary>
        </member>
        <member name="M:Fast.IaaS.Extensions.ValidateExtension.IsEmpty(System.Object)">
            <summary>
            检查 Object 是否为 NULL
            </summary>
            <param name="value"><see cref="T:System.Object"/></param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:Fast.IaaS.Extensions.ValidateExtension.IsEmpty``1(``0)">
            <summary>
            检查 Object 或者 集合 是否为 NULL 或者 空集合
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"><see cref="T:System.Object"/></param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:Fast.IaaS.Extensions.ValidateExtension.IsNullOrZero(System.Object)">
            <summary>
            检查 Object 是否为 NULL 或者 0
            </summary>
            <param name="value"><see cref="T:System.Object"/></param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:Fast.IaaS.Extensions.ValidateExtension.IsNullOrEmpty``1(System.Collections.Generic.ICollection{``0})">
            <summary>
            判断集合是否为空
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="collection"><see cref="T:System.Collections.Generic.ICollection`1"/></param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:Fast.IaaS.Extensions.ValidateExtension.IsNumber(System.String)">
            <summary>
            验证输入字符串为带小数点正数
            </summary>
            <param name="str">输入字符</param>
            <returns>返回一个bool类型的值</returns>
        </member>
        <member name="M:Fast.IaaS.Extensions.ValidateExtension.IsDecimalNumber(System.String)">
            <summary>
            验证输入字符串为带小数点正负数
            </summary>
            <param name="str">输入字符</param>
            <returns>返回一个bool类型的值</returns>
        </member>
        <member name="M:Fast.IaaS.Extensions.ValidateExtension.IsTel(System.String)">
            <summary>
            验证中国电话格式是否有效，格式010-85849685
            </summary>
            <param name="str">输入字符</param>
            <returns>返回一个bool类型的值</returns>
        </member>
        <member name="M:Fast.IaaS.Extensions.ValidateExtension.IsPhone(System.String)">
            <summary>
            验证输入字符串为电话号码
            </summary>
            <param name="str">输入字符</param>
            <returns>返回一个bool类型的值</returns>
        </member>
        <member name="M:Fast.IaaS.Extensions.ValidateExtension.IsFax(System.String)">
            <summary>
            验证是否是有效传真号码
            </summary>
            <param name="str">输入字符</param>
            <returns>返回一个bool类型的值</returns>
        </member>
        <member name="M:Fast.IaaS.Extensions.ValidateExtension.IsMobile(System.String)">
            <summary>
            验证手机号是否合法 号段为13,14,15,16,17,18,19  0，86开头将自动识别
            </summary>
            <param name="str">输入字符</param>
            <returns>返回一个bool类型的值</returns>
        </member>
        <member name="M:Fast.IaaS.Extensions.ValidateExtension.IsIdCard(System.String)">
            <summary>
            验证身份证是否有效
            </summary>
            <param name="str">输入字符</param>
            <returns>返回一个bool类型的值</returns>
        </member>
        <member name="M:Fast.IaaS.Extensions.ValidateExtension.IsIdCard18(System.String)">
            <summary>
            验证输入字符串为18位的身份证号码
            </summary>
            <param name="str">输入字符</param>
            <returns>返回一个bool类型的值</returns>
        </member>
        <member name="M:Fast.IaaS.Extensions.ValidateExtension.IsIdCard15(System.String)">
            <summary>
            验证输入字符串为15位的身份证号码
            </summary>
            <param name="str">输入字符</param>
            <returns>返回一个bool类型的值</returns>
        </member>
        <member name="M:Fast.IaaS.Extensions.ValidateExtension.IsEmail(System.String)">
            <summary>
            验证是否是有效邮箱地址
            </summary>
            <param name="str">输入字符</param>
            <returns>返回一个bool类型的值</returns>
        </member>
        <member name="M:Fast.IaaS.Extensions.ValidateExtension.IsQqEmail(System.String)">
            <summary>
            验证是否是有效QQ邮箱地址
            </summary>
            <param name="str">输入字符</param>
            <returns>返回一个bool类型的值</returns>
        </member>
        <member name="M:Fast.IaaS.Extensions.ValidateExtension.IsOnlyChinese(System.String)">
            <summary>
            验证是否只含有汉字
            </summary>
            <param name="strLn">输入字符</param>
            <returns></returns>
        </member>
        <member name="M:Fast.IaaS.Extensions.ValidateExtension.IsBadString(System.String)">
            <summary>
            是否有多余的字符 防止SQL注入
            </summary>
            <param name="str">输入字符</param>
            <returns></returns>
        </member>
        <member name="M:Fast.IaaS.Extensions.ValidateExtension.IsNzx(System.String)">
            <summary>
            是否由数字、26个英文字母或者下划线組成的字串 
            </summary>
            <param name="str">输入字符</param>
            <returns></returns>
        </member>
        <member name="M:Fast.IaaS.Extensions.ValidateExtension.IsAlphaNumericChinese(System.String)">
            <summary>
            由数字、26个英文字母、汉字組成的字串
            </summary>
            <param name="str">输入字符</param>
            <returns></returns>
        </member>
        <member name="M:Fast.IaaS.Extensions.ValidateExtension.IsAlphaNumeric(System.String)">
            <summary>
            是否由数字、26个英文字母組成的字串
            </summary>
            <param name="str">输入字符</param>
            <returns></returns>
        </member>
        <member name="M:Fast.IaaS.Extensions.ValidateExtension.IsPostCode(System.String)">
            <summary>
            验证输入字符串为邮政编码
            </summary>
            <param name="str">输入字符</param>
            <returns>返回一个bool类型的值</returns>
        </member>
        <member name="M:Fast.IaaS.Extensions.ValidateExtension.CheckLength(System.String,System.Int32)">
            <summary>
            检查对象的输入长度
            </summary>
            <param name="str">输入字符</param>
            <param name="length">指定的长度</param>
            <returns>false 太长，true -太短</returns>
        </member>
        <member name="M:Fast.IaaS.Extensions.ValidateExtension.IsDateTime(System.String)">
            <summary>
            判断用户输入是否为日期
            </summary>
            <param name="str">输入字符</param>
            <returns>返回一个bool类型的值</returns>
            <remarks>
            可判断格式如下（其中-可替换为/，不影响验证)
            YYYY | YYYY-MM | YYYY-MM-DD | YYYY-MM-DD HH:MM:SS | YYYY-MM-DD HH:MM:SS.FFF
            </remarks>
        </member>
        <member name="T:Fast.IaaS.GlobalConstant">
            <summary>
            常用常量
            </summary>
        </member>
        <member name="P:Fast.IaaS.GlobalConstant.DefaultTime">
            <summary>
            默认DateTime
            </summary>
        </member>
        <member name="P:Fast.IaaS.GlobalConstant.TimeStamp">
            <summary>
            时间戳
            </summary>
        </member>
        <member name="T:Fast.IaaS.Utils.CryptoUtil">
            <summary>
            加密解密工具类
            </summary>
        </member>
        <member name="M:Fast.IaaS.Utils.CryptoUtil.AESEncrypt(System.String,System.String,System.String,System.Security.Cryptography.CipherMode,System.Security.Cryptography.PaddingMode)">
            <summary>
            使用AES算法对给定字符串进行加密。
            </summary>
            <param name="dataStr">要加密的字符串。</param>
            <param name="key">用于加密的密钥。</param>
            <param name="vector">用于加密的向量（IV）。</param>
            <param name="cipherMode">加密模式，默认为CBC模式。</param>
            <param name="paddingMode">填充模式，默认为PKCS7。</param>
            <returns>加密后的Base64编码字符串。</returns>
        </member>
        <member name="M:Fast.IaaS.Utils.CryptoUtil.AESDecrypt(System.String,System.String,System.String,System.Security.Cryptography.CipherMode,System.Security.Cryptography.PaddingMode)">
            <summary>
            使用AES算法对给定的Base64编码字符串进行解密。
            </summary>
            <param name="dataStr">要解密的Base64编码字符串。</param>
            <param name="key">用于解密的密钥。</param>
            <param name="vector">用于解密的向量（IV）。</param>
            <param name="cipherMode">解密模式，默认为CBC模式。</param>
            <param name="paddingMode">填充模式，默认为PKCS7。</param>
            <returns>解密后的原始字符串。</returns>
        </member>
        <member name="M:Fast.IaaS.Utils.CryptoUtil.MD5Encrypt(System.String)">
            <summary>
            使用 MD5 算法对给定的字符串进行加密。
            </summary>
            <param name="content">要加密的字符串。</param>
            <returns>加密后的字符串。</returns>
        </member>
        <member name="T:Fast.IaaS.Utils.FileUtil">
            <summary>
            文件工具类
            </summary>
        </member>
        <member name="M:Fast.IaaS.Utils.FileUtil.GetFileSHA1(System.String)">
            <summary>
            获取文件的 SHA1 哈希值。
            </summary>
            <param name="filePath">文件的完整路径。</param>
            <returns>由小写字母组成的 SHA1 哈希值字符串。</returns>
        </member>
        <member name="T:Fast.IaaS.Utils.GuidUtil">
            <summary>
            Guid 工具类
            </summary>
        </member>
        <member name="M:Fast.IaaS.Utils.GuidUtil.GetGuid(System.String)">
            <summary>
            生成一个Guid
            N ece4f4a60b764339b94a07c84e338a27
            D 5bf99df1-dc49-4023-a34a-7bd80a42d6bb
            B {2280f8d7-fd18-4c72-a9ab-405de3fcfbc9}
            P (25e6e09f-fb66-4cab-b4cd-bfb429566549)
            </summary>
            <param name="format"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.IaaS.Utils.GuidUtil.GetShortGuid">
            <summary>
            生成一个短的Guid
            </summary>
            <returns></returns>
        </member>
        <member name="T:Fast.IaaS.Utils.ITreeNode`1">
            <summary>
            树基类
            </summary>
            <typeparam name="TProperty"></typeparam>
        </member>
        <member name="M:Fast.IaaS.Utils.ITreeNode`1.GetId">
            <summary>
            获取节点id
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fast.IaaS.Utils.ITreeNode`1.GetPid">
            <summary>
            获取节点父id
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fast.IaaS.Utils.ITreeNode`1.Sort">
            <summary>
            获取排序字段
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fast.IaaS.Utils.ITreeNode`1.SetChildren(System.Collections.IList)">
            <summary>
            设置Children
            </summary>
            <param name="children"></param>
        </member>
        <member name="T:Fast.IaaS.Utils.TreeBuildUtil`2">
            <summary>
            递归工具类，用于遍历有父子关系的节点，例如菜单树，字典树等等
            </summary>
            <typeparam name="TEntity"></typeparam>
            <typeparam name="TProperty"></typeparam>
        </member>
        <member name="F:Fast.IaaS.Utils.TreeBuildUtil`2._rootParentId">
            <summary>
            顶级节点的父节点Id(默认0)
            </summary>
        </member>
        <member name="M:Fast.IaaS.Utils.TreeBuildUtil`2.SetRootParentId(`1)">
            <summary>
            设置根节点方法
            查询数据可以设置其他节点为根节点，避免父节点永远是0，查询不到数据的问题
            </summary>
        </member>
        <member name="M:Fast.IaaS.Utils.TreeBuildUtil`2.Build(System.Collections.Generic.List{`0})">
            <summary>
            构造树节点
            </summary>
            <param name="nodes"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.IaaS.Utils.TreeBuildUtil`2.BuildChildNodes(System.Collections.Generic.List{`0},`0)">
            <summary>
            构造子节点集合
            </summary>
            <param name="totalNodes"></param>
            <param name="node"></param>
        </member>
        <member name="T:Fast.IaaS.Utils.VerificationUtil">
            <summary>
            验证工具类
            </summary>
        </member>
        <member name="M:Fast.IaaS.Utils.VerificationUtil.IdToCodeByLong(System.Int64)">
            <summary>
            ID转换为邀请码
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.IaaS.Utils.VerificationUtil.CodeToIdByLong(System.String)">
            <summary>
            邀请码解析出ID,基本操作思路恰好与idToCode反向操作。
            </summary>
            <param name="code"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.IaaS.Utils.VerificationUtil.IdToCodeByInt(System.Int32)">
            <summary>
            ID转换为邀请码
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.IaaS.Utils.VerificationUtil.CodeToIdByInt(System.String)">
            <summary>
            邀请码解析出ID,基本操作思路恰好与idToCode反向操作。
            </summary>
            <param name="code"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.IaaS.Utils.VerificationUtil.PrintBase">
            <summary>
            显示用于进制编码的所有字符串
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fast.IaaS.Utils.VerificationUtil.GetVerCode(System.Int32)">
            <summary>
            得到验证码
            </summary>
            <param name="len"></param>
            <returns></returns>
        </member>
    </members>
</doc>
