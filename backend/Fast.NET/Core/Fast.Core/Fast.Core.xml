<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Fast.Core</name>
    </assembly>
    <members>
        <member name="T:Fast.Core.App">
            <summary>
            App 上下文
            </summary>
        </member>
        <member name="P:Fast.Core.App.Configuration">
            <summary>
            配置
            </summary>
        </member>
        <member name="P:Fast.Core.App.WebHostEnvironment">
            <summary>
            获取Web主机环境
            </summary>
        </member>
        <member name="P:Fast.Core.App.HostEnvironment">
            <summary>
            获取泛型主机环境
            </summary>
        </member>
        <member name="P:Fast.Core.App.RootServices">
            <summary>
            存储根服务，可能为空
            </summary>
        </member>
        <member name="F:Fast.Core.App.Assemblies">
            <summary>
            应用有效程序集
            </summary>
        </member>
        <member name="F:Fast.Core.App.EffectiveTypes">
            <summary>
            有效程序集类型
            </summary>
        </member>
        <member name="P:Fast.Core.App.HttpContext">
            <summary>
            请求上下文
            </summary>
        </member>
        <member name="F:Fast.Core.App.UnmanagedObjects">
            <summary>
            未托管的对象集合
            </summary>
        </member>
        <member name="M:Fast.Core.App.GetTypes(System.Reflection.Assembly)">
            <summary>
            加载程序集中的所有类型
            </summary>
            <param name="ass"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Core.App.CatchOrDefault``1(System.Func{``0},``0)">
            <summary>
            处理获取对象异常问题
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="action">获取对象委托</param>
            <param name="defaultValue">默认值</param>
            <returns>T</returns>
        </member>
        <member name="M:Fast.Core.App.GetServiceProvider(System.Type)">
            <summary>
            解析服务提供器
            </summary>
            <param name="serviceType"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Core.App.GetService``1(System.IServiceProvider)">
            <summary>
            获取请求生存周期的服务
            </summary>
            <typeparam name="TService"></typeparam>
            <param name="serviceProvider"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Core.App.GetService(System.Type,System.IServiceProvider)">
            <summary>
            获取请求生存周期的服务
            </summary>
            <param name="type"></param>
            <param name="serviceProvider"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Core.App.GetServices``1(System.IServiceProvider)">
            <summary>
            获取请求生存周期的服务集合
            </summary>
            <typeparam name="TService"></typeparam>
            <param name="serviceProvider"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Core.App.GetServices(System.Type,System.IServiceProvider)">
            <summary>
            获取请求生存周期的服务集合
            </summary>
            <param name="type"></param>
            <param name="serviceProvider"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Core.App.GetRequiredService``1(System.IServiceProvider)">
            <summary>
            获取请求生存周期的服务
            </summary>
            <typeparam name="TService"></typeparam>
            <param name="serviceProvider"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Core.App.GetRequiredService(System.Type,System.IServiceProvider)">
            <summary>
            获取请求生存周期的服务
            </summary>
            <param name="type"></param>
            <param name="serviceProvider"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Core.App.GetConfig``1(System.String,System.Boolean)">
            <summary>
            获取配置
            </summary>
            <typeparam name="TOptions">强类型选项类</typeparam>
            <param name="path">配置中对应的Key</param>
            <param name="loadPostConfigure"></param>
            <returns>TOptions</returns>
        </member>
        <member name="M:Fast.Core.App.GetThreadId">
            <summary>
            获取当前线程 Id
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fast.Core.App.GetTraceId">
            <summary>
            获取当前请求 TraceId
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fast.Core.App.GetExecutionTime(System.Action)">
            <summary>
            获取一段代码执行耗时
            </summary>
            <param name="action">委托</param>
            <returns><see cref="T:System.Int64"/></returns>
        </member>
        <member name="M:Fast.Core.App.GetServiceLifetime(System.Type)">
            <summary>
            获取服务注册的生命周期类型
            </summary>
            <param name="serviceType"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Core.App.GetOptions``1(System.IServiceProvider)">
            <summary>
            获取选项
            </summary>
            <typeparam name="TOptions">强类型选项类</typeparam>
            <param name="serviceProvider"></param>
            <returns>TOptions</returns>
        </member>
        <member name="M:Fast.Core.App.GetOptionsMonitor``1(System.IServiceProvider)">
            <summary>
            获取选项
            </summary>
            <typeparam name="TOptions">强类型选项类</typeparam>
            <param name="serviceProvider"></param>
            <returns>TOptions</returns>
        </member>
        <member name="M:Fast.Core.App.GetOptionsSnapshot``1(System.IServiceProvider)">
            <summary>
            获取选项
            </summary>
            <typeparam name="TOptions">强类型选项类</typeparam>
            <param name="serviceProvider"></param>
            <returns>TOptions</returns>
        </member>
        <member name="T:Fast.Core.InternalApp">
            <summary>
            内部 App 副本
            </summary>
        </member>
        <member name="F:Fast.Core.InternalApp.InternalServices">
            <summary>
            应用服务
            </summary>
        </member>
        <member name="F:Fast.Core.InternalApp.RootServices">
            <summary>
            根服务
            </summary>
        </member>
        <member name="F:Fast.Core.InternalApp.Configuration">
            <summary>
            配置对象
            </summary>
        </member>
        <member name="F:Fast.Core.InternalApp.WebHostEnvironment">
            <summary>
            获取Web主机环境
            </summary>
        </member>
        <member name="F:Fast.Core.InternalApp.HostEnvironment">
            <summary>
            获取泛型主机环境
            </summary>
        </member>
        <member name="P:Fast.Core.InternalApp.InternalConfigurationScanDirectories">
            <summary>
            配置配置文件扫描目录
            </summary>
        </member>
        <member name="M:Fast.Core.InternalApp.ConfigureHostAppConfiguration(Microsoft.Extensions.Hosting.IHostBuilder)">
            <summary>
            自动装载主机配置
            </summary>
            <param name="builder"></param>
        </member>
        <member name="F:Fast.Core.InternalApp.excludeJsonPrefixArr">
            <summary>
            排除的配置文件前缀
            </summary>
        </member>
        <member name="F:Fast.Core.InternalApp.runtimeJsonSuffixArr">
            <summary>
            排除运行时 Json 后缀
            </summary>
        </member>
        <member name="M:Fast.Core.InternalApp.SplitConfigFileNameToGroups(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            对配置文件名进行分组
            </summary>
            <param name="configFiles"></param>
            <returns></returns>
        </member>
        <member name="T:Fast.Core.Attributes.FastEnumAttribute">
            <summary>
            枚举特性
            用于区分是否可以写入枚举字典的特性
            </summary>
        </member>
        <member name="P:Fast.Core.Attributes.FastEnumAttribute.ChName">
            <summary>
            中文名称
            </summary>
        </member>
        <member name="P:Fast.Core.Attributes.FastEnumAttribute.EnName">
            <summary>
            英文名称
            </summary>
        </member>
        <member name="P:Fast.Core.Attributes.FastEnumAttribute.Remark">
            <summary>
            备注
            </summary>
        </member>
        <member name="T:Fast.Core.ConfigurableOptions.Attributes.MapSettingsAttribute">
            <summary>
            重新映射属性配置
            </summary>
        </member>
        <member name="M:Fast.Core.ConfigurableOptions.Attributes.MapSettingsAttribute.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="path">appsetting.json 对应键</param>
        </member>
        <member name="P:Fast.Core.ConfigurableOptions.Attributes.MapSettingsAttribute.Path">
            <summary>
            对应配置文件中的路径
            </summary>
        </member>
        <member name="T:Fast.Core.ConfigurableOptions.Attributes.OptionsSettingsAttribute">
            <summary>
            选项配置特性
            </summary>
        </member>
        <member name="M:Fast.Core.ConfigurableOptions.Attributes.OptionsSettingsAttribute.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Fast.Core.ConfigurableOptions.Attributes.OptionsSettingsAttribute.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="path">appsetting.json 对应键</param>
        </member>
        <member name="M:Fast.Core.ConfigurableOptions.Attributes.OptionsSettingsAttribute.#ctor(System.Boolean)">
            <summary>
            构造函数
            </summary>
            <param name="postConfigureAll">启动所有实例进行后期配置</param>
        </member>
        <member name="M:Fast.Core.ConfigurableOptions.Attributes.OptionsSettingsAttribute.#ctor(System.String,System.Boolean)">
            <summary>
            构造函数
            </summary>
            <param name="path">appsetting.json 对应键</param>
            <param name="postConfigureAll">启动所有实例进行后期配置</param>
        </member>
        <member name="P:Fast.Core.ConfigurableOptions.Attributes.OptionsSettingsAttribute.Path">
            <summary>
            对应配置文件中的路径
            </summary>
        </member>
        <member name="P:Fast.Core.ConfigurableOptions.Attributes.OptionsSettingsAttribute.PostConfigureAll">
            <summary>
            对所有配置实例进行后期配置
            </summary>
        </member>
        <member name="T:Fast.Core.ConfigurableOptions.Extensions.ConfigurableOptionsServiceCollectionExtensions">
            <summary>
            可变选项服务拓展类
            </summary>
        </member>
        <member name="M:Fast.Core.ConfigurableOptions.Extensions.ConfigurableOptionsServiceCollectionExtensions.AddConfigurableOptions``1(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            添加选项配置
            </summary>
            <typeparam name="TOptions">选项类型</typeparam>
            <param name="services">服务集合</param>
            <returns>服务集合</returns>
        </member>
        <member name="T:Fast.Core.ConfigurableOptions.Internal.Penetrates">
            <summary>
            常量、公共方法配置类
            </summary>
        </member>
        <member name="M:Fast.Core.ConfigurableOptions.Internal.Penetrates.GetOptionsConfiguration(System.Type)">
            <summary>
            获取选项配置
            </summary>
            <param name="optionsType">选项类型</param>
            <returns></returns>
        </member>
        <member name="M:Fast.Core.ConfigurableOptions.Internal.Penetrates.GetOptionsOnStarting``1">
            <summary>
            在主机启动时获取选项
            </summary>
            <typeparam name="TOptions"></typeparam>
            <returns></returns>
        </member>
        <member name="T:Fast.Core.ConfigurableOptions.Options.IConfigurableOptions">
            <summary>
            应用选项依赖接口
            </summary>
        </member>
        <member name="T:Fast.Core.ConfigurableOptions.Options.IConfigurableOptions`1">
            <summary>
            选项后期配置
            </summary>
            <typeparam name="TOptions"></typeparam>
        </member>
        <member name="M:Fast.Core.ConfigurableOptions.Options.IConfigurableOptions`1.PostConfigure(`0,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            选项后期配置
            </summary>
            <param name="options"></param>
            <param name="configuration"></param>
        </member>
        <member name="T:Fast.Core.ConfigurableOptions.Options.IConfigurableOptions`2">
            <summary>
            带验证的应用选项依赖接口
            </summary>
            <typeparam name="TOptions"></typeparam>
            <typeparam name="TOptionsValidation"></typeparam>
        </member>
        <member name="T:Fast.Core.ConfigurableOptions.Options.IConfigurableOptionsListener`1">
            <summary>
            带监听的应用选项依赖接口
            </summary>
            <typeparam name="TOptions"></typeparam>
        </member>
        <member name="M:Fast.Core.ConfigurableOptions.Options.IConfigurableOptionsListener`1.OnListener(`0,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            监听
            </summary>
            <param name="options"></param>
            <param name="configuration"></param>
        </member>
        <member name="T:Fast.Core.CorsAccessor.Extensions.CorsAccessorApplicationBuilderExtension">
            <summary>
            跨域中间件拓展
            </summary>
        </member>
        <member name="M:Fast.Core.CorsAccessor.Extensions.CorsAccessorApplicationBuilderExtension.UseCorsAccessor(Microsoft.AspNetCore.Builder.IApplicationBuilder,System.Action{Microsoft.AspNetCore.Cors.Infrastructure.CorsPolicyBuilder})">
            <summary>
            添加跨域中间件
            </summary>
            <param name="app"></param>
            <param name="corsPolicyBuilderHandler"></param>
            <returns></returns>
        </member>
        <member name="T:Fast.Core.CorsAccessor.Extensions.CorsAccessorServiceCollectionExtension">
            <summary>
            跨域访问服务拓展类
            </summary>
        </member>
        <member name="M:Fast.Core.CorsAccessor.Extensions.CorsAccessorServiceCollectionExtension.AddCorsAccessor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Microsoft.AspNetCore.Cors.Infrastructure.CorsOptions},System.Action{Microsoft.AspNetCore.Cors.Infrastructure.CorsPolicyBuilder})">
            <summary>
            配置跨域
            </summary>
            <param name="services">服务集合</param>
            <param name="corsOptionsHandler"></param>
            <param name="corsPolicyBuilderHandler"></param>
            <returns>服务集合</returns>
        </member>
        <member name="T:Fast.Core.CorsAccessor.Internal.Penetrates">
            <summary>
            常量、公共方法配置类
            </summary>
        </member>
        <member name="F:Fast.Core.CorsAccessor.Internal.Penetrates._defaultExposedHeaders">
            <summary>
            默认跨域导出响应头 Key
            </summary>
            <remarks>解决 ajax，XMLHttpRequest，axios 不能获取请求头问题</remarks>
        </member>
        <member name="M:Fast.Core.CorsAccessor.Internal.Penetrates.SetCorsPolicy(Microsoft.AspNetCore.Cors.Infrastructure.CorsPolicyBuilder,Fast.Core.CorsAccessor.Options.CorsAccessorSettingsOptions,System.Boolean)">
            <summary>
            设置跨域策略
            </summary>
            <param name="builder"></param>
            <param name="corsAccessorSettings"></param>
            <param name="isMiddleware"></param>
        </member>
        <member name="T:Fast.Core.CorsAccessor.Options.CorsAccessorSettingsOptions">
            <summary>
            跨域配置选项
            </summary>
        </member>
        <member name="P:Fast.Core.CorsAccessor.Options.CorsAccessorSettingsOptions.PolicyName">
            <summary>
            策略名称
            </summary>
        </member>
        <member name="P:Fast.Core.CorsAccessor.Options.CorsAccessorSettingsOptions.WithOrigins">
            <summary>
            允许来源域名，没有配置则允许所有来源
            </summary>
        </member>
        <member name="P:Fast.Core.CorsAccessor.Options.CorsAccessorSettingsOptions.WithHeaders">
            <summary>
            请求表头，没有配置则允许所有表头
            </summary>
        </member>
        <member name="P:Fast.Core.CorsAccessor.Options.CorsAccessorSettingsOptions.WithExposedHeaders">
            <summary>
            设置客户端可获取的响应标头
            </summary>
        </member>
        <member name="P:Fast.Core.CorsAccessor.Options.CorsAccessorSettingsOptions.WithMethods">
            <summary>
            设置跨域允许请求谓词，没有配置则允许所有
            </summary>
        </member>
        <member name="P:Fast.Core.CorsAccessor.Options.CorsAccessorSettingsOptions.AllowCredentials">
            <summary>
            是否允许跨域请求中的凭据
            </summary>
        </member>
        <member name="P:Fast.Core.CorsAccessor.Options.CorsAccessorSettingsOptions.SetPreflightMaxAge">
            <summary>
            设置预检过期时间
            </summary>
        </member>
        <member name="P:Fast.Core.CorsAccessor.Options.CorsAccessorSettingsOptions.FixedClientToken">
            <summary>
            修正前端无法获取 Token 问题
            </summary>
        </member>
        <member name="P:Fast.Core.CorsAccessor.Options.CorsAccessorSettingsOptions.SignalRSupport">
            <summary>
            启用 SignalR 跨域支持
            </summary>
        </member>
        <member name="M:Fast.Core.CorsAccessor.Options.CorsAccessorSettingsOptions.PostConfigure(Fast.Core.CorsAccessor.Options.CorsAccessorSettingsOptions,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            后期配置
            </summary>
            <param name="options"></param>
            <param name="configuration"></param>
        </member>
        <member name="T:Fast.Core.DataValidation.Attributes.DataValidationAttribute">
            <summary>
            数据类型验证特性
            </summary>
        </member>
        <member name="M:Fast.Core.DataValidation.Attributes.DataValidationAttribute.#ctor(Fast.Core.DataValidation.Enums.ValidationPattern,System.Object[])">
            <summary>
            构造函数
            </summary>
            <param name="validationPattern">验证逻辑</param>
            <param name="validationTypes"></param>
        </member>
        <member name="M:Fast.Core.DataValidation.Attributes.DataValidationAttribute.#ctor(System.Object[])">
            <summary>
            构造函数
            </summary>
            <param name="validationTypes"></param>
        </member>
        <member name="M:Fast.Core.DataValidation.Attributes.DataValidationAttribute.IsValid(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            验证逻辑
            </summary>
            <param name="value"></param>
            <param name="validationContext"></param>
            <returns></returns>
        </member>
        <member name="P:Fast.Core.DataValidation.Attributes.DataValidationAttribute.ValidationTypes">
            <summary>
            验证类型
            </summary>
        </member>
        <member name="P:Fast.Core.DataValidation.Attributes.DataValidationAttribute.ValidationPattern">
            <summary>
            验证逻辑
            </summary>
        </member>
        <member name="P:Fast.Core.DataValidation.Attributes.DataValidationAttribute.AllowEmptyStrings">
             <summary>
            是否允许空字符串
             </summary>
        </member>
        <member name="P:Fast.Core.DataValidation.Attributes.DataValidationAttribute.AllowNullValue">
            <summary>
            允许空值，有值才验证，默认 false
            </summary>
        </member>
        <member name="T:Fast.Core.DataValidation.Attributes.NonValidationAttribute">
            <summary>
            跳过验证
            </summary>
        </member>
        <member name="T:Fast.Core.DataValidation.Attributes.ValidationItemMetadataAttribute">
            <summary>
            验证项元数据
            </summary>
        </member>
        <member name="M:Fast.Core.DataValidation.Attributes.ValidationItemMetadataAttribute.#ctor(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            构造函数
            </summary>
            <param name="regularExpression">正则表达式</param>
            <param name="defaultErrorMessage">失败提示默认消息</param>
            <param name="regexOptions">正则表达式匹配选项</param>
        </member>
        <member name="P:Fast.Core.DataValidation.Attributes.ValidationItemMetadataAttribute.RegularExpression">
            <summary>
            正则表达式
            </summary>
        </member>
        <member name="P:Fast.Core.DataValidation.Attributes.ValidationItemMetadataAttribute.DefaultErrorMessage">
            <summary>
            默认验证失败类型
            </summary>
        </member>
        <member name="P:Fast.Core.DataValidation.Attributes.ValidationItemMetadataAttribute.RegexOptions">
            <summary>
            正则表达式选项
            </summary>
        </member>
        <member name="T:Fast.Core.DataValidation.Attributes.ValidationMessageAttribute">
            <summary>
            验证消息特性
            </summary>
        </member>
        <member name="M:Fast.Core.DataValidation.Attributes.ValidationMessageAttribute.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="errorMessage"></param>
        </member>
        <member name="P:Fast.Core.DataValidation.Attributes.ValidationMessageAttribute.ErrorMessage">
            <summary>
            错误消息
            </summary>
        </member>
        <member name="T:Fast.Core.DataValidation.Attributes.ValidationMessageTypeAttribute">
            <summary>
            验证消息类型特性
            </summary>
        </member>
        <member name="T:Fast.Core.DataValidation.Attributes.ValidationTypeAttribute">
            <summary>
            验证类型特性
            </summary>
        </member>
        <member name="T:Fast.Core.DataValidation.Enums.ValidationPattern">
            <summary>
            验证逻辑
            </summary>
        </member>
        <member name="F:Fast.Core.DataValidation.Enums.ValidationPattern.AllOfThem">
            <summary>
            全部都要验证通过
            </summary>
        </member>
        <member name="F:Fast.Core.DataValidation.Enums.ValidationPattern.AtLeastOne">
            <summary>
            至少一个验证通过
            </summary>
        </member>
        <member name="T:Fast.Core.DataValidation.Enums.ValidationTypes">
            <summary>
            验证类型
            </summary>
        </member>
        <member name="F:Fast.Core.DataValidation.Enums.ValidationTypes.Numeric">
            <summary>
            数值类型
            <para>
            表达式：^\+?(:?(:?\d+\.\d+)?$|(:?\d+))?$|(-?\d+)(\.\d+)?$
            </para>
            </summary>
        </member>
        <member name="F:Fast.Core.DataValidation.Enums.ValidationTypes.PositiveNumber">
            <summary>
            正数
            <para>
            表达式：^(0\.0*[1-9]+[0-9]*$|[1-9]+[0-9]*\.[0-9]*[0-9]$|[1-9]+[0-9]*$)
            </para>
            </summary>
        </member>
        <member name="F:Fast.Core.DataValidation.Enums.ValidationTypes.NegativeNumber">
            <summary>
            负数
            <para>
            表达式：^-(0\.0*[1-9]+[0-9]*$|[1-9]+[0-9]*\.[0-9]*[0-9]$|[1-9]+[0-9]*$)
            </para>
            </summary>
        </member>
        <member name="F:Fast.Core.DataValidation.Enums.ValidationTypes.Integer">
            <summary>
            整数
            <para>
            表达式：^-?[1-9]+[0-9]*$|^0$
            </para>
            </summary>
        </member>
        <member name="F:Fast.Core.DataValidation.Enums.ValidationTypes.Money">
            <summary>
            金钱类型
            <para>
            表达式：^(([0-9]|([1-9][0-9]{0,9}))((\.[0-9]{1,2})?))$
            </para>
            </summary>
        </member>
        <member name="F:Fast.Core.DataValidation.Enums.ValidationTypes.Date">
            <summary>
            日期类型
            <para>
            表达式：^(?:(?:1[6-9]|[2-9][0-9])[0-9]{2}([-/.]?)(?:(?:0?[1-9]|1[0-2])\1(?:0?[1-9]|1[0-9]|2[0-8])|(?:0?[13-9]|1[0-2])\1(?:29|30)|(?:0?[13578]|1[02])\1(?:31))|(?:(?:1[6-9]|[2-9][0-9])(?:0[48]|[2468][048]|[13579][26])|(?:16|[2468][048]|[3579][26])00)([-/.]?)0?2\2(?:29))(\s+([01][0-9]:|2[0-3]:)?[0-5][0-9]:[0-5][0-9])?$
            </para>
            </summary>
        </member>
        <member name="F:Fast.Core.DataValidation.Enums.ValidationTypes.Time">
            <summary>
            时间类型
            <para>
            表达式：^(\d{1,2})(:)?(\d{1,2})\2(\d{1,2})$
            </para>
            </summary>
        </member>
        <member name="F:Fast.Core.DataValidation.Enums.ValidationTypes.IDCard">
            <summary>
            身份证号码
            <para>
            表达式：(^\d{15}$)|(^\d{18}$)|(^\d{17}(\d|X|x)$)
            </para>
            </summary>
        </member>
        <member name="F:Fast.Core.DataValidation.Enums.ValidationTypes.PostCode">
            <summary>
            邮政编码
            <para>
            表达式：^[0-9]{6}$
            </para>
            </summary>
        </member>
        <member name="F:Fast.Core.DataValidation.Enums.ValidationTypes.PhoneNumber">
            <summary>
            手机号码
            <para>
            表达式：^1[3456789][0-9]{9}$
            </para>
            </summary>
        </member>
        <member name="F:Fast.Core.DataValidation.Enums.ValidationTypes.Telephone">
            <summary>
            固话格式
            <para>
            表达式：(^[0-9]{3,4}\-[0-9]{3,8}$)|(^[0-9]{3,8}$)|(^\([0-9]{3,4}\)[0-9]{3,8}$)|(^0{0,1}13[0-9]{9}$)
            </para>
            </summary>
        </member>
        <member name="F:Fast.Core.DataValidation.Enums.ValidationTypes.PhoneOrTelNumber">
            <summary>
            手机或固话类型
            <para>
            表达式：(^1[3456789][0-9]{9}$)|((^[0-9]{3,4}\-[0-9]{3,8}$)|(^[0-9]{3,8}$)|(^\([0-9]{3,4}\)[0-9]{3,8}$)|(^0{0,1}13[0-9]{9}$))
            </para>
            </summary>
        </member>
        <member name="F:Fast.Core.DataValidation.Enums.ValidationTypes.EmailAddress">
            <summary>
            邮件类型
            <para>
            表达式：^\w+([-+.']\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*$
            </para>
            </summary>
        </member>
        <member name="F:Fast.Core.DataValidation.Enums.ValidationTypes.Url">
            <summary>
            网址类型
            <para>
            表达式：^(((ht|f)tps?):\/\/)?([^!@#$%^与*?.\s-]([^!@#$%^与*?.\s]{0,63}[^!@#$%^与*?.\s])?\.)+[a-z]{2,6}\/?
            </para>
            </summary>
        </member>
        <member name="F:Fast.Core.DataValidation.Enums.ValidationTypes.Color">
            <summary>
            颜色类型
            <para>
            表达式：(^#([0-9a-f]{6}|[0-9a-f]{3})$)|(^rgb\(([0-9]|[0-9][0-9]|25[0-5]|2[0-4][0-9]|[0-1][0-9][0-9])\,([0-9]|[0-9][0-9]|25[0-5]|2[0-4][0-9]|[0-1][0-9][0-9])\,([0-9]|[0-9][0-9]|25[0-5]|2[0-4][0-9]|[0-1][0-9][0-9])\)$)|(^rgba\(([0-9]|[0-9][0-9]|25[0-5]|2[0-4][0-9]|[0-1][0-9][0-9])\,([0-9]|[0-9][0-9]|25[0-5]|2[0-4][0-9]|[0-1][0-9][0-9])\,([0-9]|[0-9][0-9]|25[0-5]|2[0-4][0-9]|[0-1][0-9][0-9])\,(1|1.0|0.[0-9])\)$)
            </para>
            </summary>
        </member>
        <member name="F:Fast.Core.DataValidation.Enums.ValidationTypes.Chinese">
            <summary>
            中文
            <para>
            表达式：^[\u4e00-\u9fa5]+$
            </para>
            </summary>
        </member>
        <member name="F:Fast.Core.DataValidation.Enums.ValidationTypes.IPv4">
            <summary>
            IPv4 类型
            <para>
            表达式：^((25[0-5]|2[0-4][0-9]|1[0-9]{2}|[0-9]{1,2})\.){3}(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[0-9]{1,2})$
            </para>
            </summary>
        </member>
        <member name="F:Fast.Core.DataValidation.Enums.ValidationTypes.IPv6">
            <summary>
            IPv6 类型
            <para>
            表达式：/^\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))(%.+)?\s*$
            </para>
            </summary>
        </member>
        <member name="F:Fast.Core.DataValidation.Enums.ValidationTypes.Age">
            <summary>
            年龄
            <para>
            表达式：^[1-99]?\d*$
            </para>
            </summary>
        </member>
        <member name="F:Fast.Core.DataValidation.Enums.ValidationTypes.ChineseName">
            <summary>
            中文名
            <para>
            表达式：^[\u0391-\uFFE5]{2,15}$
            </para>
            </summary>
        </member>
        <member name="F:Fast.Core.DataValidation.Enums.ValidationTypes.EnglishName">
            <summary>
            英文名
            <para>
            表达式：^[A-Za-z]{1,161}$
            </para>
            </summary>
        </member>
        <member name="F:Fast.Core.DataValidation.Enums.ValidationTypes.Capital">
            <summary>
            纯大写
            <para>
            表达式：^[A-Z]+$
            </para>
            </summary>
        </member>
        <member name="F:Fast.Core.DataValidation.Enums.ValidationTypes.Lowercase">
            <summary>
            纯小写
            <para>
            表达式：^[a-z]+$
            </para>
            </summary>
        </member>
        <member name="F:Fast.Core.DataValidation.Enums.ValidationTypes.Ascii">
            <summary>
            ASCII 编码
            <para>
            表达式：^[\x00-\xFF]+$
            </para>
            </summary>
        </member>
        <member name="F:Fast.Core.DataValidation.Enums.ValidationTypes.Md5">
            <summary>
            MD5 加密字符串
            <para>
            表达式：^([a-fA-F0-9]{32})$
            </para>
            </summary>
        </member>
        <member name="F:Fast.Core.DataValidation.Enums.ValidationTypes.Zip">
            <summary>
            压缩文件格式
            <para>
            表达式：(.*)\.(rar|zip|7zip|tgz)$
            </para>
            </summary>
        </member>
        <member name="F:Fast.Core.DataValidation.Enums.ValidationTypes.Image">
            <summary>
            图片格式
            <para>
            表达式：(.*)\.(jpg|gif|ico|jpeg|png)$
            </para>
            </summary>
        </member>
        <member name="F:Fast.Core.DataValidation.Enums.ValidationTypes.Document">
            <summary>
            文档格式
            <para>
            表达式：(.*)\.(doc|xls|docx|xlsx|pdf|md)$
            </para>
            </summary>
        </member>
        <member name="F:Fast.Core.DataValidation.Enums.ValidationTypes.Mp3">
            <summary>
            MP3 格式
            <para>
            表达式：(.*)\.(mp3)$
            </para>
            </summary>
        </member>
        <member name="F:Fast.Core.DataValidation.Enums.ValidationTypes.Flash">
            <summary>
            Flash 格式
            <para>
            表达式：(.*)\.(swf|fla|flv)$
            </para>
            </summary>
        </member>
        <member name="F:Fast.Core.DataValidation.Enums.ValidationTypes.Video">
            <summary>
            视频文件格式
            <para>
            表达式：(.*)\.(rm|rmvb|wmv|avi|mp4|3gp|mkv)$
            </para>
            </summary>
        </member>
        <member name="F:Fast.Core.DataValidation.Enums.ValidationTypes.WordWithNumber">
            <summary>
            字母加数字组合
            <para>
            表达式：^(?![0-9]+$)(?![a-zA-Z]+$)[0-9A-Za-z]*$
            </para>
            </summary>
        </member>
        <member name="F:Fast.Core.DataValidation.Enums.ValidationTypes.Html">
            <summary>
            Html 标签格式
            <para>
            表达式：lt(\w+)[^gt]*>(.*?lt\/\1gt)?
            </para>
            </summary>
        </member>
        <member name="F:Fast.Core.DataValidation.Enums.ValidationTypes.IMEI">
            <summary>
            手机机身码
            </summary>
        </member>
        <member name="F:Fast.Core.DataValidation.Enums.ValidationTypes.SocialCreditCode">
            <summary>
            统一社会信用代码
            </summary>
        </member>
        <member name="F:Fast.Core.DataValidation.Enums.ValidationTypes.GUID_OR_UUID">
            <summary>
            GUID 或者 UUID
            </summary>
        </member>
        <member name="F:Fast.Core.DataValidation.Enums.ValidationTypes.Base64">
            <summary>
            base64 格式
            </summary>
        </member>
        <member name="T:Fast.Core.DataValidation.Extensions.DataValidationExtensions">
            <summary>
            数据验证拓展类
            </summary>
        </member>
        <member name="M:Fast.Core.DataValidation.Extensions.DataValidationExtensions.TryValidate(System.Object,System.Boolean)">
            <summary>
            拓展方法，验证类类型对象
            </summary>
            <param name="obj">对象实例</param>
            <param name="validateAllProperties">是否验证所有属性</param>
            <returns>验证结果</returns>
        </member>
        <member name="M:Fast.Core.DataValidation.Extensions.DataValidationExtensions.TryValidate(System.Object,System.ComponentModel.DataAnnotations.ValidationAttribute[])">
            <summary>
            拓展方法，验证单个值
            </summary>
            <param name="value">单个值</param>
            <param name="validationAttributes">验证特性</param>
            <returns></returns>
        </member>
        <member name="M:Fast.Core.DataValidation.Extensions.DataValidationExtensions.TryValidate(System.Object,System.Object[])">
            <summary>
            拓展方法，验证单个值
            </summary>
            <param name="value">单个值</param>
            <param name="validationTypes">验证类型</param>
            <returns></returns>
        </member>
        <member name="M:Fast.Core.DataValidation.Extensions.DataValidationExtensions.TryValidate(System.Object,Fast.Core.DataValidation.Enums.ValidationPattern,System.Object[])">
            <summary>
            拓展方法，验证单个值
            </summary>
            <param name="value">单个值</param>
            <param name="validationOptionss">验证逻辑</param>
            <param name="validationTypes">验证类型</param>
            <returns></returns>
        </member>
        <member name="M:Fast.Core.DataValidation.Extensions.DataValidationExtensions.Validate(System.Object,System.Boolean)">
            <summary>
            拓展方法，验证类类型对象
            </summary>
            <param name="obj">对象实例</param>
            <param name="validateAllProperties">是否验证所有属性</param>
        </member>
        <member name="M:Fast.Core.DataValidation.Extensions.DataValidationExtensions.Validate(System.Object,System.ComponentModel.DataAnnotations.ValidationAttribute[])">
            <summary>
            拓展方法，验证单个值
            </summary>
            <param name="value">单个值</param>
            <param name="validationAttributes">验证特性</param>
        </member>
        <member name="M:Fast.Core.DataValidation.Extensions.DataValidationExtensions.Validate(System.Object,System.Object[])">
            <summary>
            拓展方法，验证单个值
            </summary>
            <param name="value">单个值</param>
            <param name="validationTypes">验证类型</param>
        </member>
        <member name="M:Fast.Core.DataValidation.Extensions.DataValidationExtensions.Validate(System.Object,Fast.Core.DataValidation.Enums.ValidationPattern,System.Object[])">
            <summary>
            拓展方法，验证单个值
            </summary>
            <param name="value">单个值</param>
            <param name="validationOptionss">验证逻辑</param>
            <param name="validationTypes">验证类型</param>
        </member>
        <member name="M:Fast.Core.DataValidation.Extensions.DataValidationExtensions.TryValidate(System.Object,System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            拓展方法，验证单个值
            </summary>
            <param name="value">单个值</param>
            <param name="regexPattern">正则表达式</param>
            <param name="regexOptions">正则表达式选项</param>
            <returns></returns>
        </member>
        <member name="M:Fast.Core.DataValidation.Extensions.DataValidationExtensions.ThrowValidateFailedModel(Fast.Core.DataValidation.Internal.DataValidationResult)">
            <summary>
            直接抛出异常信息
            </summary>
            <param name="dataValidationResult"></param>
        </member>
        <member name="T:Fast.Core.DataValidation.Extensions.DataValidationServiceCollectionExtensions">
            <summary>
            友好异常服务拓展类
            </summary>
        </member>
        <member name="M:Fast.Core.DataValidation.Extensions.DataValidationServiceCollectionExtensions.AddDataValidation``1(Microsoft.Extensions.DependencyInjection.IMvcBuilder,System.Action{Fast.Core.DataValidation.Extensions.Options.DataValidationOptions})">
            <summary>
            添加全局数据验证
            </summary>
            <typeparam name="TValidationMessageTypeProvider">验证类型消息提供器</typeparam>
            <param name="mvcBuilder"></param>
            <param name="configure"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Core.DataValidation.Extensions.DataValidationServiceCollectionExtensions.AddDataValidation``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Fast.Core.DataValidation.Extensions.Options.DataValidationOptions})">
            <summary>
            添加全局数据验证
            </summary>
            <typeparam name="TValidationMessageTypeProvider">验证类型消息提供器</typeparam>
            <param name="services"></param>
            <param name="configure"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Core.DataValidation.Extensions.DataValidationServiceCollectionExtensions.AddDataValidation(Microsoft.Extensions.DependencyInjection.IMvcBuilder,System.Action{Fast.Core.DataValidation.Extensions.Options.DataValidationOptions})">
            <summary>
            添加全局数据验证
            </summary>
            <param name="mvcBuilder"></param>
            <param name="configure"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Core.DataValidation.Extensions.DataValidationServiceCollectionExtensions.AddDataValidation(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Fast.Core.DataValidation.Extensions.Options.DataValidationOptions})">
            <summary>
            添加全局数据验证
            </summary>
            <param name="services"></param>
            <param name="configure"></param>
            <returns></returns>
        </member>
        <member name="T:Fast.Core.DataValidation.Extensions.Options.DataValidationOptions">
            <summary>
            AddInject 数据验证配置选项
            </summary>
        </member>
        <member name="P:Fast.Core.DataValidation.Extensions.Options.DataValidationOptions.GlobalEnabled">
            <summary>
            启用全局数据验证
            </summary>
        </member>
        <member name="P:Fast.Core.DataValidation.Extensions.Options.DataValidationOptions.SuppressImplicitRequiredAttributeForNonNullableReferenceTypes">
            <summary>
            禁止C# 8.0 验证非可空引用类型
            </summary>
        </member>
        <member name="P:Fast.Core.DataValidation.Extensions.Options.DataValidationOptions.SuppressModelStateInvalidFilter">
            <summary>
            是否禁用模型验证过滤器
            </summary>
            <remarks>只会改变启用全局验证的情况，也就是 <see cref="P:Fast.Core.DataValidation.Extensions.Options.DataValidationOptions.GlobalEnabled"/> 为 true 的情况</remarks>
        </member>
        <member name="P:Fast.Core.DataValidation.Extensions.Options.DataValidationOptions.SuppressMapClientErrors">
            <summary>
            是否禁用映射异常
            </summary>
        </member>
        <member name="T:Fast.Core.DataValidation.Filters.DataValidationFilter">
            <summary>
            数据验证拦截器
            </summary>
        </member>
        <member name="F:Fast.Core.DataValidation.Filters.DataValidationFilter._apiBehaviorOptions">
            <summary>
            Api 行为配置选项
            </summary>
        </member>
        <member name="M:Fast.Core.DataValidation.Filters.DataValidationFilter.#ctor(Microsoft.Extensions.Options.IOptions{Microsoft.AspNetCore.Mvc.ApiBehaviorOptions})">
            <summary>
            构造函数
            </summary>
            <param name="options"></param>
        </member>
        <member name="F:Fast.Core.DataValidation.Filters.DataValidationFilter.FilterOrder">
            <summary>
            过滤器排序
            </summary>
        </member>
        <member name="P:Fast.Core.DataValidation.Filters.DataValidationFilter.Order">
            <summary>
            排序属性
            </summary>
        </member>
        <member name="P:Fast.Core.DataValidation.Filters.DataValidationFilter.IsReusable">
            <summary>
            是否是可重复使用的
            </summary>
        </member>
        <member name="M:Fast.Core.DataValidation.Filters.DataValidationFilter.OnActionExecutionAsync(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext,Microsoft.AspNetCore.Mvc.Filters.ActionExecutionDelegate)">
            <summary>
            拦截请求
            </summary>
            <param name="context">动作方法上下文</param>
            <param name="next">中间件委托</param>
            <returns></returns>
        </member>
        <member name="M:Fast.Core.DataValidation.Filters.DataValidationFilter.CallUnHandleResult(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext,Microsoft.AspNetCore.Mvc.Filters.ActionExecutionDelegate,Microsoft.AspNetCore.Mvc.Controllers.ControllerActionDescriptor,System.Reflection.MethodInfo)">
            <summary>
            调用未处理的结果类型
            </summary>
            <param name="context"></param>
            <param name="next"></param>
            <param name="actionDescriptor"></param>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Core.DataValidation.Filters.DataValidationFilter.HandleValidation(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext,System.Reflection.MethodInfo,Microsoft.AspNetCore.Mvc.Controllers.ControllerActionDescriptor,System.Object,Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext,Fast.Core.FriendlyException.Exceptions.AppFriendlyException)">
            <summary>
            内部处理异常
            </summary>
            <param name="context"></param>
            <param name="method"></param>
            <param name="actionDescriptor"></param>
            <param name="errors"></param>
            <param name="resultContext"></param>
            <param name="friendlyException"></param>
            <returns>返回 false 表示结果没有处理</returns>
        </member>
        <member name="T:Fast.Core.DataValidation.Filters.DataValidationPageFilter">
            <summary>
            数据验证拦截器（Razor Pages）
            </summary>
        </member>
        <member name="F:Fast.Core.DataValidation.Filters.DataValidationPageFilter._apiBehaviorOptions">
            <summary>
            Api 行为配置选项
            </summary>
        </member>
        <member name="M:Fast.Core.DataValidation.Filters.DataValidationPageFilter.#ctor(Microsoft.Extensions.Options.IOptions{Microsoft.AspNetCore.Mvc.ApiBehaviorOptions})">
            <summary>
            构造函数
            </summary>
            <param name="options"></param>
        </member>
        <member name="F:Fast.Core.DataValidation.Filters.DataValidationPageFilter.FilterOrder">
            <summary>
            过滤器排序
            </summary>
        </member>
        <member name="P:Fast.Core.DataValidation.Filters.DataValidationPageFilter.Order">
            <summary>
            排序属性
            </summary>
        </member>
        <member name="P:Fast.Core.DataValidation.Filters.DataValidationPageFilter.IsReusable">
            <summary>
            是否是可重复使用的
            </summary>
        </member>
        <member name="M:Fast.Core.DataValidation.Filters.DataValidationPageFilter.OnPageHandlerSelectionAsync(Microsoft.AspNetCore.Mvc.Filters.PageHandlerSelectedContext)">
            <summary>
            模型绑定拦截
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Core.DataValidation.Filters.DataValidationPageFilter.OnPageHandlerExecutionAsync(Microsoft.AspNetCore.Mvc.Filters.PageHandlerExecutingContext,Microsoft.AspNetCore.Mvc.Filters.PageHandlerExecutionDelegate)">
            <summary>
            拦截请求
            </summary>
            <param name="context"></param>
            <param name="next"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Core.DataValidation.Filters.DataValidationPageFilter.CallUnHandleResult(Microsoft.AspNetCore.Mvc.Filters.PageHandlerExecutingContext,Microsoft.AspNetCore.Mvc.Filters.PageHandlerExecutionDelegate)">
            <summary>
            调用未处理的结果类型
            </summary>
            <param name="context"></param>
            <param name="next"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Core.DataValidation.Filters.DataValidationPageFilter.HandleValidation(Microsoft.AspNetCore.Mvc.Filters.PageHandlerExecutingContext,System.Object,Microsoft.AspNetCore.Mvc.Filters.PageHandlerExecutedContext,Fast.Core.FriendlyException.Exceptions.AppFriendlyException)">
            <summary>
            内部处理异常
            </summary>
            <param name="context"></param>
            <param name="errors"></param>
            <param name="resultContext"></param>
            <param name="friendlyException"></param>
            <returns>返回 false 表示结果没有处理</returns>
        </member>
        <member name="T:Fast.Core.DataValidation.Internal.DataValidationResult">
            <summary>
            数据验证结果
            </summary>
        </member>
        <member name="P:Fast.Core.DataValidation.Internal.DataValidationResult.IsValid">
            <summary>
            验证状态
            </summary>
        </member>
        <member name="P:Fast.Core.DataValidation.Internal.DataValidationResult.ValidationResults">
            <summary>
            验证结果
            </summary>
        </member>
        <member name="P:Fast.Core.DataValidation.Internal.DataValidationResult.MemberOrValue">
            <summary>
            成员或值
            </summary>
        </member>
        <member name="T:Fast.Core.DataValidation.Internal.ValidationMetadata">
            <summary>
            验证信息元数据
            </summary>
        </member>
        <member name="P:Fast.Core.DataValidation.Internal.ValidationMetadata.ValidationResult">
            <summary>
            验证结果
            </summary>
            <remarks>返回字典或字符串类型</remarks>
        </member>
        <member name="P:Fast.Core.DataValidation.Internal.ValidationMetadata.Message">
            <summary>
            异常消息
            </summary>
        </member>
        <member name="P:Fast.Core.DataValidation.Internal.ValidationMetadata.ModelState">
            <summary>
            验证状态
            </summary>
        </member>
        <member name="P:Fast.Core.DataValidation.Internal.ValidationMetadata.ErrorCode">
            <summary>
            错误码
            </summary>
        </member>
        <member name="P:Fast.Core.DataValidation.Internal.ValidationMetadata.OriginErrorCode">
            <summary>
            错误码（没被复写过的 ErrorCode ）
            </summary>
        </member>
        <member name="P:Fast.Core.DataValidation.Internal.ValidationMetadata.StatusCode">
            <summary>
            状态码
            </summary>
        </member>
        <member name="P:Fast.Core.DataValidation.Internal.ValidationMetadata.FirstErrorProperty">
            <summary>
            首个错误属性
            </summary>
        </member>
        <member name="P:Fast.Core.DataValidation.Internal.ValidationMetadata.FirstErrorMessage">
            <summary>
            首个错误消息
            </summary>
        </member>
        <member name="P:Fast.Core.DataValidation.Internal.ValidationMetadata.Data">
            <summary>
            额外数据
            </summary>
        </member>
        <member name="T:Fast.Core.DataValidation.Options.ValidationTypeMessageSettingsOptions">
            <summary>
            验证消息配置选项
            </summary>
        </member>
        <member name="P:Fast.Core.DataValidation.Options.ValidationTypeMessageSettingsOptions.Definitions">
            <summary>
            验证消息配置表
            </summary>
        </member>
        <member name="T:Fast.Core.DataValidation.Providers.IValidationMessageTypeProvider">
            <summary>
            验证消息类型提供器
            </summary>
        </member>
        <member name="P:Fast.Core.DataValidation.Providers.IValidationMessageTypeProvider.Definitions">
            <summary>
            验证消息类型定义
            </summary>
        </member>
        <member name="T:Fast.Core.DataValidation.ValidatorContext">
            <summary>
            验证上下文
            </summary>
        </member>
        <member name="M:Fast.Core.DataValidation.ValidatorContext.GetValidationMetadata(System.Object)">
            <summary>
            获取验证错误信息
            </summary>
            <param name="errors"></param>
            <returns></returns>
        </member>
        <member name="T:Fast.Core.DataValidation.Validators.DataValidator">
            <summary>
            数据验证器
            </summary>
        </member>
        <member name="F:Fast.Core.DataValidation.Validators.DataValidator.ValidationTypes">
            <summary>
            所有验证类型
            </summary>
        </member>
        <member name="F:Fast.Core.DataValidation.Validators.DataValidator.ValidationMessageTypes">
            <summary>
            所有验证类型
            </summary>
        </member>
        <member name="F:Fast.Core.DataValidation.Validators.DataValidator.ValidationItemMetadatas">
            <summary>
            验证类型正则表达式
            </summary>
        </member>
        <member name="M:Fast.Core.DataValidation.Validators.DataValidator.#cctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Fast.Core.DataValidation.Validators.DataValidator.TryValidateObject(System.Object,System.Boolean)">
            <summary>
            验证类类型对象
            </summary>
            <param name="obj">对象实例</param>
            <param name="validateAllProperties">是否验证所有属性</param>
            <returns>验证结果</returns>
        </member>
        <member name="M:Fast.Core.DataValidation.Validators.DataValidator.TryValidateValue(System.Object,System.ComponentModel.DataAnnotations.ValidationAttribute[])">
            <summary>
            验证单个值
            </summary>
            <param name="value">单个值</param>
            <param name="validationAttributes">验证特性</param>
            <returns></returns>
        </member>
        <member name="M:Fast.Core.DataValidation.Validators.DataValidator.TryValidateValue(System.Object,System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            正则表达式验证
            </summary>
            <param name="value"></param>
            <param name="regexPattern"></param>
            <param name="regexOptions">正则表达式选项</param>
            <returns></returns>
        </member>
        <member name="M:Fast.Core.DataValidation.Validators.DataValidator.TryValidateValue(System.Object,System.Object[])">
            <summary>
            验证类型验证
            </summary>
            <param name="value"></param>
            <param name="validationTypes"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Core.DataValidation.Validators.DataValidator.TryValidateValue(System.Object,Fast.Core.DataValidation.Enums.ValidationPattern,System.Object[])">
            <summary>
            验证类型验证
            </summary>
            <param name="value"></param>
            <param name="validationOptionss">验证方式</param>
            <param name="validationTypes"></param>
            <returns></returns>
        </member>
        <member name="F:Fast.Core.DataValidation.Validators.DataValidator.GetValidationTypeValidationItemMetadataCached">
            <summary>
            获取验证类型验证Item集合
            </summary>
        </member>
        <member name="M:Fast.Core.DataValidation.Validators.DataValidator.GetValidationTypeValidationItemMetadata(System.Object)">
            <summary>
            获取验证类型正则表达式（需要缓存）
            </summary>
            <param name="validationType"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Core.DataValidation.Validators.DataValidator.GetValidationTypes">
            <summary>
            获取所有验证类型
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fast.Core.DataValidation.Validators.DataValidator.GetValidationMessageTypes">
            <summary>
            获取所有验证消息类型
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fast.Core.DataValidation.Validators.DataValidator.GetValidationValidationItemMetadatas">
            <summary>
            获取验证类型所有有效的正则表达式
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fast.Core.DataValidation.Validators.DataValidator.ReplaceValidateErrorMessage(System.String,System.Reflection.FieldInfo,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            替换默认验证失败消息
            </summary>
            <param name="name">验证唯一名称</param>
            <param name="field"></param>
            <param name="customErrorMessages"></param>
        </member>
        <member name="T:Fast.Core.DependencyInjection.Dependencies.IDependency">
            <summary>
            依赖关系接口
            </summary>
        </member>
        <member name="T:Fast.Core.DependencyInjection.Dependencies.IScopedDependency">
            <summary>
            作用域服务注册依赖
            </summary>
        </member>
        <member name="T:Fast.Core.DependencyInjection.Dependencies.ISingletonDependency">
            <summary>
            单例服务注册依赖
            </summary>
        </member>
        <member name="T:Fast.Core.DependencyInjection.Dependencies.ITransientDependency">
            <summary>
            瞬时服务注册依赖
            </summary>
        </member>
        <member name="T:Fast.Core.DependencyInjection.Extensions.DependencyInjectionExtension">
            <summary>
            <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/> 依赖注入拓展类
            </summary>
        </member>
        <member name="F:Fast.Core.DependencyInjection.Extensions.DependencyInjectionExtension.TypeNamedCollection">
            <summary>
            类型名称集合
            </summary>
        </member>
        <member name="M:Fast.Core.DependencyInjection.Extensions.DependencyInjectionExtension.AddInnerDependencyInjection(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            添加扫描注入
            </summary>
            <param name="services"><see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/></param>
            <returns><see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/></returns>
        </member>
        <member name="M:Fast.Core.DependencyInjection.Extensions.DependencyInjectionExtension.RegisterService(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Type,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            注册服务
            </summary>
            <param name="services">服务集合</param>
            <param name="dependencyType"></param>
            <param name="type">类型</param>
            <param name="canInjectInterfaces">能被注册的接口</param>
        </member>
        <member name="M:Fast.Core.DependencyInjection.Extensions.DependencyInjectionExtension.Register(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Type,System.Type)">
            <summary>
            注册类型
            </summary>
            <param name="services">服务</param>
            <param name="dependencyType"></param>
            <param name="type">类型</param>
            <param name="inter">接口</param>
        </member>
        <member name="M:Fast.Core.DependencyInjection.Extensions.DependencyInjectionExtension.AddDispatchProxy(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Type,System.Type)">
            <summary>
            创建服务代理
            </summary>
            <param name="services">服务集合</param>
            <param name="dependencyType"></param>
            <param name="type">拦截的类型</param>
            <param name="inter">代理接口</param>
        </member>
        <member name="M:Fast.Core.DependencyInjection.Extensions.DependencyInjectionExtension.FixedGenericType(System.Type)">
            <summary>
            修复泛型类型注册类型问题
            </summary>
            <param name="type">类型</param>
            <returns></returns>
        </member>
        <member name="M:Fast.Core.DependencyInjection.Extensions.DependencyInjectionExtension.RegisterNamedService``1(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            注册命名服务（接口多实现）
            </summary>
            <typeparam name="TDependency"></typeparam>
            <param name="services"></param>
        </member>
        <member name="M:Fast.Core.DependencyInjection.Extensions.DependencyInjectionExtension.TryGetServiceLifetime(System.Type)">
            <summary>
            根据依赖接口类型解析 ServiceLifetime 对象
            </summary>
            <param name="dependencyType"></param>
            <returns></returns>
        </member>
        <member name="T:Fast.Core.DependencyInjection.Scoped">
            <summary>
            创建作用域静态类
            </summary>
        </member>
        <member name="M:Fast.Core.DependencyInjection.Scoped.Create(System.Action{Microsoft.Extensions.DependencyInjection.IServiceScopeFactory,Microsoft.Extensions.DependencyInjection.IServiceScope},Microsoft.Extensions.DependencyInjection.IServiceScopeFactory)">
            <summary>
            创建一个作用域范围
            </summary>
            <param name="handler"></param>
            <param name="scopeFactory"></param>
        </member>
        <member name="M:Fast.Core.DependencyInjection.Scoped.CreateAsync(System.Func{Microsoft.Extensions.DependencyInjection.IServiceScopeFactory,Microsoft.Extensions.DependencyInjection.IServiceScope,System.Threading.Tasks.Task},Microsoft.Extensions.DependencyInjection.IServiceScopeFactory)">
            <summary>
            创建一个作用域范围（异步）
            </summary>
            <param name="handler"></param>
            <param name="scopeFactory"></param>
        </member>
        <member name="M:Fast.Core.DependencyInjection.Scoped.CreateScope(Microsoft.Extensions.DependencyInjection.IServiceScopeFactory@)">
            <summary>
            创建一个作用域
            </summary>
            <param name="scopeFactory"></param>
            <returns></returns>
        </member>
        <member name="T:Fast.Core.Diagnostics.Debugging">
            <summary>
            向事件管理器中输出事件信息
            </summary>
        </member>
        <member name="M:Fast.Core.Diagnostics.Debugging.WriteLine(System.Int32,System.String)">
            <summary>
            输出一行事件信息
            </summary>
            <param name="level">
            <para>信息级别</para>
            <list type="number">
            <item>
            <description>跟踪</description>
            </item>
            <item>
            <description>信息</description>
            </item>
            <item>
            <description>警告</description>
            </item>
            <item>
            <description>错误</description>
            </item>
            <item>
            <description>文件</description>
            </item>
            <item>
            <description>提示</description>
            </item>
            <item>
            <description>搜索</description>
            </item>
            <item>
            <description>时钟</description>
            </item>
            </list>
            </param>
            <param name="message">事件信息</param>
        </member>
        <member name="M:Fast.Core.Diagnostics.Debugging.WriteLine(System.Int32,System.String,System.Object[])">
            <summary>
            输出一行事件信息
            </summary>
            <param name="level">
            <para>信息级别</para>
            <list type="number">
            <item>
            <description>跟踪</description>
            </item>
            <item>
            <description>信息</description>
            </item>
            <item>
            <description>警告</description>
            </item>
            <item>
            <description>错误</description>
            </item>
            <item>
            <description>文件</description>
            </item>
            <item>
            <description>提示</description>
            </item>
            <item>
            <description>搜索</description>
            </item>
            <item>
            <description>时钟</description>
            </item>
            </list>
            </param>
            <param name="message">事件信息</param>
            <param name="args">格式化参数</param>
        </member>
        <member name="M:Fast.Core.Diagnostics.Debugging.Trace(System.String)">
            <summary>
            输出跟踪级别事件信息
            </summary>
            <param name="message">事件信息</param>
        </member>
        <member name="M:Fast.Core.Diagnostics.Debugging.Trace(System.String,System.Object[])">
            <summary>
            输出跟踪级别事件信息
            </summary>
            <param name="message">事件信息</param>
            <param name="args">格式化参数</param>
        </member>
        <member name="M:Fast.Core.Diagnostics.Debugging.Info(System.String)">
            <summary>
            输出信息级别事件信息
            </summary>
            <param name="message">事件信息</param>
        </member>
        <member name="M:Fast.Core.Diagnostics.Debugging.Info(System.String,System.Object[])">
            <summary>
            输出信息级别事件信息
            </summary>
            <param name="message">事件信息</param>
            <param name="args">格式化参数</param>
        </member>
        <member name="M:Fast.Core.Diagnostics.Debugging.Warn(System.String)">
            <summary>
            输出警告级别事件信息
            </summary>
            <param name="message">事件信息</param>
        </member>
        <member name="M:Fast.Core.Diagnostics.Debugging.Warn(System.String,System.Object[])">
            <summary>
            输出警告级别事件信息
            </summary>
            <param name="message">事件信息</param>
            <param name="args">格式化参数</param>
        </member>
        <member name="M:Fast.Core.Diagnostics.Debugging.Error(System.String)">
            <summary>
            输出错误级别事件信息
            </summary>
            <param name="message">事件信息</param>
        </member>
        <member name="M:Fast.Core.Diagnostics.Debugging.Error(System.String,System.Object[])">
            <summary>
            输出错误级别事件信息
            </summary>
            <param name="message">事件信息</param>
            <param name="args">格式化参数</param>
        </member>
        <member name="M:Fast.Core.Diagnostics.Debugging.File(System.String)">
            <summary>
            输出文件级别事件信息
            </summary>
            <param name="message">事件信息</param>
        </member>
        <member name="M:Fast.Core.Diagnostics.Debugging.File(System.String,System.Object[])">
            <summary>
            输出文件级别事件信息
            </summary>
            <param name="message">事件信息</param>
            <param name="args">格式化参数</param>
        </member>
        <member name="M:Fast.Core.Diagnostics.Debugging.Tip(System.String)">
            <summary>
            输出提示级别事件信息
            </summary>
            <param name="message">事件信息</param>
        </member>
        <member name="M:Fast.Core.Diagnostics.Debugging.Tip(System.String,System.Object[])">
            <summary>
            输出提示级别事件信息
            </summary>
            <param name="message">事件信息</param>
            <param name="args">格式化参数</param>
        </member>
        <member name="M:Fast.Core.Diagnostics.Debugging.Search(System.String)">
            <summary>
            输出搜索级别事件信息
            </summary>
            <param name="message">事件信息</param>
        </member>
        <member name="M:Fast.Core.Diagnostics.Debugging.Search(System.String,System.Object[])">
            <summary>
            输出搜索级别事件信息
            </summary>
            <param name="message">事件信息</param>
            <param name="args">格式化参数</param>
        </member>
        <member name="M:Fast.Core.Diagnostics.Debugging.Clock(System.String)">
            <summary>
            输出时钟级别事件信息
            </summary>
            <param name="message">事件信息</param>
        </member>
        <member name="M:Fast.Core.Diagnostics.Debugging.Clock(System.String,System.Object[])">
            <summary>
            输出时钟级别事件信息
            </summary>
            <param name="message">事件信息</param>
            <param name="args">格式化参数</param>
        </member>
        <member name="M:Fast.Core.Diagnostics.Debugging.GetLevelEmoji(System.Int32)">
            <summary>
            获取信息级别对应的 emoji
            </summary>
            <param name="level">
            <para>信息级别</para>
            <list type="number">
            <item>
            <description>跟踪</description>
            </item>
            <item>
            <description>信息</description>
            </item>
            <item>
            <description>警告</description>
            </item>
            <item>
            <description>错误</description>
            </item>
            <item>
            <description>文件</description>
            </item>
            <item>
            <description>提示</description>
            </item>
            <item>
            <description>搜索</description>
            </item>
            <item>
            <description>时钟</description>
            </item>
            </list>
            </param>
            <returns><see cref="T:System.String"/></returns>
        </member>
        <member name="T:Fast.Core.DynamicApiController.Attributes.ApiDescriptionSettingsAttribute">
            <summary>
            接口描述设置
            </summary>
        </member>
        <member name="M:Fast.Core.DynamicApiController.Attributes.ApiDescriptionSettingsAttribute.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Fast.Core.DynamicApiController.Attributes.ApiDescriptionSettingsAttribute.#ctor(System.Boolean)">
            <summary>
            构造函数
            </summary>
            <param name="enabled">是否启用</param>
        </member>
        <member name="M:Fast.Core.DynamicApiController.Attributes.ApiDescriptionSettingsAttribute.#ctor(System.String[])">
            <summary>
            构造函数
            </summary>
            <param name="groups">分组列表</param>
        </member>
        <member name="P:Fast.Core.DynamicApiController.Attributes.ApiDescriptionSettingsAttribute.Name">
            <summary>
            自定义名称
            </summary>
        </member>
        <member name="P:Fast.Core.DynamicApiController.Attributes.ApiDescriptionSettingsAttribute.KeepName">
            <summary>
            保留原有名称（Boolean 类型）
            </summary>
        </member>
        <member name="P:Fast.Core.DynamicApiController.Attributes.ApiDescriptionSettingsAttribute.SplitCamelCase">
            <summary>
            切割骆驼命名（Boolean 类型）
            </summary>
        </member>
        <member name="P:Fast.Core.DynamicApiController.Attributes.ApiDescriptionSettingsAttribute.AsLowerCamelCase">
            <summary>
            小驼峰命名（首字符小写）
            </summary>
        </member>
        <member name="P:Fast.Core.DynamicApiController.Attributes.ApiDescriptionSettingsAttribute.KeepVerb">
            <summary>
            保留路由谓词（Boolean 类型）
            </summary>
        </member>
        <member name="P:Fast.Core.DynamicApiController.Attributes.ApiDescriptionSettingsAttribute.LowercaseRoute">
            <summary>
            小写路由（Boolean 类型）
            </summary>
        </member>
        <member name="P:Fast.Core.DynamicApiController.Attributes.ApiDescriptionSettingsAttribute.Module">
            <summary>
            模块名
            </summary>
        </member>
        <member name="P:Fast.Core.DynamicApiController.Attributes.ApiDescriptionSettingsAttribute.Version">
            <summary>
            版本号
            </summary>
        </member>
        <member name="P:Fast.Core.DynamicApiController.Attributes.ApiDescriptionSettingsAttribute.Groups">
            <summary>
            分组
            </summary>
        </member>
        <member name="P:Fast.Core.DynamicApiController.Attributes.ApiDescriptionSettingsAttribute.Tag">
            <summary>
            标签
            </summary>
        </member>
        <member name="P:Fast.Core.DynamicApiController.Attributes.ApiDescriptionSettingsAttribute.Order">
            <summary>
            排序
            </summary>
        </member>
        <member name="P:Fast.Core.DynamicApiController.Attributes.ApiDescriptionSettingsAttribute.Area">
            <summary>
            配置控制器区域（只对控制器有效）
            </summary>
        </member>
        <member name="P:Fast.Core.DynamicApiController.Attributes.ApiDescriptionSettingsAttribute.Description">
            <summary>
            额外描述，支持 HTML
            </summary>
        </member>
        <member name="P:Fast.Core.DynamicApiController.Attributes.ApiDescriptionSettingsAttribute.ForceWithRoutePrefix">
            <summary>
            强制携带路由前缀，即使使用 [Route] 重写，仅对 Class/Controller 有效
            </summary>
        </member>
        <member name="T:Fast.Core.DynamicApiController.Attributes.ApiSeatAttribute">
            <summary>
            接口参数位置设置
            </summary>
        </member>
        <member name="M:Fast.Core.DynamicApiController.Attributes.ApiSeatAttribute.#ctor(Fast.Core.DynamicApiController.Enums.ApiSeats)">
            <summary>
            构造函数
            </summary>
            <param name="seat"></param>
        </member>
        <member name="P:Fast.Core.DynamicApiController.Attributes.ApiSeatAttribute.Seat">
            <summary>
            参数位置
            </summary>
        </member>
        <member name="T:Fast.Core.DynamicApiController.Attributes.DynamicApiControllerAttribute">
            <summary>
            动态 WebApi 特性
            </summary>
        </member>
        <member name="T:Fast.Core.DynamicApiController.Attributes.QueryParametersAttribute">
            <summary>
            将 Action 所有参数 [FromQuery] 化
            </summary>
        </member>
        <member name="M:Fast.Core.DynamicApiController.Attributes.QueryParametersAttribute.#ctor">
            <summary>
            默认构造函数
            </summary>
        </member>
        <member name="T:Fast.Core.DynamicApiController.Attributes.RouteConstraintAttribute">
            <summary>
            接口参数约束
            </summary>
        </member>
        <member name="M:Fast.Core.DynamicApiController.Attributes.RouteConstraintAttribute.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="constraint"></param>
        </member>
        <member name="P:Fast.Core.DynamicApiController.Attributes.RouteConstraintAttribute.Constraint">
            <summary>
            约束表达式
            </summary>
        </member>
        <member name="T:Fast.Core.DynamicApiController.Conventions.DynamicApiControllerApplicationModelConvention">
            <summary>
            动态接口控制器应用模型转换器
            </summary>
        </member>
        <member name="F:Fast.Core.DynamicApiController.Conventions.DynamicApiControllerApplicationModelConvention._dynamicApiControllerSettings">
            <summary>
            动态接口控制器配置实例
            </summary>
        </member>
        <member name="F:Fast.Core.DynamicApiController.Conventions.DynamicApiControllerApplicationModelConvention._nameVersionRegex">
            <summary>
            带版本的名称正则表达式
            </summary>
        </member>
        <member name="F:Fast.Core.DynamicApiController.Conventions.DynamicApiControllerApplicationModelConvention._services">
            <summary>
            服务集合
            </summary>
        </member>
        <member name="F:Fast.Core.DynamicApiController.Conventions.DynamicApiControllerApplicationModelConvention.commonTemplatePattern">
            <summary>
            模板正则表达式
            </summary>
        </member>
        <member name="M:Fast.Core.DynamicApiController.Conventions.DynamicApiControllerApplicationModelConvention.#ctor(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            构造函数
            </summary>
            <param name="services">服务集合</param>
        </member>
        <member name="M:Fast.Core.DynamicApiController.Conventions.DynamicApiControllerApplicationModelConvention.Apply(Microsoft.AspNetCore.Mvc.ApplicationModels.ApplicationModel)">
            <summary>
            配置应用模型信息
            </summary>
            <param name="application">引用模型</param>
        </member>
        <member name="M:Fast.Core.DynamicApiController.Conventions.DynamicApiControllerApplicationModelConvention.ConfigureController(Microsoft.AspNetCore.Mvc.ApplicationModels.ControllerModel,Fast.Core.DynamicApiController.Attributes.ApiDescriptionSettingsAttribute)">
            <summary>
            配置控制器
            </summary>
            <param name="controller">控制器模型</param>
            <param name="controllerApiDescriptionSettings">接口描述配置</param>
        </member>
        <member name="M:Fast.Core.DynamicApiController.Conventions.DynamicApiControllerApplicationModelConvention.ConfigureControllerArea(Microsoft.AspNetCore.Mvc.ApplicationModels.ControllerModel,Fast.Core.DynamicApiController.Attributes.ApiDescriptionSettingsAttribute)">
            <summary>
            配置控制器区域
            </summary>
            <param name="controller"></param>
            <param name="controllerApiDescriptionSettings"></param>
        </member>
        <member name="M:Fast.Core.DynamicApiController.Conventions.DynamicApiControllerApplicationModelConvention.ConfigureControllerName(Microsoft.AspNetCore.Mvc.ApplicationModels.ControllerModel,Fast.Core.DynamicApiController.Attributes.ApiDescriptionSettingsAttribute)">
            <summary>
            配置控制器名称
            </summary>
            <param name="controller">控制器模型</param>
            <param name="controllerApiDescriptionSettings">接口描述配置</param>
        </member>
        <member name="P:Fast.Core.DynamicApiController.Conventions.DynamicApiControllerApplicationModelConvention.ForceWithDefaultPrefixRouteControllerTypes">
            <summary>
            强制处理了 ForceWithDefaultPrefix 的控制器
            </summary>
            <remarks>避免路由无限追加</remarks>
        </member>
        <member name="M:Fast.Core.DynamicApiController.Conventions.DynamicApiControllerApplicationModelConvention.ConfigureControllerRouteAttribute(Microsoft.AspNetCore.Mvc.ApplicationModels.ControllerModel,Fast.Core.DynamicApiController.Attributes.ApiDescriptionSettingsAttribute)">
            <summary>
            配置控制器路由特性
            </summary>
            <param name="controller"></param>
            <param name="controllerApiDescriptionSettings"></param>
        </member>
        <member name="M:Fast.Core.DynamicApiController.Conventions.DynamicApiControllerApplicationModelConvention.ConfigureAction(Microsoft.AspNetCore.Mvc.ApplicationModels.ActionModel,Fast.Core.DynamicApiController.Attributes.ApiDescriptionSettingsAttribute,Fast.Core.DynamicApiController.Attributes.ApiDescriptionSettingsAttribute,System.Boolean)">
            <summary>
            配置动作方法
            </summary>
            <param name="action">控制器模型</param>
            <param name="apiDescriptionSettings">接口描述配置</param>
            <param name="controllerApiDescriptionSettings">控制器接口描述配置</param>
            <param name="hasApiControllerAttribute">是否贴有 ApiController 特性</param>
        </member>
        <member name="M:Fast.Core.DynamicApiController.Conventions.DynamicApiControllerApplicationModelConvention.ConfigureActionApiExplorer(Microsoft.AspNetCore.Mvc.ApplicationModels.ActionModel)">
            <summary>
            配置动作方法接口可见性
            </summary>
            <param name="action">动作方法模型</param>
        </member>
        <member name="M:Fast.Core.DynamicApiController.Conventions.DynamicApiControllerApplicationModelConvention.ConfigureActionName(Microsoft.AspNetCore.Mvc.ApplicationModels.ActionModel,Fast.Core.DynamicApiController.Attributes.ApiDescriptionSettingsAttribute,Fast.Core.DynamicApiController.Attributes.ApiDescriptionSettingsAttribute)">
            <summary>
            配置动作方法名称
            </summary>
            <param name="action">动作方法模型</param>
            <param name="apiDescriptionSettings">接口描述配置</param>
            <param name="controllerApiDescriptionSettings"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Core.DynamicApiController.Conventions.DynamicApiControllerApplicationModelConvention.ConfigureActionHttpMethodAttribute(Microsoft.AspNetCore.Mvc.ApplicationModels.ActionModel)">
            <summary>
            配置动作方法请求谓词特性
            </summary>
            <param name="action">动作方法模型</param>
        </member>
        <member name="M:Fast.Core.DynamicApiController.Conventions.DynamicApiControllerApplicationModelConvention.ConfigureClassTypeParameter(Microsoft.AspNetCore.Mvc.ApplicationModels.ActionModel)">
            <summary>
            处理类类型参数（添加[FromBody] 特性）
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:Fast.Core.DynamicApiController.Conventions.DynamicApiControllerApplicationModelConvention.ConfigureActionRouteAttribute(Microsoft.AspNetCore.Mvc.ApplicationModels.ActionModel,Fast.Core.DynamicApiController.Attributes.ApiDescriptionSettingsAttribute,Fast.Core.DynamicApiController.Attributes.ApiDescriptionSettingsAttribute,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            配置动作方法路由特性
            </summary>
            <param name="action">动作方法模型</param>
            <param name="apiDescriptionSettings">接口描述配置</param>
            <param name="controllerApiDescriptionSettings">控制器接口描述配置</param>
            <param name="isLowercaseRoute"></param>
            <param name="isKeepName"></param>
            <param name="isLowerCamelCase"></param>
            <param name="hasApiControllerAttribute"></param>
        </member>
        <member name="M:Fast.Core.DynamicApiController.Conventions.DynamicApiControllerApplicationModelConvention.GenerateControllerRouteTemplate(Microsoft.AspNetCore.Mvc.ApplicationModels.ControllerModel,Fast.Core.DynamicApiController.Attributes.ApiDescriptionSettingsAttribute,Fast.Core.DynamicApiController.Internal.ParameterRouteTemplate)">
            <summary>
            生成控制器路由模板
            </summary>
            <param name="controller"></param>
            <param name="apiDescriptionSettings"></param>
            <param name="parameterRouteTemplate">参数路由模板</param>
            <returns></returns>
        </member>
        <member name="M:Fast.Core.DynamicApiController.Conventions.DynamicApiControllerApplicationModelConvention.GenerateParameterRouteTemplates(Microsoft.AspNetCore.Mvc.ApplicationModels.ActionModel,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            生成参数路由模板（非引用类型）
            </summary>
            <param name="action">动作方法模型</param>
            <param name="isLowercaseRoute"></param>
            <param name="isLowerCamelCase"></param>
            <param name="hasApiControllerAttribute"></param>
        </member>
        <member name="M:Fast.Core.DynamicApiController.Conventions.DynamicApiControllerApplicationModelConvention.ConfigureControllerAndActionName(Fast.Core.DynamicApiController.Attributes.ApiDescriptionSettingsAttribute,System.String,System.String[],System.Func{System.String,System.String},Fast.Core.DynamicApiController.Attributes.ApiDescriptionSettingsAttribute,System.String)">
            <summary>
            配置控制器和动作方法名称
            </summary>
            <param name="apiDescriptionSettings"></param>
            <param name="orignalName"></param>
            <param name="affixes"></param>
            <param name="configure"></param>
            <param name="controllerApiDescriptionSettings"></param>
            <param name="actionName">针对 [ActionName] 特性和 [HttpMethod] 特性处理</param>
            <returns></returns>
        </member>
        <member name="M:Fast.Core.DynamicApiController.Conventions.DynamicApiControllerApplicationModelConvention.CheckIsKeepName(Fast.Core.DynamicApiController.Attributes.ApiDescriptionSettingsAttribute,Fast.Core.DynamicApiController.Attributes.ApiDescriptionSettingsAttribute)">
            <summary>
            检查是否设置了 KeepName参数
            </summary>
            <param name="apiDescriptionSettings"></param>
            <param name="controllerApiDescriptionSettings"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Core.DynamicApiController.Conventions.DynamicApiControllerApplicationModelConvention.CheckIsKeepVerb(Fast.Core.DynamicApiController.Attributes.ApiDescriptionSettingsAttribute,Fast.Core.DynamicApiController.Attributes.ApiDescriptionSettingsAttribute)">
            <summary>
            检查是否设置了 KeepVerb 参数
            </summary>
            <param name="apiDescriptionSettings"></param>
            <param name="controllerApiDescriptionSettings"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Core.DynamicApiController.Conventions.DynamicApiControllerApplicationModelConvention.CheckIsForceWithDefaultRoute(Fast.Core.DynamicApiController.Attributes.ApiDescriptionSettingsAttribute)">
            <summary>
            检查是否设置了 ForceWithRoutePrefix  参数
            </summary>
            <param name="controllerApiDescriptionSettings"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Core.DynamicApiController.Conventions.DynamicApiControllerApplicationModelConvention.CheckIsLowerCamelCase(Fast.Core.DynamicApiController.Attributes.ApiDescriptionSettingsAttribute,Fast.Core.DynamicApiController.Attributes.ApiDescriptionSettingsAttribute)">
            <summary>
            检查是否设置了 AsLowerCamelCase 参数
            </summary>
            <param name="apiDescriptionSettings"></param>
            <param name="controllerApiDescriptionSettings"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Core.DynamicApiController.Conventions.DynamicApiControllerApplicationModelConvention.CheckIsSplitCamelCase(Fast.Core.DynamicApiController.Attributes.ApiDescriptionSettingsAttribute,Fast.Core.DynamicApiController.Attributes.ApiDescriptionSettingsAttribute)">
            <summary>
            判断切割命名参数是否配置
            </summary>
            <param name="apiDescriptionSettings"></param>
            <param name="controllerApiDescriptionSettings"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Core.DynamicApiController.Conventions.DynamicApiControllerApplicationModelConvention.CheckIsLowercaseRoute(Fast.Core.DynamicApiController.Attributes.ApiDescriptionSettingsAttribute,Fast.Core.DynamicApiController.Attributes.ApiDescriptionSettingsAttribute)">
            <summary>
            检查是否启用小写路由
            </summary>
            <param name="apiDescriptionSettings"></param>
            <param name="controllerApiDescriptionSettings"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Core.DynamicApiController.Conventions.DynamicApiControllerApplicationModelConvention.ConfigureActionUnifyResultAttribute(Microsoft.AspNetCore.Mvc.ApplicationModels.ActionModel)">
            <summary>
            配置规范化结果类型
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:Fast.Core.DynamicApiController.Conventions.DynamicApiControllerApplicationModelConvention.ResolveNameVersion(System.String)">
            <summary>
            解析名称中的版本号
            </summary>
            <param name="name">名称</param>
            <returns>名称和版本号</returns>
        </member>
        <member name="M:Fast.Core.DynamicApiController.Conventions.DynamicApiControllerApplicationModelConvention.LoadVerbToHttpMethodsConfigure">
            <summary>
            获取方法名映射 [HttpMethod] 规则
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fast.Core.DynamicApiController.Conventions.DynamicApiControllerApplicationModelConvention.HandleRouteTemplateRepeat(System.String)">
            <summary>
            处理路由模板重复参数
            </summary>
            <param name="template"></param>
            <returns></returns>
        </member>
        <member name="T:Fast.Core.DynamicApiController.Dependencies.IDynamicApiController">
            <summary>
            动态Api控制器依赖接口
            </summary>
        </member>
        <member name="T:Fast.Core.DynamicApiController.Enums.ApiSeats">
            <summary>
            接口参数位置
            </summary>
        </member>
        <member name="F:Fast.Core.DynamicApiController.Enums.ApiSeats.ControllerStart">
            <summary>
            控制器之前
            </summary>
        </member>
        <member name="F:Fast.Core.DynamicApiController.Enums.ApiSeats.ControllerEnd">
            <summary>
            控制器之后
            </summary>
        </member>
        <member name="F:Fast.Core.DynamicApiController.Enums.ApiSeats.ActionStart">
            <summary>
            行为之前
            </summary>
        </member>
        <member name="F:Fast.Core.DynamicApiController.Enums.ApiSeats.ActionEnd">
            <summary>
            行为之后
            </summary>
        </member>
        <member name="T:Fast.Core.DynamicApiController.Extensions.DynamicApiControllerServiceCollectionExtensions">
            <summary>
            动态接口控制器拓展类
            </summary>
        </member>
        <member name="M:Fast.Core.DynamicApiController.Extensions.DynamicApiControllerServiceCollectionExtensions.AddDynamicApiControllers(Microsoft.Extensions.DependencyInjection.IMvcBuilder)">
            <summary>
            添加动态接口控制器服务
            </summary>
            <param name="mvcBuilder">Mvc构建器</param>
            <returns>Mvc构建器</returns>
        </member>
        <member name="M:Fast.Core.DynamicApiController.Extensions.DynamicApiControllerServiceCollectionExtensions.AddDynamicApiControllers(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            添加动态接口控制器服务
            </summary>
            <param name="services"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Core.DynamicApiController.Extensions.DynamicApiControllerServiceCollectionExtensions.AddExternalAssemblyParts(Microsoft.Extensions.DependencyInjection.IMvcBuilder,System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
            <summary>
            添加外部程序集部件集合
            </summary>
            <param name="mvcBuilder">Mvc构建器</param>
            <param name="assemblies"></param>
            <returns>Mvc构建器</returns>
        </member>
        <member name="T:Fast.Core.DynamicApiController.Formatters.TextPlainMediaTypeFormatter">
            <summary>
            text/plain 请求 Body 参数支持
            </summary>
        </member>
        <member name="M:Fast.Core.DynamicApiController.Formatters.TextPlainMediaTypeFormatter.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Fast.Core.DynamicApiController.Formatters.TextPlainMediaTypeFormatter.ReadRequestBodyAsync(Microsoft.AspNetCore.Mvc.Formatters.InputFormatterContext,System.Text.Encoding)">
            <summary>
            重写 <see cref="M:Fast.Core.DynamicApiController.Formatters.TextPlainMediaTypeFormatter.ReadRequestBodyAsync(Microsoft.AspNetCore.Mvc.Formatters.InputFormatterContext,System.Text.Encoding)"/>
            </summary>
            <param name="context"></param>
            <param name="effectiveEncoding"></param>
            <returns></returns>
        </member>
        <member name="T:Fast.Core.DynamicApiController.Internal.ParameterRouteTemplate">
            <summary>
            参数路由模板
            </summary>
        </member>
        <member name="M:Fast.Core.DynamicApiController.Internal.ParameterRouteTemplate.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="P:Fast.Core.DynamicApiController.Internal.ParameterRouteTemplate.ControllerStartTemplates">
            <summary>
            控制器之前的参数
            </summary>
        </member>
        <member name="P:Fast.Core.DynamicApiController.Internal.ParameterRouteTemplate.ControllerEndTemplates">
            <summary>
            控制器之后的参数
            </summary>
        </member>
        <member name="P:Fast.Core.DynamicApiController.Internal.ParameterRouteTemplate.ActionStartTemplates">
            <summary>
            行为之前的参数
            </summary>
        </member>
        <member name="P:Fast.Core.DynamicApiController.Internal.ParameterRouteTemplate.ActionEndTemplates">
            <summary>
            行为之后的参数
            </summary>
        </member>
        <member name="T:Fast.Core.DynamicApiController.Internal.Penetrates">
            <summary>
            常量、公共方法配置类
            </summary>
        </member>
        <member name="F:Fast.Core.DynamicApiController.Internal.Penetrates.GroupSeparator">
            <summary>
            分组分隔符
            </summary>
        </member>
        <member name="P:Fast.Core.DynamicApiController.Internal.Penetrates.VerbToHttpMethods">
            <summary>
            请求动词映射字典
            </summary>
        </member>
        <member name="P:Fast.Core.DynamicApiController.Internal.Penetrates.ControllerOrderCollection">
            <summary>
            控制器排序集合
            </summary>
        </member>
        <member name="M:Fast.Core.DynamicApiController.Internal.Penetrates.#cctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="F:Fast.Core.DynamicApiController.Internal.Penetrates.IsApiControllerCached">
            <summary>
            <see cref="M:Fast.Core.DynamicApiController.Internal.Penetrates.IsApiController(System.Type)"/> 缓存集合
            </summary>
        </member>
        <member name="M:Fast.Core.DynamicApiController.Internal.Penetrates.IsApiController(System.Type)">
            <summary>
            是否是Api控制器
            </summary>
            <param name="type">type</param>
            <returns></returns>
        </member>
        <member name="T:Fast.Core.DynamicApiController.Options.DynamicApiControllerSettingsOptions">
            <summary>
            动态接口控制器配置
            </summary>
        </member>
        <member name="P:Fast.Core.DynamicApiController.Options.DynamicApiControllerSettingsOptions.DefaultRoutePrefix">
            <summary>
            默认路由前缀
            </summary>
        </member>
        <member name="P:Fast.Core.DynamicApiController.Options.DynamicApiControllerSettingsOptions.DefaultHttpMethod">
            <summary>
            默认请求谓词
            </summary>
        </member>
        <member name="P:Fast.Core.DynamicApiController.Options.DynamicApiControllerSettingsOptions.DefaultModule">
            <summary>
            默认模块名称
            </summary>
        </member>
        <member name="P:Fast.Core.DynamicApiController.Options.DynamicApiControllerSettingsOptions.LowercaseRoute">
            <summary>
            小写路由
            </summary>
        </member>
        <member name="P:Fast.Core.DynamicApiController.Options.DynamicApiControllerSettingsOptions.AsLowerCamelCase">
            <summary>
            小驼峰命名（首字符小写）
            </summary>
        </member>
        <member name="P:Fast.Core.DynamicApiController.Options.DynamicApiControllerSettingsOptions.KeepVerb">
            <summary>
            保留行为名称谓词
            </summary>
        </member>
        <member name="P:Fast.Core.DynamicApiController.Options.DynamicApiControllerSettingsOptions.KeepName">
            <summary>
            保留名称
            </summary>
        </member>
        <member name="P:Fast.Core.DynamicApiController.Options.DynamicApiControllerSettingsOptions.CamelCaseSeparator">
            <summary>
            骆驼命名分隔符
            </summary>
        </member>
        <member name="P:Fast.Core.DynamicApiController.Options.DynamicApiControllerSettingsOptions.VersionSeparator">
            <summary>
            版本号分隔符
            </summary>
        </member>
        <member name="P:Fast.Core.DynamicApiController.Options.DynamicApiControllerSettingsOptions.ModelToQuery">
            <summary>
            模型转查询参数（只有GET、HEAD请求有效）
            </summary>
        </member>
        <member name="P:Fast.Core.DynamicApiController.Options.DynamicApiControllerSettingsOptions.SupportedMvcController">
            <summary>
            支持Mvc控制器处理
            </summary>
        </member>
        <member name="P:Fast.Core.DynamicApiController.Options.DynamicApiControllerSettingsOptions.UrlParameterization">
            <summary>
            配置参数 [FromQuery] 化，默认 false ([FromRoute])
            </summary>
        </member>
        <member name="P:Fast.Core.DynamicApiController.Options.DynamicApiControllerSettingsOptions.AbandonControllerAffixes">
            <summary>
            被舍弃的控制器名称前后缀
            </summary>
        </member>
        <member name="P:Fast.Core.DynamicApiController.Options.DynamicApiControllerSettingsOptions.AbandonActionAffixes">
            <summary>
            被舍弃的行为名称前后缀
            </summary>
        </member>
        <member name="P:Fast.Core.DynamicApiController.Options.DynamicApiControllerSettingsOptions.VerbToHttpMethods">
            <summary>
            复写默认配置路由规则配置
            </summary>
        </member>
        <member name="P:Fast.Core.DynamicApiController.Options.DynamicApiControllerSettingsOptions.DefaultArea">
            <summary>
            默认区域
            </summary>
        </member>
        <member name="P:Fast.Core.DynamicApiController.Options.DynamicApiControllerSettingsOptions.ForceWithRoutePrefix">
            <summary>
            强制携带路由前缀，即使使用 [Route] 重写
            </summary>
        </member>
        <member name="M:Fast.Core.DynamicApiController.Options.DynamicApiControllerSettingsOptions.PostConfigure(Fast.Core.DynamicApiController.Options.DynamicApiControllerSettingsOptions,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            选项后期配置
            </summary>
            <param name="options"></param>
            <param name="configuration"></param>
        </member>
        <member name="T:Fast.Core.DynamicApiController.Providers.DynamicApiControllerFeatureProvider">
            <summary>
            动态接口控制器特性提供器
            </summary>
        </member>
        <member name="M:Fast.Core.DynamicApiController.Providers.DynamicApiControllerFeatureProvider.IsController(System.Reflection.TypeInfo)">
            <summary>
            扫描控制器
            </summary>
            <param name="typeInfo">类型</param>
            <returns>bool</returns>
        </member>
        <member name="T:Fast.Core.DynamicApiController.Providers.MvcActionDescriptorChangeProvider">
            <summary>
            MVC 控制器感知提供器
            </summary>
        </member>
        <member name="M:Fast.Core.DynamicApiController.Providers.MvcActionDescriptorChangeProvider.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Fast.Core.DynamicApiController.Providers.MvcActionDescriptorChangeProvider.GetChangeToken">
            <summary>
            获取改变 ChangeToken
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fast.Core.DynamicApiController.Providers.MvcActionDescriptorChangeProvider.NotifyChanges">
            <summary>
            通知变化
            </summary>
        </member>
        <member name="T:Fast.Core.DynamicApiController.Runtimes.DynamicApiRuntimeChangeProvider">
            <summary>
            动态 WebAPI 运行时感知提供器
            </summary>
        </member>
        <member name="F:Fast.Core.DynamicApiController.Runtimes.DynamicApiRuntimeChangeProvider._applicationPartManager">
            <summary>
            应用程序部件管理器
            </summary>
        </member>
        <member name="F:Fast.Core.DynamicApiController.Runtimes.DynamicApiRuntimeChangeProvider._mvcActionDescriptorChangeProvider">
            <summary>
            MVC 控制器感知提供器
            </summary>
        </member>
        <member name="M:Fast.Core.DynamicApiController.Runtimes.DynamicApiRuntimeChangeProvider.#ctor(Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPartManager,Fast.Core.DynamicApiController.Providers.MvcActionDescriptorChangeProvider)">
            <summary>
            构造函数
            </summary>
            <param name="applicationPartManager">应用程序部件管理器</param>
            <param name="mvcActionDescriptorChangeProvider">MVC 控制器感知提供器</param>
        </member>
        <member name="M:Fast.Core.DynamicApiController.Runtimes.DynamicApiRuntimeChangeProvider.AddAssemblies(System.Reflection.Assembly[])">
            <summary>
            添加程序集
            </summary>
            <param name="assemblies">程序集</param>
        </member>
        <member name="M:Fast.Core.DynamicApiController.Runtimes.DynamicApiRuntimeChangeProvider.AddAssembliesWithNotifyChanges(System.Reflection.Assembly[])">
            <summary>
            添加程序集并立即感知变化
            </summary>
            <param name="assemblies">程序集</param>
        </member>
        <member name="M:Fast.Core.DynamicApiController.Runtimes.DynamicApiRuntimeChangeProvider.RemoveAssemblies(System.String[])">
            <summary>
            移除程序集
            </summary>
            <param name="assemblyNames">程序集名称</param>
        </member>
        <member name="M:Fast.Core.DynamicApiController.Runtimes.DynamicApiRuntimeChangeProvider.RemoveAssemblies(System.Reflection.Assembly[])">
            <summary>
            移除程序集
            </summary>
            <param name="assemblies">程序集</param>
        </member>
        <member name="M:Fast.Core.DynamicApiController.Runtimes.DynamicApiRuntimeChangeProvider.RemoveAssembliesWithNotifyChanges(System.String[])">
            <summary>
            移除程序集并立即感知变化
            </summary>
            <param name="assemblyNames">程序集名称</param>
        </member>
        <member name="M:Fast.Core.DynamicApiController.Runtimes.DynamicApiRuntimeChangeProvider.RemoveAssembliesWithNotifyChanges(System.Reflection.Assembly[])">
            <summary>
            移除程序集并立即感知变化
            </summary>
            <param name="assemblies">程序集</param>
        </member>
        <member name="M:Fast.Core.DynamicApiController.Runtimes.DynamicApiRuntimeChangeProvider.NotifyChanges">
            <summary>
            感知变化
            </summary>
        </member>
        <member name="T:Fast.Core.DynamicApiController.Runtimes.IDynamicApiRuntimeChangeProvider">
            <summary>
            动态 WebAPI 运行时感知提供器
            </summary>
        </member>
        <member name="M:Fast.Core.DynamicApiController.Runtimes.IDynamicApiRuntimeChangeProvider.AddAssemblies(System.Reflection.Assembly[])">
            <summary>
            添加程序集
            </summary>
            <param name="assemblies">程序集</param>
        </member>
        <member name="M:Fast.Core.DynamicApiController.Runtimes.IDynamicApiRuntimeChangeProvider.AddAssembliesWithNotifyChanges(System.Reflection.Assembly[])">
            <summary>
            添加程序集并立即感知变化
            </summary>
            <param name="assemblies">程序集</param>
        </member>
        <member name="M:Fast.Core.DynamicApiController.Runtimes.IDynamicApiRuntimeChangeProvider.RemoveAssemblies(System.String[])">
            <summary>
            移除程序集
            </summary>
            <param name="assemblyNames">程序集名称</param>
        </member>
        <member name="M:Fast.Core.DynamicApiController.Runtimes.IDynamicApiRuntimeChangeProvider.RemoveAssemblies(System.Reflection.Assembly[])">
            <summary>
            移除程序集
            </summary>
            <param name="assemblies">程序集</param>
        </member>
        <member name="M:Fast.Core.DynamicApiController.Runtimes.IDynamicApiRuntimeChangeProvider.RemoveAssembliesWithNotifyChanges(System.String[])">
            <summary>
            移除程序集并立即感知变化
            </summary>
            <param name="assemblyNames">程序集名称</param>
        </member>
        <member name="M:Fast.Core.DynamicApiController.Runtimes.IDynamicApiRuntimeChangeProvider.RemoveAssembliesWithNotifyChanges(System.Reflection.Assembly[])">
            <summary>
            移除程序集并立即感知变化
            </summary>
            <param name="assemblies">程序集</param>
        </member>
        <member name="M:Fast.Core.DynamicApiController.Runtimes.IDynamicApiRuntimeChangeProvider.NotifyChanges">
            <summary>
            感知变化
            </summary>
        </member>
        <member name="T:Fast.Core.Enum.AppEnvironmentEnum">
            <summary>
            App运行环境枚举
            </summary>
        </member>
        <member name="F:Fast.Core.Enum.AppEnvironmentEnum.PC">
            <summary>
            PC
            </summary>
        </member>
        <member name="F:Fast.Core.Enum.AppEnvironmentEnum.Windows">
            <summary>
            Windows端
            </summary>
        </member>
        <member name="F:Fast.Core.Enum.AppEnvironmentEnum.App">
            <summary>
            App端
            </summary>
        </member>
        <member name="F:Fast.Core.Enum.AppEnvironmentEnum.H5">
            <summary>
            H5
            </summary>
        </member>
        <member name="F:Fast.Core.Enum.AppEnvironmentEnum.WeChatMiniProgram">
            <summary>
            微信小程序
            </summary>
        </member>
        <member name="T:Fast.Core.Enum.HttpRequestActionEnum">
            <summary>
            Http请求行为枚举
            </summary>
        </member>
        <member name="F:Fast.Core.Enum.HttpRequestActionEnum.Auth">
            <summary>
            登录
            </summary>
        </member>
        <member name="F:Fast.Core.Enum.HttpRequestActionEnum.Page">
            <summary>
            分页查询
            </summary>
        </member>
        <member name="F:Fast.Core.Enum.HttpRequestActionEnum.Query">
            <summary>
            查询
            </summary>
        </member>
        <member name="F:Fast.Core.Enum.HttpRequestActionEnum.Detail">
            <summary>
            详情
            </summary>
        </member>
        <member name="F:Fast.Core.Enum.HttpRequestActionEnum.Add">
            <summary>
            添加
            </summary>
        </member>
        <member name="F:Fast.Core.Enum.HttpRequestActionEnum.Update">
            <summary>
            更新
            </summary>
        </member>
        <member name="F:Fast.Core.Enum.HttpRequestActionEnum.Delete">
            <summary>
            删除
            </summary>
        </member>
        <member name="F:Fast.Core.Enum.HttpRequestActionEnum.Download">
            <summary>
            下载
            </summary>
        </member>
        <member name="F:Fast.Core.Enum.HttpRequestActionEnum.Upload">
            <summary>
            上传
            </summary>
        </member>
        <member name="F:Fast.Core.Enum.HttpRequestActionEnum.Export">
            <summary>
            导出
            </summary>
        </member>
        <member name="F:Fast.Core.Enum.HttpRequestActionEnum.Import">
            <summary>
            导入
            </summary>
        </member>
        <member name="T:Fast.Core.Extensions.IConfigurationExtension">
            <summary>
            <see cref="T:Microsoft.Extensions.Configuration.IConfiguration"/> 拓展类
            </summary>
        </member>
        <member name="M:Fast.Core.Extensions.IConfigurationExtension.Reload(Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            刷新配置对象
            </summary>
            <param name="configuration"><see cref="T:Microsoft.Extensions.Configuration.IConfiguration"/></param>
            <returns><see cref="T:Microsoft.Extensions.Configuration.IConfiguration"/></returns>
        </member>
        <member name="T:Fast.Core.Extensions.IServiceCollectionExtension">
            <summary>
            <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/> 拓展类
            </summary>
        </member>
        <member name="M:Fast.Core.Extensions.IServiceCollectionExtension.AddMvcFilter``1(Microsoft.Extensions.DependencyInjection.IMvcBuilder,System.Action{Microsoft.AspNetCore.Mvc.MvcOptions})">
            <summary>
            注册 Mvc 过滤器
            </summary>
            <typeparam name="TFilter"></typeparam>
            <param name="mvcBuilder"><see cref="T:Microsoft.Extensions.DependencyInjection.IMvcBuilder"/></param>
            <param name="configure"></param>
            <returns><see cref="T:Microsoft.Extensions.DependencyInjection.IMvcBuilder"/></returns>
        </member>
        <member name="M:Fast.Core.Extensions.IServiceCollectionExtension.AddMvcFilter``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Microsoft.AspNetCore.Mvc.MvcOptions})">
            <summary>
            注册 Mvc 过滤器
            </summary>
            <typeparam name="TFilter"></typeparam>
            <param name="services"><see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/></param>
            <param name="configure"></param>
            <returns>&lt;see cref="IServiceCollection"/&gt;</returns>
        </member>
        <member name="M:Fast.Core.Extensions.IServiceCollectionExtension.AddMvcFilter(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata,System.Action{Microsoft.AspNetCore.Mvc.MvcOptions})">
            <summary>
            注册 Mvc 过滤器
            </summary>
            <param name="services"><see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/></param>
            <param name="filter"></param>
            <param name="configure"></param>
            <returns><see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/></returns>
        </member>
        <member name="M:Fast.Core.Extensions.IServiceCollectionExtension.AddJsonOptions(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            添加JSON序列化配置
            </summary>
            <param name="services"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Core.Extensions.IServiceCollectionExtension.AddObjectMapper(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            添加对象映射
            </summary>
            <param name="services"><see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/></param>
            <returns><see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/></returns>
        </member>
        <member name="M:Fast.Core.Extensions.IServiceCollectionExtension.AddLogging(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            添加日志服务
            /// 197001/01/24.log
            </summary>
            <param name="services"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Core.Extensions.IServiceCollectionExtension.AddCache(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            添加缓存
            </summary>
            <param name="services"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Core.Extensions.IServiceCollectionExtension.AddAuthentication(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            添加鉴权用户
            </summary>
            <param name="services"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Core.Extensions.IServiceCollectionExtension.AddSqlSugar(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            添加 SqlSugar
            </summary>
            <param name="services"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Core.Extensions.IServiceCollectionExtension.AddGzipBrotliCompression(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            添加Gzip Brotli 压缩
            </summary>
            <param name="service"></param>
        </member>
        <member name="T:Fast.Core.Extensions.WebApplicationBuilderExtension">
            <summary>
            <see cref="T:Microsoft.AspNetCore.Builder.WebApplicationBuilder"/> 拓展类
            </summary>
        </member>
        <member name="M:Fast.Core.Extensions.WebApplicationBuilderExtension.Initialize(Microsoft.AspNetCore.Builder.WebApplicationBuilder)">
            <summary>
            框架初始化
            </summary>
            <param name="builder"><see cref="T:Microsoft.AspNetCore.Builder.WebApplicationBuilder"/></param>
            <returns><see cref="T:Microsoft.AspNetCore.Builder.WebApplicationBuilder"/></returns>
        </member>
        <member name="T:Fast.Core.FriendlyException.Attributes.ErrorCodeItemMetadataAttribute">
            <summary>
            异常元数据特性
            </summary>
        </member>
        <member name="M:Fast.Core.FriendlyException.Attributes.ErrorCodeItemMetadataAttribute.#ctor(System.String,System.Object[])">
            <summary>
            构造函数
            </summary>
            <param name="errorMessage">错误消息</param>
            <param name="args">格式化参数</param>
        </member>
        <member name="P:Fast.Core.FriendlyException.Attributes.ErrorCodeItemMetadataAttribute.ErrorMessage">
            <summary>
            错误消息
            </summary>
        </member>
        <member name="P:Fast.Core.FriendlyException.Attributes.ErrorCodeItemMetadataAttribute.ErrorCode">
            <summary>
            错误码
            </summary>
        </member>
        <member name="P:Fast.Core.FriendlyException.Attributes.ErrorCodeItemMetadataAttribute.Args">
            <summary>
            格式化参数
            </summary>
        </member>
        <member name="T:Fast.Core.FriendlyException.Attributes.ErrorCodeTypeAttribute">
            <summary>
            错误代码类型特性
            </summary>
        </member>
        <member name="T:Fast.Core.FriendlyException.Attributes.IfExceptionAttribute">
            <summary>
            异常复写特性
            </summary>
        </member>
        <member name="M:Fast.Core.FriendlyException.Attributes.IfExceptionAttribute.#ctor">
            <summary>
            默认构造函数
            </summary>
        </member>
        <member name="M:Fast.Core.FriendlyException.Attributes.IfExceptionAttribute.#ctor(System.Object,System.Object[])">
            <summary>
            构造函数
            </summary>
            <param name="errorCode">错误编码</param>
            <param name="args">格式化参数</param>
        </member>
        <member name="M:Fast.Core.FriendlyException.Attributes.IfExceptionAttribute.#ctor(System.Type)">
            <summary>
            捕获特定异常类型异常（用于全局异常捕获）
            </summary>
            <param name="exceptionType"></param>
        </member>
        <member name="P:Fast.Core.FriendlyException.Attributes.IfExceptionAttribute.ErrorCode">
            <summary>
            错误编码
            </summary>
        </member>
        <member name="P:Fast.Core.FriendlyException.Attributes.IfExceptionAttribute.ExceptionType">
            <summary>
            异常类型
            </summary>
        </member>
        <member name="P:Fast.Core.FriendlyException.Attributes.IfExceptionAttribute.ErrorMessage">
            <summary>
            错误消息
            </summary>
        </member>
        <member name="P:Fast.Core.FriendlyException.Attributes.IfExceptionAttribute.Args">
            <summary>
            格式化参数
            </summary>
        </member>
        <member name="T:Fast.Core.FriendlyException.Exceptions.AppFriendlyException">
            <summary>
            自定义友好异常类
            </summary>
        </member>
        <member name="M:Fast.Core.FriendlyException.Exceptions.AppFriendlyException.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Fast.Core.FriendlyException.Exceptions.AppFriendlyException.#ctor(System.String,System.Object)">
            <summary>
            构造函数
            </summary>
            <param name="message"></param>
            <param name="errorCode"></param>
        </member>
        <member name="M:Fast.Core.FriendlyException.Exceptions.AppFriendlyException.#ctor(System.String,System.Object,System.Exception)">
            <summary>
            构造函数
            </summary>
            <param name="message"></param>
            <param name="errorCode"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Fast.Core.FriendlyException.Exceptions.AppFriendlyException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            构造函数
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="P:Fast.Core.FriendlyException.Exceptions.AppFriendlyException.ErrorCode">
            <summary>
            错误码
            </summary>
        </member>
        <member name="P:Fast.Core.FriendlyException.Exceptions.AppFriendlyException.OriginErrorCode">
            <summary>
            错误码（没被复写过的 ErrorCode ）
            </summary>
        </member>
        <member name="P:Fast.Core.FriendlyException.Exceptions.AppFriendlyException.ErrorMessage">
            <summary>
            错误消息（支持 Object 对象）
            </summary>
        </member>
        <member name="P:Fast.Core.FriendlyException.Exceptions.AppFriendlyException.StatusCode">
            <summary>
            状态码
            </summary>
        </member>
        <member name="P:Fast.Core.FriendlyException.Exceptions.AppFriendlyException.ValidationException">
            <summary>
            是否是数据验证异常
            </summary>
        </member>
        <member name="P:Fast.Core.FriendlyException.Exceptions.AppFriendlyException.Data">
            <summary>
            额外数据
            </summary>
        </member>
        <member name="T:Fast.Core.FriendlyException.Extensions.AppFriendlyExceptionExtensions">
            <summary>
            异常拓展
            </summary>
        </member>
        <member name="M:Fast.Core.FriendlyException.Extensions.AppFriendlyExceptionExtensions.StatusCode(Fast.Core.FriendlyException.Exceptions.AppFriendlyException,System.Int32)">
            <summary>
            设置异常状态码
            </summary>
            <param name="exception"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Core.FriendlyException.Extensions.AppFriendlyExceptionExtensions.WithData(Fast.Core.FriendlyException.Exceptions.AppFriendlyException,System.Object)">
            <summary>
            设置额外数据
            </summary>
            <param name="exception"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="T:Fast.Core.FriendlyException.Extensions.FriendlyExceptionServiceCollectionExtensions">
            <summary>
            友好异常服务拓展类
            </summary>
        </member>
        <member name="M:Fast.Core.FriendlyException.Extensions.FriendlyExceptionServiceCollectionExtensions.AddFriendlyException``1(Microsoft.Extensions.DependencyInjection.IMvcBuilder,System.Action{Fast.Core.FriendlyException.Extensions.Options.FriendlyExceptionOptions})">
            <summary>
            添加友好异常服务拓展服务
            </summary>
            <typeparam name="TErrorCodeTypeProvider">异常错误码提供器</typeparam>
            <param name="mvcBuilder">Mvc构建器</param>
            <param name="configure">是否启用全局异常过滤器</param>
            <returns></returns>
        </member>
        <member name="M:Fast.Core.FriendlyException.Extensions.FriendlyExceptionServiceCollectionExtensions.AddFriendlyException``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Fast.Core.FriendlyException.Extensions.Options.FriendlyExceptionOptions})">
            <summary>
            添加友好异常服务拓展服务
            </summary>
            <typeparam name="TErrorCodeTypeProvider">异常错误码提供器</typeparam>
            <param name="services"></param>
            <param name="configure"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Core.FriendlyException.Extensions.FriendlyExceptionServiceCollectionExtensions.AddFriendlyException(Microsoft.Extensions.DependencyInjection.IMvcBuilder,System.Action{Fast.Core.FriendlyException.Extensions.Options.FriendlyExceptionOptions})">
            <summary>
            添加友好异常服务拓展服务
            </summary>
            <param name="mvcBuilder">Mvc构建器</param>
            <param name="configure"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Core.FriendlyException.Extensions.FriendlyExceptionServiceCollectionExtensions.AddFriendlyException(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Fast.Core.FriendlyException.Extensions.Options.FriendlyExceptionOptions})">
            <summary>
            添加友好异常服务拓展服务
            </summary>
            <param name="services"></param>
            <param name="configure"></param>
            <returns></returns>
        </member>
        <member name="T:Fast.Core.FriendlyException.Extensions.Options.FriendlyExceptionOptions">
            <summary>
            AddInject 友好异常配置选项
            </summary>
        </member>
        <member name="P:Fast.Core.FriendlyException.Extensions.Options.FriendlyExceptionOptions.GlobalEnabled">
            <summary>
            是否启用全局友好异常
            </summary>
        </member>
        <member name="T:Fast.Core.FriendlyException.Filters.FriendlyExceptionFilter">
            <summary>
            友好异常拦截器
            </summary>
        </member>
        <member name="M:Fast.Core.FriendlyException.Filters.FriendlyExceptionFilter.OnExceptionAsync(Microsoft.AspNetCore.Mvc.Filters.ExceptionContext)">
            <summary>
            异常拦截
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:Fast.Core.FriendlyException.Handlers.IGlobalExceptionHandler">
            <summary>
            全局异常处理
            </summary>
        </member>
        <member name="M:Fast.Core.FriendlyException.Handlers.IGlobalExceptionHandler.OnExceptionAsync(Microsoft.AspNetCore.Mvc.Filters.ExceptionContext)">
            <summary>
            异常拦截
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:Fast.Core.FriendlyException.Internal.ExceptionMetadata">
            <summary>
            异常元数据
            </summary>
        </member>
        <member name="P:Fast.Core.FriendlyException.Internal.ExceptionMetadata.StatusCode">
            <summary>
            状态码
            </summary>
        </member>
        <member name="P:Fast.Core.FriendlyException.Internal.ExceptionMetadata.ErrorCode">
            <summary>
            错误码
            </summary>
        </member>
        <member name="P:Fast.Core.FriendlyException.Internal.ExceptionMetadata.OriginErrorCode">
            <summary>
            错误码（没被复写过的 ErrorCode ）
            </summary>
        </member>
        <member name="P:Fast.Core.FriendlyException.Internal.ExceptionMetadata.Errors">
            <summary>
            错误对象（信息）
            </summary>
        </member>
        <member name="P:Fast.Core.FriendlyException.Internal.ExceptionMetadata.Data">
            <summary>
            额外数据
            </summary>
        </member>
        <member name="T:Fast.Core.FriendlyException.Internal.FriendlyException">
            <summary>
            FriendlyException 日志拓展默认分类名
            </summary>
        </member>
        <member name="T:Fast.Core.FriendlyException.Internal.MethodIfException">
            <summary>
            方法异常类
            </summary>
        </member>
        <member name="P:Fast.Core.FriendlyException.Internal.MethodIfException.ErrorMethod">
            <summary>
            出异常的方法
            </summary>
        </member>
        <member name="P:Fast.Core.FriendlyException.Internal.MethodIfException.IfExceptionAttributes">
            <summary>
            异常特性
            </summary>
        </member>
        <member name="T:Fast.Core.FriendlyException.Oops">
            <summary>
            抛异常静态类
            </summary>
        </member>
        <member name="F:Fast.Core.FriendlyException.Oops.ErrorMethods">
            <summary>
            方法错误异常特性
            </summary>
        </member>
        <member name="F:Fast.Core.FriendlyException.Oops.ErrorCodeTypes">
            <summary>
            错误代码类型
            </summary>
        </member>
        <member name="F:Fast.Core.FriendlyException.Oops.ErrorCodeMessages">
            <summary>
            错误消息字典
            </summary>
        </member>
        <member name="F:Fast.Core.FriendlyException.Oops._friendlyExceptionSettings">
            <summary>
            友好异常设置
            </summary>
        </member>
        <member name="M:Fast.Core.FriendlyException.Oops.#cctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Fast.Core.FriendlyException.Oops.Bah(System.String,System.Object[])">
            <summary>
            抛出业务异常信息
            </summary>
            <param name="errorMessage">异常消息</param>
            <param name="args">String.Format 参数</param>
            <returns>异常实例</returns>
        </member>
        <member name="M:Fast.Core.FriendlyException.Oops.Bah(System.Object,System.Object[])">
            <summary>
            抛出业务异常信息
            </summary>
            <param name="errorCode">错误码</param>
            <param name="args">String.Format 参数</param>
            <returns>异常实例</returns>
        </member>
        <member name="M:Fast.Core.FriendlyException.Oops.Oh(System.String,System.Object[])">
            <summary>
            抛出字符串异常
            </summary>
            <param name="errorMessage">异常消息</param>
            <param name="args">String.Format 参数</param>
            <returns>异常实例</returns>
        </member>
        <member name="M:Fast.Core.FriendlyException.Oops.Oh(System.String,System.Type,System.Object[])">
            <summary>
            抛出字符串异常
            </summary>
            <param name="errorMessage">异常消息</param>
            <param name="exceptionType">具体异常类型</param>
            <param name="args">String.Format 参数</param>
            <returns>异常实例</returns>
        </member>
        <member name="M:Fast.Core.FriendlyException.Oops.Oh``1(System.String,System.Object[])">
            <summary>
            抛出字符串异常
            </summary>
            <typeparam name="TException">具体异常类型</typeparam>
            <param name="errorMessage">异常消息</param>
            <param name="args">String.Format 参数</param>
            <returns>异常实例</returns>
        </member>
        <member name="M:Fast.Core.FriendlyException.Oops.Oh(System.Object,System.Object[])">
            <summary>
            抛出错误码异常
            </summary>
            <param name="errorCode">错误码</param>
            <param name="args">String.Format 参数</param>
            <returns>异常实例</returns>
        </member>
        <member name="M:Fast.Core.FriendlyException.Oops.Oh(System.Object,System.Type,System.Object[])">
            <summary>
            抛出错误码异常
            </summary>
            <param name="errorCode">错误码</param>
            <param name="exceptionType">具体异常类型</param>
            <param name="args">String.Format 参数</param>
            <returns>异常实例</returns>
        </member>
        <member name="M:Fast.Core.FriendlyException.Oops.Oh``1(System.Object,System.Object[])">
            <summary>
            抛出错误码异常
            </summary>
            <typeparam name="TException">具体异常类型</typeparam>
            <param name="errorCode">错误码</param>
            <param name="args">String.Format 参数</param>
            <returns>异常实例</returns>
        </member>
        <member name="M:Fast.Core.FriendlyException.Oops.GetErrorCodeMessage(System.Object,System.Object[])">
            <summary>
            获取错误码消息
            </summary>
            <param name="errorCode"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Core.FriendlyException.Oops.HandleEnumErrorCode(System.Object)">
            <summary>
            处理枚举类型错误码
            </summary>
            <param name="errorCode">错误码</param>
            <returns></returns>
        </member>
        <member name="M:Fast.Core.FriendlyException.Oops.GetErrorCodeTypes">
            <summary>
            获取错误代码类型
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fast.Core.FriendlyException.Oops.GetErrorCodeMessages">
            <summary>
            获取所有错误消息
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fast.Core.FriendlyException.Oops.FixErrorCodeSettingMessage(System.Object[])">
            <summary>
            处理异常配置数据
            </summary>
            <param name="errorCodes">错误消息配置对象</param>
            <remarks>
            方式：数组第一个元素为错误码，第二个参数为错误消息，剩下的参数为错误码格式化字符串
            </remarks>
            <returns></returns>
        </member>
        <member name="M:Fast.Core.FriendlyException.Oops.GetEndPointExceptionMethod">
            <summary>
            获取堆栈中顶部抛异常方法
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fast.Core.FriendlyException.Oops.GetErrorCodeItemInformation(System.Reflection.FieldInfo)">
            <summary>
            获取错误代码信息
            </summary>
            <param name="fieldInfo">字段对象</param>
            <returns>(object key, object value)</returns>
        </member>
        <member name="M:Fast.Core.FriendlyException.Oops.MontageErrorMessage(System.String,System.String,System.Object[])">
            <summary>
            获取错误码字符串
            </summary>
            <param name="errorMessage"></param>
            <param name="errorCode"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="T:Fast.Core.FriendlyException.Options.ErrorCodeMessageSettingsOptions">
            <summary>
            异常配置选项，最优的方式是采用后期配置，也就是所有异常状态码先不设置（推荐）
            </summary>
        </member>
        <member name="P:Fast.Core.FriendlyException.Options.ErrorCodeMessageSettingsOptions.Definitions">
            <summary>
            异常状态码配置列表
            </summary>
        </member>
        <member name="T:Fast.Core.FriendlyException.Options.FriendlyExceptionSettingsOptions">
            <summary>
            友好异常配置选项
            </summary>
        </member>
        <member name="P:Fast.Core.FriendlyException.Options.FriendlyExceptionSettingsOptions.HideErrorCode">
            <summary>
            隐藏错误码
            </summary>
        </member>
        <member name="P:Fast.Core.FriendlyException.Options.FriendlyExceptionSettingsOptions.DefaultErrorCode">
            <summary>
            默认错误码
            </summary>
        </member>
        <member name="P:Fast.Core.FriendlyException.Options.FriendlyExceptionSettingsOptions.DefaultErrorMessage">
            <summary>
            默认错误消息
            </summary>
        </member>
        <member name="P:Fast.Core.FriendlyException.Options.FriendlyExceptionSettingsOptions.ThrowBah">
            <summary>
            标记 Oops.Oh 为业务异常
            </summary>
            <remarks>也就是不会进入异常处理</remarks>
        </member>
        <member name="P:Fast.Core.FriendlyException.Options.FriendlyExceptionSettingsOptions.LogError">
            <summary>
            是否输出异常日志
            </summary>
        </member>
        <member name="M:Fast.Core.FriendlyException.Options.FriendlyExceptionSettingsOptions.PostConfigure(Fast.Core.FriendlyException.Options.FriendlyExceptionSettingsOptions,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            选项后期配置
            </summary>
            <param name="options"></param>
            <param name="configuration"></param>
        </member>
        <member name="T:Fast.Core.FriendlyException.Providers.IErrorCodeTypeProvider">
            <summary>
            异常错误代码提供器
            </summary>
        </member>
        <member name="P:Fast.Core.FriendlyException.Providers.IErrorCodeTypeProvider.Definitions">
            <summary>
            错误代码定义类型
            </summary>
        </member>
        <member name="T:Fast.Core.FriendlyException.Results.BadPageResult">
            <summary>
            错误页面
            </summary>
        </member>
        <member name="M:Fast.Core.FriendlyException.Results.BadPageResult.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Fast.Core.FriendlyException.Results.BadPageResult.#ctor(System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="statusCode">状态码</param>
        </member>
        <member name="P:Fast.Core.FriendlyException.Results.BadPageResult.Title">
            <summary>
            标题
            </summary>
        </member>
        <member name="P:Fast.Core.FriendlyException.Results.BadPageResult.Description">
            <summary>
            描述
            </summary>
        </member>
        <member name="P:Fast.Core.FriendlyException.Results.BadPageResult.Base64Icon">
            <summary>
            图标
            </summary>
            <remarks>必须是 base64 类型</remarks>
        </member>
        <member name="P:Fast.Core.FriendlyException.Results.BadPageResult.Code">
            <summary>
            错误代码
            </summary>
        </member>
        <member name="P:Fast.Core.FriendlyException.Results.BadPageResult.CodeLang">
            <summary>
            错误代码语言
            </summary>
        </member>
        <member name="P:Fast.Core.FriendlyException.Results.BadPageResult.Status401Unauthorized">
            <summary>
            返回通用 401 错误页
            </summary>
        </member>
        <member name="P:Fast.Core.FriendlyException.Results.BadPageResult.Status403Forbidden">
            <summary>
            返回通用 403 错误页
            </summary>
        </member>
        <member name="P:Fast.Core.FriendlyException.Results.BadPageResult.Status404NotFound">
            <summary>
            返回通用 404 错误页
            </summary>
        </member>
        <member name="P:Fast.Core.FriendlyException.Results.BadPageResult.Status500InternalServerError">
            <summary>
            返回通用 500 错误页
            </summary>
        </member>
        <member name="M:Fast.Core.FriendlyException.Results.BadPageResult.ExecuteResult(Microsoft.AspNetCore.Mvc.ActionContext)">
            <summary>
            重写返回结果
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Fast.Core.FriendlyException.Results.BadPageResult.ToString">
            <summary>
            将 <see cref="T:Fast.Core.FriendlyException.Results.BadPageResult"/> 转换成字符串
            </summary>
            <returns><see cref="T:System.String"/></returns>
        </member>
        <member name="M:Fast.Core.FriendlyException.Results.BadPageResult.ToByteArray">
            <summary>
            将 <see cref="T:Fast.Core.FriendlyException.Results.BadPageResult"/> 转换成字节数组
            </summary>
            <returns><see cref="T:System.Byte"/></returns>
        </member>
        <member name="T:Fast.Core.FriendlyException.Retry">
            <summary>
            重试静态类
            </summary>
        </member>
        <member name="M:Fast.Core.FriendlyException.Retry.Invoke(System.Action,System.Int32,System.Int32,System.Boolean,System.Type[],System.Action{System.Exception},System.Action{System.Int32,System.Int32})">
            <summary>
            重试有异常的方法，还可以指定特定异常
            </summary>
            <param name="action"></param>
            <param name="numRetries">重试次数</param>
            <param name="retryTimeout">重试间隔时间</param>
            <param name="finalThrow">是否最终抛异常</param>
            <param name="exceptionTypes">异常类型,可多个</param>
            <param name="fallbackPolicy">重试失败回调</param>
            <param name="retryAction">重试时调用方法</param>
        </member>
        <member name="M:Fast.Core.FriendlyException.Retry.InvokeAsync(System.Func{System.Threading.Tasks.Task},System.Int32,System.Int32,System.Boolean,System.Type[],System.Func{System.Exception,System.Threading.Tasks.Task},System.Action{System.Int32,System.Int32})">
            <summary>
            重试有异常的方法，还可以指定特定异常
            </summary>
            <param name="action"></param>
            <param name="numRetries">重试次数</param>
            <param name="retryTimeout">重试间隔时间</param>
            <param name="finalThrow">是否最终抛异常</param>
            <param name="exceptionTypes">异常类型,可多个</param>
            <param name="fallbackPolicy">重试失败回调</param>
            <param name="retryAction">重试时调用方法</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/></returns>
        </member>
        <member name="T:Fast.Core.Options.Attributes.FailureMessageAttribute">
            <summary>
            选项校验失败消息特性
            </summary>
        </member>
        <member name="M:Fast.Core.Options.Attributes.FailureMessageAttribute.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="text">文本内容</param>
        </member>
        <member name="P:Fast.Core.Options.Attributes.FailureMessageAttribute.Text">
            <summary>
            文本内容
            </summary>
        </member>
        <member name="T:Fast.Core.Options.Attributes.OptionsBuilderAttribute">
            <summary>
            选项构建器特性
            </summary>
        </member>
        <member name="M:Fast.Core.Options.Attributes.OptionsBuilderAttribute.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Fast.Core.Options.Attributes.OptionsBuilderAttribute.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="sectionKey">配置节点</param>
        </member>
        <member name="P:Fast.Core.Options.Attributes.OptionsBuilderAttribute.SectionKey">
            <summary>
            配置节点
            </summary>
        </member>
        <member name="P:Fast.Core.Options.Attributes.OptionsBuilderAttribute.ErrorOnUnknownConfiguration">
            <summary>
            未知配置节点抛异常
            </summary>
        </member>
        <member name="P:Fast.Core.Options.Attributes.OptionsBuilderAttribute.BindNonPublicProperties">
            <summary>
            绑定非公开属性
            </summary>
        </member>
        <member name="P:Fast.Core.Options.Attributes.OptionsBuilderAttribute.ValidateDataAnnotations">
            <summary>
            启用验证特性支持
            </summary>
        </member>
        <member name="P:Fast.Core.Options.Attributes.OptionsBuilderAttribute.ValidateOptionsTypes">
            <summary>
            验证选项类型
            </summary>
        </member>
        <member name="T:Fast.Core.Options.Attributes.OptionsBuilderMethodMapAttribute">
            <summary>
            选项构建器方法映射特性
            </summary>
        </member>
        <member name="M:Fast.Core.Options.Attributes.OptionsBuilderMethodMapAttribute.#ctor(System.String,System.Boolean)">
            <summary>
            构造函数
            </summary>
            <param name="methodName">映射方法名</param>
            <param name="voidReturn">无返回值</param>
        </member>
        <member name="P:Fast.Core.Options.Attributes.OptionsBuilderMethodMapAttribute.MethodName">
            <summary>
            方法名称
            </summary>
        </member>
        <member name="P:Fast.Core.Options.Attributes.OptionsBuilderMethodMapAttribute.VoidReturn">
            <summary>
            有无返回值
            </summary>
        </member>
        <member name="T:Fast.Core.Options.Constants.Constants">
            <summary>
            Options 模块常量
            </summary>
        </member>
        <member name="F:Fast.Core.Options.Constants.Constants.OptionsTypeSuffix">
            <summary>
            Options 类型后缀
            </summary>
            <remarks>主要用于匹配配置节点，自动去掉该后缀</remarks>
        </member>
        <member name="T:Fast.Core.Options.Dependencies.IConfigureOptionsBuilder`1">
            <summary>
            选项配置依赖接口
            </summary>
            <typeparam name="TOptions">选项类型</typeparam>
        </member>
        <member name="M:Fast.Core.Options.Dependencies.IConfigureOptionsBuilder`1.Configure(`0)">
            <summary>
            选项配置
            </summary>
            <param name="options">选项实例</param>
        </member>
        <member name="T:Fast.Core.Options.Dependencies.IConfigureOptionsBuilder`2">
            <summary>
            选项配置依赖接口
            </summary>
            <typeparam name="TOptions">选项类型</typeparam>
            <typeparam name="TDep">依赖服务</typeparam>
        </member>
        <member name="M:Fast.Core.Options.Dependencies.IConfigureOptionsBuilder`2.Configure(`0,`1)">
            <summary>
            选项配置
            </summary>
            <param name="options">选项实例</param>
            <param name="dep">依赖服务</param>
        </member>
        <member name="T:Fast.Core.Options.Dependencies.IConfigureOptionsBuilder`3">
            <summary>
            选项配置依赖接口
            </summary>
            <typeparam name="TOptions">选项类型</typeparam>
            <typeparam name="TDep1">依赖服务</typeparam>
            <typeparam name="TDep2">依赖服务</typeparam>
        </member>
        <member name="M:Fast.Core.Options.Dependencies.IConfigureOptionsBuilder`3.Configure(`0,`1,`2)">
            <summary>
            选项配置
            </summary>
            <param name="options">选项实例</param>
            <param name="dep1">依赖服务</param>
            <param name="dep2">依赖服务</param>
        </member>
        <member name="T:Fast.Core.Options.Dependencies.IConfigureOptionsBuilder`4">
            <summary>
            选项配置依赖接口
            </summary>
            <typeparam name="TOptions">选项类型</typeparam>
            <typeparam name="TDep1">依赖服务</typeparam>
            <typeparam name="TDep2">依赖服务</typeparam>
            <typeparam name="TDep3">依赖服务</typeparam>
        </member>
        <member name="M:Fast.Core.Options.Dependencies.IConfigureOptionsBuilder`4.Configure(`0,`1,`2,`3)">
            <summary>
            选项配置
            </summary>
            <param name="options">选项实例</param>
            <param name="dep1">依赖服务</param>
            <param name="dep2">依赖服务</param>
            <param name="dep3">依赖服务</param>
        </member>
        <member name="T:Fast.Core.Options.Dependencies.IConfigureOptionsBuilder`5">
            <summary>
            选项配置依赖接口
            </summary>
            <typeparam name="TOptions">选项类型</typeparam>
            <typeparam name="TDep1">依赖服务</typeparam>
            <typeparam name="TDep2">依赖服务</typeparam>
            <typeparam name="TDep3">依赖服务</typeparam>
            <typeparam name="TDep4">依赖服务</typeparam>
        </member>
        <member name="M:Fast.Core.Options.Dependencies.IConfigureOptionsBuilder`5.Configure(`0,`1,`2,`3,`4)">
            <summary>
            选项配置
            </summary>
            <param name="options">选项实例</param>
            <param name="dep1">依赖服务</param>
            <param name="dep2">依赖服务</param>
            <param name="dep3">依赖服务</param>
            <param name="dep4">依赖服务</param>
        </member>
        <member name="T:Fast.Core.Options.Dependencies.IConfigureOptionsBuilder`6">
            <summary>
            选项配置依赖接口
            </summary>
            <typeparam name="TOptions">选项类型</typeparam>
            <typeparam name="TDep1">依赖服务</typeparam>
            <typeparam name="TDep2">依赖服务</typeparam>
            <typeparam name="TDep3">依赖服务</typeparam>
            <typeparam name="TDep4">依赖服务</typeparam>
            <typeparam name="TDep5">依赖服务</typeparam>
        </member>
        <member name="M:Fast.Core.Options.Dependencies.IConfigureOptionsBuilder`6.Configure(`0,`1,`2,`3,`4,`5)">
            <summary>
            选项配置
            </summary>
            <param name="options">选项实例</param>
            <param name="dep1">依赖服务</param>
            <param name="dep2">依赖服务</param>
            <param name="dep3">依赖服务</param>
            <param name="dep4">依赖服务</param>
            <param name="dep5">依赖服务</param>
        </member>
        <member name="T:Fast.Core.Options.Dependencies.IOptionsBuilderDependency`1">
            <summary>
            选项构建器依赖接口
            </summary>
            <typeparam name="TOptions">选项类型</typeparam>
        </member>
        <member name="T:Fast.Core.Options.Dependencies.IPostConfigureOptionsBuilder`1">
            <summary>
            选项后期配置依赖接口
            </summary>
            <typeparam name="TOptions">选项类型</typeparam>
        </member>
        <member name="M:Fast.Core.Options.Dependencies.IPostConfigureOptionsBuilder`1.PostConfigure(`0)">
            <summary>
            选项后期配置
            </summary>
            <param name="options">选项实例</param>
        </member>
        <member name="T:Fast.Core.Options.Dependencies.IPostConfigureOptionsBuilder`2">
            <summary>
            选项后期配置依赖接口
            </summary>
            <typeparam name="TOptions">选项类型</typeparam>
            <typeparam name="TDep">依赖服务</typeparam>
        </member>
        <member name="M:Fast.Core.Options.Dependencies.IPostConfigureOptionsBuilder`2.PostConfigure(`0,`1)">
            <summary>
            选项后期配置
            </summary>
            <param name="options">选项实例</param>
            <param name="dep">依赖服务</param>
        </member>
        <member name="T:Fast.Core.Options.Dependencies.IPostConfigureOptionsBuilder`3">
            <summary>
            选项后期配置依赖接口
            </summary>
            <typeparam name="TOptions">选项类型</typeparam>
            <typeparam name="TDep1">依赖服务</typeparam>
            <typeparam name="TDep2">依赖服务</typeparam>
        </member>
        <member name="M:Fast.Core.Options.Dependencies.IPostConfigureOptionsBuilder`3.PostConfigure(`0,`1,`2)">
            <summary>
            选项后期配置
            </summary>
            <param name="options">选项实例</param>
            <param name="dep1">依赖服务</param>
            <param name="dep2">依赖服务</param>
        </member>
        <member name="T:Fast.Core.Options.Dependencies.IPostConfigureOptionsBuilder`4">
            <summary>
            选项后期配置依赖接口
            </summary>
            <typeparam name="TOptions">选项类型</typeparam>
            <typeparam name="TDep1">依赖服务</typeparam>
            <typeparam name="TDep2">依赖服务</typeparam>
            <typeparam name="TDep3">依赖服务</typeparam>
        </member>
        <member name="M:Fast.Core.Options.Dependencies.IPostConfigureOptionsBuilder`4.PostConfigure(`0,`1,`2,`3)">
            <summary>
            选项后期配置
            </summary>
            <param name="options">选项实例</param>
            <param name="dep1">依赖服务</param>
            <param name="dep2">依赖服务</param>
            <param name="dep3">依赖服务</param>
        </member>
        <member name="T:Fast.Core.Options.Dependencies.IPostConfigureOptionsBuilder`5">
            <summary>
            选项后期配置依赖接口
            </summary>
            <typeparam name="TOptions">选项类型</typeparam>
            <typeparam name="TDep1">依赖服务</typeparam>
            <typeparam name="TDep2">依赖服务</typeparam>
            <typeparam name="TDep3">依赖服务</typeparam>
            <typeparam name="TDep4">依赖服务</typeparam>
        </member>
        <member name="M:Fast.Core.Options.Dependencies.IPostConfigureOptionsBuilder`5.PostConfigure(`0,`1,`2,`3,`4)">
            <summary>
            选项后期配置
            </summary>
            <param name="options">选项实例</param>
            <param name="dep1">依赖服务</param>
            <param name="dep2">依赖服务</param>
            <param name="dep3">依赖服务</param>
            <param name="dep4">依赖服务</param>
        </member>
        <member name="T:Fast.Core.Options.Dependencies.IPostConfigureOptionsBuilder`6">
            <summary>
            选项后期配置依赖接口
            </summary>
            <typeparam name="TOptions">选项类型</typeparam>
            <typeparam name="TDep1">依赖服务</typeparam>
            <typeparam name="TDep2">依赖服务</typeparam>
            <typeparam name="TDep3">依赖服务</typeparam>
            <typeparam name="TDep4">依赖服务</typeparam>
            <typeparam name="TDep5">依赖服务</typeparam>
        </member>
        <member name="M:Fast.Core.Options.Dependencies.IPostConfigureOptionsBuilder`6.PostConfigure(`0,`1,`2,`3,`4,`5)">
            <summary>
            选项后期配置
            </summary>
            <param name="options">选项实例</param>
            <param name="dep1">依赖服务</param>
            <param name="dep2">依赖服务</param>
            <param name="dep3">依赖服务</param>
            <param name="dep4">依赖服务</param>
            <param name="dep5">依赖服务</param>
        </member>
        <member name="T:Fast.Core.Options.Dependencies.IValidateOptionsBuilder`1">
            <summary>
            选项验证依赖接口
            </summary>
            <typeparam name="TOptions">选项类型</typeparam>
        </member>
        <member name="M:Fast.Core.Options.Dependencies.IValidateOptionsBuilder`1.Validate(`0)">
            <summary>
            复杂验证
            </summary>
            <param name="options">选项实例</param>
        </member>
        <member name="T:Fast.Core.Options.Dependencies.IValidateOptionsBuilder`2">
            <summary>
            选项验证依赖接口
            </summary>
            <typeparam name="TOptions">选项类型</typeparam>
            <typeparam name="TDep">依赖服务</typeparam>
        </member>
        <member name="M:Fast.Core.Options.Dependencies.IValidateOptionsBuilder`2.Validate(`0,`1)">
            <summary>
            复杂验证
            </summary>
            <param name="options">选项实例</param>
            <param name="dep">依赖服务</param>
        </member>
        <member name="T:Fast.Core.Options.Dependencies.IValidateOptionsBuilder`3">
            <summary>
            选项验证依赖接口
            </summary>
            <typeparam name="TOptions">选项类型</typeparam>
            <typeparam name="TDep1">依赖服务</typeparam>
            <typeparam name="TDep2">依赖服务</typeparam>
        </member>
        <member name="M:Fast.Core.Options.Dependencies.IValidateOptionsBuilder`3.Validate(`0,`1,`2)">
            <summary>
            复杂验证
            </summary>
            <param name="options">选项实例</param>
            <param name="dep1">依赖服务</param>
            <param name="dep2">依赖服务</param>
        </member>
        <member name="T:Fast.Core.Options.Dependencies.IValidateOptionsBuilder`4">
            <summary>
            选项验证依赖接口
            </summary>
            <typeparam name="TOptions">选项类型</typeparam>
            <typeparam name="TDep1">依赖服务</typeparam>
            <typeparam name="TDep2">依赖服务</typeparam>
            <typeparam name="TDep3">依赖服务</typeparam>
        </member>
        <member name="M:Fast.Core.Options.Dependencies.IValidateOptionsBuilder`4.Validate(`0,`1,`2,`3)">
            <summary>
            复杂验证
            </summary>
            <param name="options">选项实例</param>
            <param name="dep1">依赖服务</param>
            <param name="dep2">依赖服务</param>
            <param name="dep3">依赖服务</param>
        </member>
        <member name="T:Fast.Core.Options.Dependencies.IValidateOptionsBuilder`5">
            <summary>
            选项验证依赖接口
            </summary>
            <typeparam name="TOptions">选项类型</typeparam>
            <typeparam name="TDep1">依赖服务</typeparam>
            <typeparam name="TDep2">依赖服务</typeparam>
            <typeparam name="TDep3">依赖服务</typeparam>
            <typeparam name="TDep4">依赖服务</typeparam>
        </member>
        <member name="M:Fast.Core.Options.Dependencies.IValidateOptionsBuilder`5.Validate(`0,`1,`2,`3,`4)">
            <summary>
            复杂验证
            </summary>
            <param name="options">选项实例</param>
            <param name="dep1">依赖服务</param>
            <param name="dep2">依赖服务</param>
            <param name="dep3">依赖服务</param>
            <param name="dep4">依赖服务</param>
        </member>
        <member name="T:Fast.Core.Options.Dependencies.IValidateOptionsBuilder`6">
            <summary>
            选项验证依赖接口
            </summary>
            <typeparam name="TOptions">选项类型</typeparam>
            <typeparam name="TDep1">依赖服务</typeparam>
            <typeparam name="TDep2">依赖服务</typeparam>
            <typeparam name="TDep3">依赖服务</typeparam>
            <typeparam name="TDep4">依赖服务</typeparam>
            <typeparam name="TDep5">依赖服务</typeparam>
        </member>
        <member name="M:Fast.Core.Options.Dependencies.IValidateOptionsBuilder`6.Validate(`0,`1,`2,`3,`4,`5)">
            <summary>
            复杂验证
            </summary>
            <param name="options">选项实例</param>
            <param name="dep1">依赖服务</param>
            <param name="dep2">依赖服务</param>
            <param name="dep3">依赖服务</param>
            <param name="dep4">依赖服务</param>
            <param name="dep5">依赖服务</param>
        </member>
        <member name="T:Fast.Core.Options.Extensions.OptionsBuilderExtension">
            <summary>
            OptionsBuilder 拓展类
            </summary>
        </member>
        <member name="M:Fast.Core.Options.Extensions.OptionsBuilderExtension.ConfigureBuilder``1(Microsoft.Extensions.Options.OptionsBuilder{``0},Microsoft.Extensions.Configuration.IConfiguration,System.Type)">
            <summary>
            配置选项构建器
            </summary>
            <typeparam name="TOptions">选项类型</typeparam>
            <param name="optionsBuilder">选项构建器实例</param>
            <param name="configuration">配置对象</param>
            <param name="optionsBuilderType">选项构建器类型，默认为 typeof(TOptions) </param>
            <returns>选项构建器实例</returns>
        </member>
        <member name="M:Fast.Core.Options.Extensions.OptionsBuilderExtension.ConfigureBuilders``1(Microsoft.Extensions.Options.OptionsBuilder{``0},Microsoft.Extensions.Configuration.IConfiguration,System.Type[])">
            <summary>
            配置多个选项构建器
            </summary>
            <typeparam name="TOptions">选项类型</typeparam>
            <param name="optionsBuilder">选项构建器实例</param>
            <param name="configuration">配置对象</param>
            <param name="optionsBuilderTypes">配置多个选项构建器</param>
            <returns>选项构建器实例</returns>
            <exception cref="T:System.ArgumentNullException" />
        </member>
        <member name="M:Fast.Core.Options.Extensions.OptionsBuilderExtension.ConfigureBuilder``1(Microsoft.Extensions.Options.OptionsBuilder{``0},System.Type)">
            <summary>
            配置选项构建器
            </summary>
            <typeparam name="TOptions">选项类型</typeparam>
            <param name="optionsBuilder">选项构建器实例</param>
            <param name="optionsBuilderType">选项构建器类型，默认为 typeof(TOptions) </param>
            <returns>选项构建器实例</returns>
        </member>
        <member name="M:Fast.Core.Options.Extensions.OptionsBuilderExtension.ConfigureBuilders``1(Microsoft.Extensions.Options.OptionsBuilder{``0},System.Type[])">
            <summary>
            配置多个选项构建器
            </summary>
            <typeparam name="TOptions">选项类型</typeparam>
            <param name="optionsBuilder">选项构建器实例</param>
            <param name="optionsBuilderTypes">配置多个选项构建器</param>
            <returns>选项构建器实例</returns>
            <exception cref="T:System.ArgumentNullException" />
        </member>
        <member name="M:Fast.Core.Options.Extensions.OptionsBuilderExtension.ConfigureDefaults``1(Microsoft.Extensions.Options.OptionsBuilder{``0},Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            配置选项常规默认处理
            </summary>
            <typeparam name="TOptions">选项类型</typeparam>
            <param name="optionsBuilder">选项构建器实例</param>
            <param name="configuration">配置对象</param>
            <returns>选项构建器实例</returns>
        </member>
        <member name="M:Fast.Core.Options.Extensions.OptionsBuilderExtension.InvokeMapMethod(System.Object,System.Type,System.Type)">
            <summary>
            调用 OptionsBuilder{TOptions} 对应方法
            </summary>
            <param name="optionsBuilder">选项构建器实例</param>
            <param name="optionsBuilderType">选项构建器类型</param>
            <param name="builderInterface">构建器接口</param>
        </member>
        <member name="M:Fast.Core.Options.Extensions.OptionsBuilderExtension.BuildExpressionCallParameters(System.Reflection.MethodInfo,System.Boolean,System.Type[],System.Object[]@)">
            <summary>
            构建 Call 调用方法表达式参数
            </summary>
            <remarks>含实际传入参数</remarks>
            <param name="matchMethod">表达式匹配方法</param>
            <param name="isValidateMethod">是否校验方法</param>
            <param name="genericArguments">泛型参数</param>
            <param name="args">实际传入参数</param>
            <returns>调用参数表达式数组</returns>
        </member>
        <member name="M:Fast.Core.Options.Extensions.OptionsBuilderExtension.CreateDelegate(System.Type[],System.Type)">
            <summary>
            创建委托类型
            </summary>
            <param name="inputTypes">输入类型</param>
            <param name="outputType">输出类型</param>
            <returns>Action或Func 委托类型</returns>
        </member>
        <member name="T:Fast.Core.Reflection.Reflect">
            <summary>
            内部反射静态类
            </summary>
        </member>
        <member name="M:Fast.Core.Reflection.Reflect.GetEntryAssembly">
            <summary>
            获取入口程序集
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fast.Core.Reflection.Reflect.GetAssembly(System.String)">
            <summary>
            根据程序集名称获取运行时程序集
            </summary>
            <param name="assemblyName"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Core.Reflection.Reflect.LoadAssembly(System.String)">
            <summary>
            根据路径加载程序集
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Core.Reflection.Reflect.LoadAssembly(System.IO.MemoryStream)">
            <summary>
            通过流加载程序集
            </summary>
            <param name="assembly"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Core.Reflection.Reflect.GetType(System.String,System.String)">
            <summary>
            根据程序集名称、类型完整限定名获取运行时类型
            </summary>
            <param name="assemblyName"></param>
            <param name="typeFullName"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Core.Reflection.Reflect.GetType(System.Reflection.Assembly,System.String)">
            <summary>
            根据程序集和类型完全限定名获取运行时类型
            </summary>
            <param name="assembly"></param>
            <param name="typeFullName"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Core.Reflection.Reflect.GetType(System.IO.MemoryStream,System.String)">
            <summary>
            根据程序集和类型完全限定名获取运行时类型
            </summary>
            <param name="assembly"></param>
            <param name="typeFullName"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Core.Reflection.Reflect.GetAssemblyName(System.Reflection.Assembly)">
            <summary>
            获取程序集名称
            </summary>
            <param name="assembly"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Core.Reflection.Reflect.GetAssemblyName(System.Type)">
            <summary>
            获取程序集名称
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Core.Reflection.Reflect.GetAssemblyName(System.Reflection.TypeInfo)">
            <summary>
            获取程序集名称
            </summary>
            <param name="typeInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Core.Reflection.Reflect.GetStringType(System.String)">
            <summary>
            加载程序集类型，支持格式：程序集;网站类型命名空间
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="T:Fast.Core.RemoteRequest.RemoteRequestUtil">
            <summary>
            远程请求工具类
            </summary>
        </member>
        <member name="M:Fast.Core.RemoteRequest.RemoteRequestUtil.GetDaySentence">
            <summary>
            得到每日一句
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fast.Core.RemoteRequest.RemoteRequestUtil.GetWeatherInfo(System.String)">
            <summary>
            得到天气预报
            </summary>
            <param name="cityName"></param>
            <returns></returns>
        </member>
        <member name="P:Fast.Core.RemoteRequest.DaySentenceEntity.Picture2">
            <summary>
            图片2
            </summary>
        </member>
        <member name="P:Fast.Core.RemoteRequest.DaySentenceEntity.Caption">
            <summary>
            说明
            </summary>
        </member>
        <member name="P:Fast.Core.RemoteRequest.DaySentenceEntity.Note">
            <summary>
            内容
            </summary>
        </member>
        <member name="P:Fast.Core.RemoteRequest.DaySentenceEntity.Content">
            <summary>
            英文内容
            </summary>
        </member>
        <member name="P:Fast.Core.RemoteRequest.DaySentenceEntity.shareImg">
            <summary>
            分享图片
            </summary>
        </member>
        <member name="P:Fast.Core.RemoteRequest.DaySentenceEntity.DateTime">
            <summary>
            时间
            </summary>
        </member>
        <member name="P:Fast.Core.RemoteRequest.WeatherInfoEntity.Yesterday">
            <summary>
            昨日天气
            </summary>
        </member>
        <member name="P:Fast.Core.RemoteRequest.WeatherInfoEntity.City">
            <summary>
            城市
            </summary>
        </member>
        <member name="P:Fast.Core.RemoteRequest.WeatherInfoEntity.Forecast">
            <summary>
            未来五天天气
            </summary>
        </member>
        <member name="P:Fast.Core.RemoteRequest.WeatherInfoEntity.Ganmao">
            <summary>
            感冒
            </summary>
        </member>
        <member name="P:Fast.Core.RemoteRequest.WeatherInfoEntity.Wendu">
            <summary>
            温度
            </summary>
        </member>
        <member name="P:Fast.Core.RemoteRequest.WeatherInfoEntity.Success">
            <summary>
            是否成功
            </summary>
        </member>
        <member name="P:Fast.Core.RemoteRequest.WeatherInfoEntity.Desc">
            <summary>
            失败描述
            </summary>
        </member>
        <member name="T:Fast.Core.RemoteRequest.WeatherInfoEntity.WeatherInfo">
            <summary>
            天气信息
            </summary>
        </member>
        <member name="P:Fast.Core.RemoteRequest.WeatherInfoEntity.WeatherInfo.Date">
            <summary>
            时间
            </summary>
        </member>
        <member name="P:Fast.Core.RemoteRequest.WeatherInfoEntity.WeatherInfo.High">
            <summary>
            最高温度
            </summary>
        </member>
        <member name="P:Fast.Core.RemoteRequest.WeatherInfoEntity.WeatherInfo.Fengli">
            <summary>
            风力
            </summary>
        </member>
        <member name="P:Fast.Core.RemoteRequest.WeatherInfoEntity.WeatherInfo.Low">
            <summary>
            最低温度
            </summary>
        </member>
        <member name="P:Fast.Core.RemoteRequest.WeatherInfoEntity.WeatherInfo.Fengxiang">
            <summary>
            分向
            </summary>
        </member>
        <member name="P:Fast.Core.RemoteRequest.WeatherInfoEntity.WeatherInfo.Type">
            <summary>
            类型
            </summary>
        </member>
        <member name="T:Fast.Core.Templates.Extensions.StringRenderExtension">
            <summary>
            字符串渲染模板拓展类
            </summary>
        </member>
        <member name="F:Fast.Core.Templates.Extensions.StringRenderExtension.commonTemplatePattern">
            <summary>
            模板正则表达式
            </summary>
        </member>
        <member name="F:Fast.Core.Templates.Extensions.StringRenderExtension.configTemplatePattern">
            <summary>
            读取配置模板正则表达式
            </summary>
        </member>
        <member name="M:Fast.Core.Templates.Extensions.StringRenderExtension.Render(System.String,System.Object,System.Boolean)">
            <summary>
            渲染模板
            </summary>
            <param name="template"></param>
            <param name="templateData"></param>
            <param name="encode"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Core.Templates.Extensions.StringRenderExtension.Render(System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean)">
            <summary>
            渲染模板
            </summary>
            <param name="template"></param>
            <param name="templateData"></param>
            <param name="encode"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Core.Templates.Extensions.StringRenderExtension.Render(System.String,System.Boolean)">
            <summary>
            从配置中渲染字符串模板
            </summary>
            <param name="template"></param>
            <param name="encode"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Core.Templates.Extensions.StringRenderExtension.MatchTemplateValue(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            匹配模板值
            </summary>
            <param name="template"></param>
            <param name="templateData"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Core.Templates.Extensions.StringRenderExtension.ResolveTemplateValue(System.String,System.Object)">
            <summary>
            解析模板的值
            </summary>
            <param name="template"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="T:Fast.Core.Templates.TP">
            <summary>
            模板静态类
            </summary>
        </member>
        <member name="F:Fast.Core.Templates.TP._lazyRegex">
            <summary>
            模板正则表达式对象
            </summary>
        </member>
        <member name="M:Fast.Core.Templates.TP.Wrapper(System.String,System.String,System.String[])">
            <summary>
            生成规范日志模板
            </summary>
            <param name="title">标题</param>
            <param name="description">描述</param>
            <param name="items">列表项，如果以 ##xxx## 开头，自动生成 xxx: 属性</param>
            <returns><see cref="T:System.String"/></returns>
        </member>
        <member name="M:Fast.Core.Templates.TP.WrapperRectangle(System.String[],System.Int32,System.Int32)">
            <summary>
            矩形包裹
            </summary>
            <param name="lines">多行消息</param>
            <param name="align">对齐方式，-1/左对齐；0/居中对其；1/右对齐</param>
            <param name="pad">间隙</param>
            <returns><see cref="T:System.String"/></returns>
        </member>
        <member name="M:Fast.Core.Templates.TP.PadRight(System.String,System.Int32)">
            <summary>
            等宽文字对齐
            </summary>
            <param name="str"></param>
            <param name="totalByteCount"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Core.Templates.TP.GetLength(System.String)">
            <summary>
            获取字符串长度
            </summary>
            <param name="str">字符串</param>
            <returns>字符串长度</returns>
        </member>
        <member name="T:Fast.Core.UnifyResult.Attributes.NonUnifyAttribute">
            <summary>
            禁止规范化处理
            </summary>
        </member>
        <member name="T:Fast.Core.UnifyResult.Attributes.UnifyModelAttribute">
            <summary>
            规范化模型特性
            </summary>
        </member>
        <member name="M:Fast.Core.UnifyResult.Attributes.UnifyModelAttribute.#ctor(System.Type)">
            <summary>
            规范化模型
            </summary>
            <param name="modelType"></param>
        </member>
        <member name="P:Fast.Core.UnifyResult.Attributes.UnifyModelAttribute.ModelType">
            <summary>
            模型类型（泛型）
            </summary>
        </member>
        <member name="T:Fast.Core.UnifyResult.Attributes.UnifyProviderAttribute">
            <summary>
            规范化提供器特性
            </summary>
        </member>
        <member name="M:Fast.Core.UnifyResult.Attributes.UnifyProviderAttribute.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Fast.Core.UnifyResult.Attributes.UnifyProviderAttribute.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="name"></param>
        </member>
        <member name="P:Fast.Core.UnifyResult.Attributes.UnifyProviderAttribute.Name">
            <summary>
            提供器名称
            </summary>
        </member>
        <member name="T:Fast.Core.UnifyResult.Attributes.UnifyResultAttribute">
            <summary>
            规范化结果配置
            </summary>
        </member>
        <member name="M:Fast.Core.UnifyResult.Attributes.UnifyResultAttribute.#ctor(System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="statusCode"></param>
        </member>
        <member name="M:Fast.Core.UnifyResult.Attributes.UnifyResultAttribute.#ctor(System.Type)">
            <summary>
            构造函数
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:Fast.Core.UnifyResult.Attributes.UnifyResultAttribute.#ctor(System.Type,System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="type"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Fast.Core.UnifyResult.Attributes.UnifyResultAttribute.#ctor(System.Type,System.Int32,System.Reflection.MethodInfo)">
            <summary>
            构造函数
            </summary>
            <param name="type"></param>
            <param name="statusCode"></param>
            <param name="method"></param>
        </member>
        <member name="M:Fast.Core.UnifyResult.Attributes.UnifyResultAttribute.WrapType(System.Type,System.Reflection.MethodInfo)">
            <summary>
            包装类型
            </summary>
            <param name="type"></param>
            <param name="method"></param>
        </member>
        <member name="T:Fast.Core.UnifyResult.Attributes.UnifySerializerSettingAttribute">
            <summary>
            规范化序列化配置
            </summary>
        </member>
        <member name="M:Fast.Core.UnifyResult.Attributes.UnifySerializerSettingAttribute.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="name"></param>
        </member>
        <member name="P:Fast.Core.UnifyResult.Attributes.UnifySerializerSettingAttribute.Name">
            <summary>
            序列化名称
            </summary>
        </member>
        <member name="T:Fast.Core.UnifyResult.Extensions.UnifyResultMiddlewareExtensions">
            <summary>
            状态码中间件拓展
            </summary>
        </member>
        <member name="M:Fast.Core.UnifyResult.Extensions.UnifyResultMiddlewareExtensions.UseUnifyResultStatusCodes(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            添加状态码拦截中间件
            </summary>
            <param name="builder"></param>
            <returns></returns>
        </member>
        <member name="T:Fast.Core.UnifyResult.Extensions.UnifyResultServiceCollectionExtensions">
            <summary>
            规范化结果服务拓展
            </summary>
        </member>
        <member name="M:Fast.Core.UnifyResult.Extensions.UnifyResultServiceCollectionExtensions.AddUnifyResult(Microsoft.Extensions.DependencyInjection.IMvcBuilder)">
            <summary>
            添加规范化结果服务
            </summary>
            <param name="mvcBuilder"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Core.UnifyResult.Extensions.UnifyResultServiceCollectionExtensions.AddUnifyResult(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            添加规范化结果服务
            </summary>
            <param name="services"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Core.UnifyResult.Extensions.UnifyResultServiceCollectionExtensions.AddUnifyResult``1(Microsoft.Extensions.DependencyInjection.IMvcBuilder)">
            <summary>
            添加规范化结果服务
            </summary>
            <typeparam name="TUnifyResultProvider"></typeparam>
            <param name="mvcBuilder"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Core.UnifyResult.Extensions.UnifyResultServiceCollectionExtensions.AddUnifyResult``1(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            添加规范化结果服务
            </summary>
            <typeparam name="TUnifyResultProvider"></typeparam>
            <param name="services"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Core.UnifyResult.Extensions.UnifyResultServiceCollectionExtensions.AddUnifyProvider``1(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            替换默认的规范化结果
            </summary>
            <typeparam name="TUnifyResultProvider"></typeparam>
            <param name="services"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Core.UnifyResult.Extensions.UnifyResultServiceCollectionExtensions.AddUnifyProvider``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String)">
            <summary>
            添加规范化提供器
            </summary>
            <typeparam name="TUnifyResultProvider"></typeparam>
            <param name="services"></param>
            <param name="providerName"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Core.UnifyResult.Extensions.UnifyResultServiceCollectionExtensions.AddUnifyJsonOptions(Microsoft.Extensions.DependencyInjection.IMvcBuilder,System.String,System.Object)">
            <summary>
            添加规范化序列化配置
            </summary>
            <param name="mvcBuilder"></param>
            <param name="providerName"></param>
            <param name="serializerSettings"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Core.UnifyResult.Extensions.UnifyResultServiceCollectionExtensions.AddUnifyJsonOptions(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String,System.Object)">
            <summary>
            添加规范化序列化配置
            </summary>
            <param name="services"></param>
            <param name="providerName"></param>
            <param name="serializerSettings"></param>
            <returns></returns>
        </member>
        <member name="T:Fast.Core.UnifyResult.Filters.SucceededUnifyResultFilter">
            <summary>
            规范化结构（请求成功）过滤器
            </summary>
        </member>
        <member name="F:Fast.Core.UnifyResult.Filters.SucceededUnifyResultFilter.FilterOrder">
            <summary>
            过滤器排序
            </summary>
        </member>
        <member name="P:Fast.Core.UnifyResult.Filters.SucceededUnifyResultFilter.Order">
            <summary>
            排序属性
            </summary>
        </member>
        <member name="M:Fast.Core.UnifyResult.Filters.SucceededUnifyResultFilter.OnActionExecutionAsync(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext,Microsoft.AspNetCore.Mvc.Filters.ActionExecutionDelegate)">
            <summary>
            处理规范化结果
            </summary>
            <param name="context"></param>
            <param name="next"></param>
            <returns></returns>
        </member>
        <member name="T:Fast.Core.UnifyResult.Internal.RESTfulResult`1">
            <summary>
            RESTful 风格结果集
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Fast.Core.UnifyResult.Internal.RESTfulResult`1.StatusCode">
            <summary>
            状态码
            </summary>
        </member>
        <member name="P:Fast.Core.UnifyResult.Internal.RESTfulResult`1.Data">
            <summary>
            数据
            </summary>
        </member>
        <member name="P:Fast.Core.UnifyResult.Internal.RESTfulResult`1.Succeeded">
            <summary>
            执行成功
            </summary>
        </member>
        <member name="P:Fast.Core.UnifyResult.Internal.RESTfulResult`1.Errors">
            <summary>
            错误信息
            </summary>
        </member>
        <member name="P:Fast.Core.UnifyResult.Internal.RESTfulResult`1.Extras">
            <summary>
            附加数据
            </summary>
        </member>
        <member name="P:Fast.Core.UnifyResult.Internal.RESTfulResult`1.Timestamp">
            <summary>
            时间戳
            </summary>
        </member>
        <member name="T:Fast.Core.UnifyResult.Internal.UnifyMetadata">
            <summary>
            规范化元数据
            </summary>
        </member>
        <member name="P:Fast.Core.UnifyResult.Internal.UnifyMetadata.ProviderName">
            <summary>
            提供器名称
            </summary>
        </member>
        <member name="P:Fast.Core.UnifyResult.Internal.UnifyMetadata.ProviderType">
            <summary>
            提供器类型
            </summary>
        </member>
        <member name="P:Fast.Core.UnifyResult.Internal.UnifyMetadata.ResultType">
            <summary>
            统一的结果类型
            </summary>
        </member>
        <member name="T:Fast.Core.UnifyResult.Middlewares.UnifyResultStatusCodesMiddleware">
            <summary>
            状态码中间件
            </summary>
        </member>
        <member name="F:Fast.Core.UnifyResult.Middlewares.UnifyResultStatusCodesMiddleware._next">
            <summary>
            请求委托
            </summary>
        </member>
        <member name="M:Fast.Core.UnifyResult.Middlewares.UnifyResultStatusCodesMiddleware.#ctor(Microsoft.AspNetCore.Http.RequestDelegate)">
            <summary>
            构造函数
            </summary>
            <param name="next"></param>
        </member>
        <member name="M:Fast.Core.UnifyResult.Middlewares.UnifyResultStatusCodesMiddleware.InvokeAsync(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            中间件执行方法
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:Fast.Core.UnifyResult.Options.UnifyResultSettingsOptions">
            <summary>
            规范化配置选项
            </summary>
        </member>
        <member name="P:Fast.Core.UnifyResult.Options.UnifyResultSettingsOptions.Return200StatusCodes">
            <summary>
            设置返回 200 状态码列表
            <para>默认：401，403，如果设置为 null，则标识所有状态码都返回 200 </para>
            </summary>
        </member>
        <member name="P:Fast.Core.UnifyResult.Options.UnifyResultSettingsOptions.AdaptStatusCodes">
            <summary>
            适配（篡改）Http 状态码（只支持短路状态码，比如 401，403，500 等）
            </summary>
        </member>
        <member name="P:Fast.Core.UnifyResult.Options.UnifyResultSettingsOptions.SupportMvcController">
            <summary>
            是否支持 MVC 控制台规范化处理
            </summary>
        </member>
        <member name="M:Fast.Core.UnifyResult.Options.UnifyResultSettingsOptions.PostConfigure(Fast.Core.UnifyResult.Options.UnifyResultSettingsOptions,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            选项后期配置
            </summary>
            <param name="options"></param>
            <param name="configuration"></param>
        </member>
        <member name="T:Fast.Core.UnifyResult.Providers.IUnifyResultProvider">
            <summary>
            规范化结果提供器
            </summary>
        </member>
        <member name="M:Fast.Core.UnifyResult.Providers.IUnifyResultProvider.OnException(Microsoft.AspNetCore.Mvc.Filters.ExceptionContext,Fast.Core.FriendlyException.Internal.ExceptionMetadata)">
            <summary>
            异常返回值
            </summary>
            <param name="context"></param>
            <param name="metadata"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Core.UnifyResult.Providers.IUnifyResultProvider.OnSucceeded(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext,System.Object)">
            <summary>
            成功返回值
            </summary>
            <param name="context"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Core.UnifyResult.Providers.IUnifyResultProvider.OnValidateFailed(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext,Fast.Core.DataValidation.Internal.ValidationMetadata)">
            <summary>
            验证失败返回值
            </summary>
            <param name="context"></param>
            <param name="metadata"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Core.UnifyResult.Providers.IUnifyResultProvider.OnResponseStatusCodes(Microsoft.AspNetCore.Http.HttpContext,System.Int32,Fast.Core.UnifyResult.Options.UnifyResultSettingsOptions)">
            <summary>
            拦截返回状态码
            </summary>
            <param name="context"></param>
            <param name="statusCode"></param>
            <param name="unifyResultSettings"></param>
            <returns></returns>
        </member>
        <member name="T:Fast.Core.UnifyResult.Providers.RESTfulResultProvider">
            <summary>
            RESTful 风格返回值
            </summary>
        </member>
        <member name="M:Fast.Core.UnifyResult.Providers.RESTfulResultProvider.OnException(Microsoft.AspNetCore.Mvc.Filters.ExceptionContext,Fast.Core.FriendlyException.Internal.ExceptionMetadata)">
            <summary>
            异常返回值
            </summary>
            <param name="context"></param>
            <param name="metadata"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Core.UnifyResult.Providers.RESTfulResultProvider.OnSucceeded(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext,System.Object)">
            <summary>
            成功返回值
            </summary>
            <param name="context"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Core.UnifyResult.Providers.RESTfulResultProvider.OnValidateFailed(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext,Fast.Core.DataValidation.Internal.ValidationMetadata)">
            <summary>
            验证失败/业务异常返回值
            </summary>
            <param name="context"></param>
            <param name="metadata"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Core.UnifyResult.Providers.RESTfulResultProvider.OnResponseStatusCodes(Microsoft.AspNetCore.Http.HttpContext,System.Int32,Fast.Core.UnifyResult.Options.UnifyResultSettingsOptions)">
            <summary>
            特定状态码返回值
            </summary>
            <param name="context"></param>
            <param name="statusCode"></param>
            <param name="unifyResultSettings"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Core.UnifyResult.Providers.RESTfulResultProvider.RESTfulResult(System.Int32,System.Boolean,System.Object,System.Object)">
            <summary>
            返回 RESTful 风格结果集
            </summary>
            <param name="statusCode"></param>
            <param name="succeeded"></param>
            <param name="data"></param>
            <param name="errors"></param>
            <returns></returns>
        </member>
        <member name="T:Fast.Core.UnifyResult.UnifyContext">
            <summary>
            规范化结果上下文
            </summary>
        </member>
        <member name="F:Fast.Core.UnifyResult.UnifyContext.EnabledUnifyHandler">
            <summary>
            是否启用规范化结果
            </summary>
        </member>
        <member name="F:Fast.Core.UnifyResult.UnifyContext.UnifyResultExtrasKey">
            <summary>
            规范化结果额外数据键
            </summary>
        </member>
        <member name="F:Fast.Core.UnifyResult.UnifyContext.UnifyProviders">
            <summary>
            规范化结果提供器
            </summary>
        </member>
        <member name="F:Fast.Core.UnifyResult.UnifyContext.UnifySerializerSettings">
            <summary>
            规范化序列化配置
            </summary>
        </member>
        <member name="M:Fast.Core.UnifyResult.UnifyContext.GetExceptionMetadata(Microsoft.AspNetCore.Mvc.ActionContext)">
            <summary>
            获取异常元数据
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Core.UnifyResult.UnifyContext.Fill(System.Object)">
            <summary>
            填充附加信息
            </summary>
            <param name="extras"></param>
        </member>
        <member name="M:Fast.Core.UnifyResult.UnifyContext.Take">
            <summary>
            读取附加信息
            </summary>
        </member>
        <member name="M:Fast.Core.UnifyResult.UnifyContext.SetResponseStatusCodes(Microsoft.AspNetCore.Http.HttpContext,System.Int32,Fast.Core.UnifyResult.Options.UnifyResultSettingsOptions)">
            <summary>
            设置响应状态码
            </summary>
            <param name="context"></param>
            <param name="statusCode"></param>
            <param name="unifyResultSettings"></param>
        </member>
        <member name="M:Fast.Core.UnifyResult.UnifyContext.GetSerializerSettings(Microsoft.AspNetCore.Mvc.Filters.FilterContext)">
            <summary>
            获取序列化配置
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Core.UnifyResult.UnifyContext.GetSerializerSettings(System.String)">
            <summary>
            获取序列化配置
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Core.UnifyResult.UnifyContext.CheckSucceededNonUnify(System.Reflection.MethodInfo,Fast.Core.UnifyResult.Providers.IUnifyResultProvider@,System.Boolean)">
            <summary>
            检查请求成功是否进行规范化处理
            </summary>
            <param name="method"></param>
            <param name="unifyResult"></param>
            <param name="isWebRequest"></param>
            <returns>返回 true 跳过处理，否则进行规范化处理</returns>
        </member>
        <member name="M:Fast.Core.UnifyResult.UnifyContext.CheckFailedNonUnify(System.Reflection.MethodInfo,Fast.Core.UnifyResult.Providers.IUnifyResultProvider@)">
            <summary>
            检查请求失败（验证失败、抛异常）是否进行规范化处理
            </summary>
            <param name="method"></param>
            <param name="unifyResult"></param>
            <returns>返回 true 跳过处理，否则进行规范化处理</returns>
        </member>
        <member name="M:Fast.Core.UnifyResult.UnifyContext.CheckStatusCodeNonUnify(Microsoft.AspNetCore.Http.HttpContext,Fast.Core.UnifyResult.Providers.IUnifyResultProvider@)">
            <summary>
            检查短路状态码（>=400）是否进行规范化处理
            </summary>
            <param name="context"></param>
            <param name="unifyResult"></param>
            <returns>返回 true 跳过处理，否则进行规范化处理</returns>
        </member>
        <member name="M:Fast.Core.UnifyResult.UnifyContext.CheckSupportMvcController(Microsoft.AspNetCore.Http.HttpContext,Microsoft.AspNetCore.Mvc.Controllers.ControllerActionDescriptor,Fast.Core.UnifyResult.Options.UnifyResultSettingsOptions@)">
            <summary>
            判断是否支持 Mvc 控制器规范化处理
            </summary>
            <param name="httpContext"></param>
            <param name="actionDescriptor"></param>
            <param name="unifyResultSettings"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Core.UnifyResult.UnifyContext.CheckVaildResult(Microsoft.AspNetCore.Mvc.IActionResult,System.Object@)">
            <summary>
            检查是否是有效的结果（可进行规范化的结果）
            </summary>
            <param name="result"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Core.UnifyResult.UnifyContext.GetMethodUnityMetadata(System.Reflection.MethodInfo)">
            <summary>
            获取方法规范化元数据
            </summary>
            <remarks>如果追求性能，这里理应缓存起来，避免每次请求去检测</remarks>
            <param name="method"></param>
            <returns></returns>
        </member>
    </members>
</doc>
