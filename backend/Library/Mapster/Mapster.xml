<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Mapster</name>
    </assembly>
    <members>
        <member name="T:Mapster.Adapters.ClassAdapter">
            <summary>
            Maps one class to another.
            </summary>
            <remarks>The operations in this class must be extremely fast.  Make sure to benchmark before making **any** changes in here.
            The core Adapt method is critically important to performance.
            </remarks>
        </member>
        <member name="T:Mapster.IRegister">
            <summary>
            Implement to allow mappings to be found when scanning assemblies.
            Place mappings in the Register method.
            Call TypeAdapterConfig.ScanAssemblies to perform scanning <see cref="T:Mapster.TypeAdapterConfig"/>
            </summary>
        </member>
        <member name="M:Mapster.TypeAdapter.Adapt``1(System.Object)">
            <summary>
            Adapt the source object to the destination type.
            </summary>
            <typeparam name="TDestination">Destination type.</typeparam>
            <param name="source">Source object to adapt.</param>
            <returns>Adapted destination type.</returns>
        </member>
        <member name="M:Mapster.TypeAdapter.Adapt``1(System.Object,Mapster.TypeAdapterConfig)">
            <summary>
            Adapt the source object to the destination type.
            </summary>
            <typeparam name="TDestination">Destination type.</typeparam>
            <param name="source">Source object to adapt.</param>
            <param name="config">Configuration</param>
            <returns>Adapted destination type.</returns>
        </member>
        <member name="M:Mapster.TypeAdapter.Adapt``2(``0)">
            <summary>
            Adapt the source object to the destination type.
            </summary>
            <typeparam name="TSource">Source type.</typeparam>
            <typeparam name="TDestination">Destination type.</typeparam>
            <param name="source">Source object to adapt.</param>
            <returns>Adapted destination type.</returns>
        </member>
        <member name="M:Mapster.TypeAdapter.Adapt``2(``0,Mapster.TypeAdapterConfig)">
            <summary>
            Adapt the source object to the destination type.
            </summary>
            <typeparam name="TSource">Source type.</typeparam>
            <typeparam name="TDestination">Destination type.</typeparam>
            <param name="source">Source object to adapt.</param>
            <param name="config">Configuration</param>
            <returns>Adapted destination type.</returns>
        </member>
        <member name="M:Mapster.TypeAdapter.Adapt``2(``0,``1)">
            <summary>
            Adapt the source object to the existing destination object.
            </summary>
            <typeparam name="TSource">Source type.</typeparam>
            <typeparam name="TDestination">Destination type.</typeparam>
            <param name="source">Source object to adapt.</param>
            <param name="destination">The destination object to populate.</param>
            <returns>Adapted destination type.</returns>
        </member>
        <member name="M:Mapster.TypeAdapter.Adapt``2(``0,``1,Mapster.TypeAdapterConfig)">
            <summary>
            Adapt the source object to the existing destination object.
            </summary>
            <typeparam name="TSource">Source type.</typeparam>
            <typeparam name="TDestination">Destination type.</typeparam>
            <param name="source">Source object to adapt.</param>
            <param name="destination">The destination object to populate.</param>
            <param name="config">Configuration</param>
            <returns>Adapted destination type.</returns>
        </member>
        <member name="M:Mapster.TypeAdapter.Adapt(System.Object,System.Type,System.Type)">
            <summary>
            Adapt the source object to the destination type.
            </summary>
            <param name="source">Source object to adapt.</param>
            <param name="sourceType">The type of the source object.</param>
            <param name="destinationType">The type of the destination object.</param>
            <returns>Adapted destination type.</returns>
        </member>
        <member name="M:Mapster.TypeAdapter.Adapt(System.Object,System.Type,System.Type,Mapster.TypeAdapterConfig)">
            <summary>
            Adapt the source object to the destination type.
            </summary>
            <param name="source">Source object to adapt.</param>
            <param name="sourceType">The type of the source object.</param>
            <param name="destinationType">The type of the destination object.</param>
            <param name="config">Configuration</param>
            <returns>Adapted destination type.</returns>
        </member>
        <member name="M:Mapster.TypeAdapter.Adapt(System.Object,System.Object,System.Type,System.Type)">
            <summary>
            Adapt the source object to an existing destination object.
            </summary>
            <param name="source">Source object to adapt.</param>
            <param name="destination">Destination object to populate.</param>
            <param name="sourceType">The type of the source object.</param>
            <param name="destinationType">The type of the destination object.</param>
            <returns>Adapted destination type.</returns>
        </member>
        <member name="M:Mapster.TypeAdapter.Adapt(System.Object,System.Object,System.Type,System.Type,Mapster.TypeAdapterConfig)">
            <summary>
            Adapt the source object to an existing destination object.
            </summary>
            <param name="source">Source object to adapt.</param>
            <param name="destination">Destination object to populate.</param>
            <param name="sourceType">The type of the source object.</param>
            <param name="destinationType">The type of the destination object.</param>
            <param name="config">Configuration</param>
            <returns>Adapted destination type.</returns>
        </member>
        <member name="M:Mapster.TypeAdapterBuilder`1.ForkConfig(System.Action{Mapster.TypeAdapterConfig},System.String,System.Int32)">
            <summary>
            Allow you to keep config and mapping inline.
            </summary>
            <param name="action"></param>
            <param name="key1"></param>
            <param name="key2"></param>
            <returns></returns>
        </member>
        <member name="M:Mapster.TypeAdapterBuilder`1.AddParameters(System.String,System.Object)">
            <summary>
            Passing runtime value.
            </summary>
            <param name="name">Parameter name.</param>
            <param name="value">Parameter value</param>
            <returns></returns>
        </member>
        <member name="M:Mapster.TypeAdapterBuilder`1.AdaptToType``1">
            <summary>
            Mapping to new type using in adapter builder scenario.
            </summary>
            <typeparam name="TDestination">Destination type to adopt.</typeparam>
            <returns></returns>
        </member>
        <member name="M:Mapster.TypeAdapterBuilder`1.Map``1">
            <summary>
            Perform mapping to type of destination in adapter builder scenario.
            </summary>
            <typeparam name="TDestination">Destination type to map.</typeparam>
            <returns></returns>
        </member>
        <member name="M:Mapster.TypeAdapterBuilder`1.AdaptTo``1(``0)">
            <summary>
            Mapping to existing object in adapter builder scenario.
            </summary>
            <typeparam name="TDestination">Destination type to adopt.</typeparam>
            <param name="destination"></param>
            <returns></returns>
        </member>
        <member name="M:Mapster.TypeAdapterBuilder`1.CreateMapExpression``1">
            <summary>
            Get mapping expression.
            </summary>
            <typeparam name="TDestination">Destination type to create map expression.</typeparam>
            <returns></returns>
        </member>
        <member name="M:Mapster.TypeAdapterBuilder`1.CreateMapToTargetExpression``1">
            <summary>
            Get mapping to existing object expression.
            </summary>
            <typeparam name="TDestination">Destination type to create map to target expression.</typeparam>
            <returns></returns>
        </member>
        <member name="M:Mapster.TypeAdapterBuilder`1.CreateProjectionExpression``1">
            <summary>
            Get mapping from queryable expression.
            </summary>
            <typeparam name="TDestination">Destination type to create projection expression.</typeparam>
            <returns></returns>
        </member>
        <member name="M:Mapster.TypeAdapterConfig.When(System.Func{System.Type,System.Type,Mapster.MapType,System.Boolean})">
            <summary>
            allows you to specify conditions for when a mapping should occur based on source and destination types and the mapping type.
            </summary>
            <param name="canMap"></param>
            <returns></returns>
        </member>
        <member name="M:Mapster.TypeAdapterConfig.When(System.Func{Mapster.PreCompileArgument,System.Boolean})">
            <summary>
            allows you to specify conditions for when a mapping should occur based on PreCompileArgument delegate
            </summary>
            <param name="canMap"></param>
            <returns></returns>
        </member>
        <member name="M:Mapster.TypeAdapterConfig.NewConfig``2">
            <summary>
            Creates a new configuration for mapping between source and destination types.
            </summary>
            <typeparam name="TSource">Source type.</typeparam>
            <typeparam name="TDestination">Destination type.</typeparam>
            <returns></returns>
        </member>
        <member name="M:Mapster.TypeAdapterConfig.NewConfig(System.Type,System.Type)">
            <summary>
            Creates a new configuration for mapping between source and destination types.
            </summary>
            <param name="sourceType">Source type to create new configuration.</param>
            <param name="destinationType">Destination type to create new configuration.</param>
            <returns></returns>
        </member>
        <member name="M:Mapster.TypeAdapterConfig.ForType``2">
            <summary>
            Configures a mapping for a specific source and destination type pair.
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TDestination"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Mapster.TypeAdapterConfig.ForType(System.Type,System.Type)">
            <summary>
            Configures a mapping for a specific source and destination type pair.
            </summary>
            <param name="sourceType"></param>
            <param name="destinationType"></param>
            <returns></returns>
        </member>
        <member name="M:Mapster.TypeAdapterConfig.ForDestinationType``1">
            <summary>
            Configures a mapping for a specific destination type.
            </summary>
            <typeparam name="TDestination">Destination type.</typeparam>
            <returns></returns>
        </member>
        <member name="M:Mapster.TypeAdapterConfig.ForDestinationType(System.Type)">
            <summary>
            Configures a mapping for a specific destination type.
            </summary>
            <param name="destinationType">Destination type.</param>
            <returns></returns>
        </member>
        <member name="M:Mapster.TypeAdapterConfig.Compile(System.Boolean)">
            <summary>
            Validates and cache mapping instructions.
            </summary>
            <param name="failFast">A boolean parameter that determines whether exceptions should be thrown immediately when mapping errors occur or whether to collect and aggregate them. The default value is true.</param>
            <exception cref="T:System.AggregateException"></exception>
        </member>
        <member name="M:Mapster.TypeAdapterConfig.Compile(System.Type,System.Type)">
            <summary>
            Validates and cache mapping instructions.
            </summary>
            <param name="sourceType">Source type to compile.</param>
            <param name="destinationType">Destination type to compile.</param>
        </member>
        <member name="M:Mapster.TypeAdapterConfig.CompileProjection">
            <summary>
            Validates and cache mapping instructions for queryable.
            </summary>
        </member>
        <member name="M:Mapster.TypeAdapterConfig.CompileProjection(System.Type,System.Type)">
            <summary>
            Validates and cache mapping instructions for queryable.
            </summary>
            <param name="sourceType">Source type to compile.</param>
            <param name="destinationType">Destination type to compile.</param>
        </member>
        <member name="M:Mapster.TypeAdapterConfig.Scan(System.Reflection.Assembly[])">
            <summary>
            Scans and registers mappings from specified assemblies.
            </summary>
            <param name="assemblies">assemblies to scan.</param>
            <returns>A list of registered mappings</returns>
        </member>
        <member name="M:Mapster.TypeAdapterConfig.Apply(System.Collections.Generic.IEnumerable{System.Lazy{Mapster.IRegister}})">
            <summary>
            Applies type mappings.
            </summary>
            <param name="registers">collection of IRegister interface to apply mapping.</param>
        </member>
        <member name="M:Mapster.TypeAdapterConfig.Apply(System.Collections.Generic.IEnumerable{Mapster.IRegister})">
            <summary>
            Applies type mappings.
            </summary>
            <param name="registers">collection of IRegister interface to apply mapping.</param>
        </member>
        <member name="M:Mapster.TypeAdapterConfig.Apply(Mapster.IRegister[])">
            <summary>
            Applies type mappings.
            </summary>
            <param name="registers">IRegister interface params to apply mapping.</param>
        </member>
        <member name="M:Mapster.TypeAdapterConfig.Clear">
            <summary>
            Clears all type mapping rules and settings
            </summary>
        </member>
        <member name="M:Mapster.TypeAdapterConfig.Remove(System.Type,System.Type)">
            <summary>
            Removes a specific type mapping rule.
            </summary>
            <param name="sourceType">Source type to remove.</param>
            <param name="destinationType">Destination type to remove.</param>
        </member>
        <member name="M:Mapster.TypeAdapterConfig.Clone">
            <summary>
            Clones the current TypeAdapterConfig.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mapster.TypeAdapterConfig`2.NewConfig">
            <summary>
             Creates a new configuration for mapping between the source and destination types.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mapster.TypeAdapterConfig`2.ForType">
            <summary>
            Creates a configuration for mapping between the source and destination types.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mapster.TypeAdapterConfig`2.Clear">
            <summary>
            Clears the type mapping configuration for the specified source and destination types.
            </summary>
        </member>
        <member name="M:Mapster.TypeAdapterSetter`2.BeforeMapping(System.Action{`0,`1,`1})">
            <summary>
            Specifies a custom action to be executed before mapping has completed.
            </summary>
            <param name="action">
            The action to be executed. The action must have the following signature:<br/>
            <para>void Action(TSource source, TDestination result, TDestination? destination)</para>
            Where *source* is the source object, *result* is the final mapping destination and *destination* is the optional target object (e.g. var result = source.Adapt(destination)).
            </param>
            <returns>
            The current <see cref="T:Mapster.TypeAdapterSetter`2"/> instance.
            </returns>
        </member>
        <member name="M:Mapster.TypeAdapterSetter`2.AfterMapping(System.Action{`0,`1,`1})">
            <summary>
            Specifies a custom action to be executed after mapping has completed.
            </summary>
            <param name="action">
            The action to be executed. The action must have the following signature:<br/>
            <para>void Action(TSource source, TDestination result, TDestination? destination)</para>
            Where *source* is the source object, *result* is the final mapping destination and *destination* is the optional target object (e.g. var result = source.Adapt(destination)).
            </param>
            <returns>
            The current <see cref="T:Mapster.TypeAdapterSetter`2"/> instance.
            </returns>
        </member>
        <member name="M:Mapster.TypeAdapterSetter`2.BeforeMappingInline(System.Linq.Expressions.Expression{System.Action{`0,`1,`1}})">
            <summary>
            Specifies a custom inline action to be executed before mapping has completed.
            </summary>
            <param name="action">
            The action to be executed. The action must have the following signature:<br/>
            <para>void Action(TSource source, TDestination result, TDestination? destination)</para>
            Where *source* is the source object, *result* is the final mapping destination and *destination* is the optional target object (e.g. var result = source.Adapt(destination)).
            </param>
            <returns>
            The current <see cref="T:Mapster.TypeAdapterSetter`2"/> instance.
            </returns>
        </member>
        <member name="M:Mapster.TypeAdapterSetter`2.AfterMappingInline(System.Linq.Expressions.Expression{System.Action{`0,`1,`1}})">
            <summary>
            Specifies a custom inline action to be executed after mapping has completed.
            </summary>
            <param name="action">
            The action to be executed. The action must have the following signature:<br/>
            <para>void Action(TSource source, TDestination result, TDestination? destination)</para>
            Where *source* is the source object, *result* is the final mapping destination and *destination* is the optional target object (e.g. var result = source.Adapt(destination)).
            </param>
            <returns>
            The current <see cref="T:Mapster.TypeAdapterSetter`2"/> instance.
            </returns>
        </member>
        <member name="M:Mapster.ReflectionUtils.HasDefaultConstructor(System.Type)">
            <summary>
            Determines whether the specific <paramref name="type"/> has default constructor.
            </summary>
            <param name="type">The type.</param>
            <returns>
              <c>true</c> if specific <paramref name="type"/> has default constructor; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:MapsterMapper.IMapper.From``1(``0)">
            <summary>
            Create mapping builder.
            </summary>
            <typeparam name="TSource">Source type to create mapping builder.</typeparam>
            <param name="source">Source object to create mapping builder.</param>
            <returns>Adapter builder type.</returns>
        </member>
        <member name="M:MapsterMapper.IMapper.Map``1(System.Object)">
            <summary>
            Perform mapping from source object to type of destination.
            </summary>
            <typeparam name="TDestination">Destination type to create mapping builder.</typeparam>
            <param name="source">Source object to create mapping builder.</param>
            <returns>Type of destination object that mapped.</returns>
        </member>
        <member name="M:MapsterMapper.IMapper.Map``2(``0)">
            <summary>
            Perform mapping from type of source to type of destination.
            </summary>
            <typeparam name="TSource">Source type to map.</typeparam>
            <typeparam name="TDestination">Destination type to map.</typeparam>
            <param name="source">Source object to map.</param>
            <returns>Type of destination object that mapped.</returns>
        </member>
        <member name="M:MapsterMapper.IMapper.Map``2(``0,``1)">
            <summary>
            Perform mapping from type of source to type of destination.
            </summary>
            <typeparam name="TSource">Source type to map.</typeparam>
            <typeparam name="TDestination">Destination type to map.</typeparam>
            <param name="source">Source object to map.</param>
            <param name="destination">Destination object to map.</param>
            <returns>Type of destination object that mapped.</returns>
        </member>
        <member name="M:MapsterMapper.IMapper.Map(System.Object,System.Type,System.Type)">
            <summary>
            Perform mapping source object from source type to destination type.
            </summary>
            <param name="source">Source object to map.</param>
            <param name="sourceType">Source type to map.</param>
            <param name="destinationType">Destination type to map.</param>
            <returns>Mapped object.</returns>
        </member>
        <member name="M:MapsterMapper.IMapper.Map(System.Object,System.Object,System.Type,System.Type)">
            <summary>
            Perform mapping source object from source type to destination type.
            </summary>
            <param name="source">Source object to map.</param>
            <param name="destination">Destination object to map.</param>
            <param name="sourceType">Source type to map.</param>
            <param name="destinationType">Destination type to map.</param>
            <returns>Mapped object.</returns>
        </member>
        <member name="M:MapsterMapper.Mapper.From``1(``0)">
            <summary>
            Create mapping builder.
            </summary>
            <typeparam name="TSource">Source type to create mapping builder.</typeparam>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:MapsterMapper.Mapper.Map``1(System.Object)">
            <summary>
            Perform mapping source object to type of destination.
            </summary>
            <typeparam name="TDestination">Destination type to perform mapping</typeparam>
            <param name="source">Source object to perform mapping.</param>
            <returns>type of destination mapping result.</returns>
        </member>
        <member name="M:MapsterMapper.Mapper.Map``2(``0)">
            <summary>
            Perform mapping from type of source to type of destination.
            </summary>
            <typeparam name="TSource">Source type to map.</typeparam>
            <typeparam name="TDestination">Destination type to map.</typeparam>
            <param name="source"></param>
            <returns>type of destination mapping result</returns>
        </member>
        <member name="M:MapsterMapper.Mapper.Map``2(``0,``1)">
            <summary>
            Perform mapping from type of source to type of destination.
            </summary>
            <typeparam name="TSource">Source type to map.</typeparam>
            <typeparam name="TDestination">Destination type to map.</typeparam>
            <param name="source">Source object to map.</param>
            <param name="destination">Destination type to map.</param>
            <returns>type of destination mapping result</returns>
        </member>
        <member name="M:MapsterMapper.Mapper.Map(System.Object,System.Type,System.Type)">
            <summary>
            Perform mapping source object from source type to destination type.
            </summary>
            <param name="source">Source object to map.</param>
            <param name="sourceType">Source type to map.</param>
            <param name="destinationType">Destination type to map.</param>
            <returns>mapped result object</returns>
        </member>
        <member name="M:MapsterMapper.Mapper.Map(System.Object,System.Object,System.Type,System.Type)">
            <summary>
            Perform mapping source object to destination object from source type to destination type.
            </summary>
            <param name="source">Source object to map.</param>
            <param name="destination">Destination object to map.</param>
            <param name="sourceType">Source type to map.</param>
            <param name="destinationType">Destination type to map.</param>
            <returns>mapped result object</returns>
        </member>
    </members>
</doc>
