<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Mapster.Core</name>
    </assembly>
    <members>
        <!-- Badly formed XML comment ignored for member "T:Mapster.MapContext" -->
        <member name="M:Mapster.AdaptAttributeBuilder.ForTypes(System.Type[])">
            <summary>
            Configures the builder for specific types.	
            </summary>
            <param name="types">Types to configure.</param>
            <returns></returns>
        </member>
        <member name="M:Mapster.AdaptAttributeBuilder.ForAllTypesInNamespace(System.Reflection.Assembly,System.String)">
            <summary>
            Configures the builder for all types in a given namespace within an assembly.
            </summary>
            <param name="assembly">The assembly containing the types.</param>
            <param name="namespace">The namespace of the types to include.</param>
            <returns></returns>
        </member>
        <member name="M:Mapster.AdaptAttributeBuilder.ForType``1(System.Action{Mapster.PropertySettingBuilder{``0}})">
            <summary>
            Configures the builder for a specific type and allows for property-specific configuration.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="propertyConfig">An optional action for configuring properties of the specified type.</param>
            <returns></returns>
        </member>
        <member name="M:Mapster.AdaptAttributeBuilder.ExcludeTypes(System.Type[])">
            <summary>
            Excludes specific types from the configuration.
            </summary>
            <param name="types">An array of types to exclude.</param>
            <returns></returns>
        </member>
        <member name="M:Mapster.AdaptAttributeBuilder.ExcludeTypes(System.Func{System.Type,System.Boolean})">
            <summary>
            Exclude certain types from the adaptation process based on a provided predicate.
            </summary>
            <param name="predicate">Predicate function should evaluate to true for types that you want to exclude from the mapping and false for types that should not be excluded.</param>
            <returns></returns>
        </member>
        <member name="M:Mapster.AdaptAttributeBuilder.IgnoreAttributes(System.Type[])">
            <summary>
            Specifies attributes to ignore during mapping.
            </summary>
            <param name="attributes">An array of attributes to ignore.</param>
            <returns></returns>
        </member>
        <member name="M:Mapster.AdaptAttributeBuilder.IgnoreNoAttributes(System.Type[])">
            <summary>
            Specifies attributes that should not be ignored during mapping.
            </summary>
            <param name="attributes">An array of attributes that should not be ignored.</param>
            <returns></returns>
        </member>
        <member name="M:Mapster.AdaptAttributeBuilder.IgnoreNamespaces(System.String[])">
            <summary>
            Specifies namespaces to ignore during mapping.
            </summary>
            <param name="namespaces">An array of namespaces to ignore.</param>
            <returns></returns>
        </member>
        <member name="M:Mapster.AdaptAttributeBuilder.IgnoreNullValues(System.Boolean)">
            <summary>
            Configures whether null values should be ignored during mapping.
            </summary>
            <param name="value">A boolean value indicating whether to ignore null values.</param>
            <returns></returns>
        </member>
        <member name="M:Mapster.AdaptAttributeBuilder.RequireDestinationMemberSource(System.Boolean)">
            <summary>
            Configures whether a destination member source is required during.
            </summary>
            <param name="value">A boolean value indicating whether a destination member source is required.</param>
            <returns></returns>
        </member>
        <member name="M:Mapster.AdaptAttributeBuilder.MapToConstructor(System.Boolean)">
            <summary>
            Configures whether mapping should be performed to constructors.
            </summary>
            <param name="value">A boolean value indicating whether mapping to constructors is enabled.</param>
            <returns></returns>
        </member>
        <member name="M:Mapster.AdaptAttributeBuilder.MaxDepth(System.Int32)">
            <summary>
            Sets the maximum depth for mapping.
            </summary>
            <param name="depth">The maximum depth for mapping.</param>
            <returns></returns>
        </member>
        <member name="M:Mapster.AdaptAttributeBuilder.PreserveReference(System.Boolean)">
            <summary>
            Configures whether to preserve object references during mapping.
            </summary>
            <param name="value">A boolean value indicating whether to preserve object references.</param>
            <returns></returns>
        </member>
        <member name="M:Mapster.AdaptAttributeBuilder.ShallowCopyForSameType(System.Boolean)">
            <summary>
            Configures whether to perform a shallow copy for the same source and destination type.
            </summary>
            <param name="value">A boolean value indicating whether to perform a shallow copy.</param>
            <returns></returns>
        </member>
        <member name="M:Mapster.AdaptAttributeBuilder.AlterType``2">
            <summary>
            Forward property types.
            </summary>
            <typeparam name="TFrom">Forward property from type.</typeparam>
            <typeparam name="TTo">Forward property to type.</typeparam>
            <returns></returns>
        </member>
        <member name="M:Mapster.AdaptAttributeBuilder.AlterType(System.Func{System.Type,System.Boolean},System.Type)">
            <summary>
            Forward property types for Code generation.
            </summary>
            <param name="predicate">A function that takes a Type as input and returns a Boolean value. This function is used to evaluate whether the forward property should be applied to the target type. If the predicate returns true, the target type will be replaced; otherwise, it remains unchanged.</param>
            <param name="toType">Type of destination to forward property type.</param>
            <returns></returns>
        </member>
        <member name="M:Mapster.PropertySettingBuilder`1.Ignore``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Ignore a specific property during mapping.
            </summary>
            <typeparam name="TReturn"></typeparam>
            <param name="member">A lambda expression that identifies the property to be ignored during mapping.</param>
            <returns></returns>
        </member>
        <member name="M:Mapster.PropertySettingBuilder`1.Map``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String)">
            <summary>
            Map a specific property of the source type to a target property with a different name during mapping.
            </summary>
            <typeparam name="TReturn"></typeparam>
            <param name="member">A lambda expression that identifies the source property to be mapped.</param>
            <param name="targetPropertyName">The name of the target property to which the source property should be mapped during the mapping process.</param>
            <returns></returns>
        </member>
        <member name="M:Mapster.PropertySettingBuilder`1.Map``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Type,System.String)">
            <summary>
            Map a specific property of the source type to a target property with a different type and name during mapping.
            </summary>
            <typeparam name="TReturn"></typeparam>
            <param name="member">A lambda expression that identifies the source property to be mapped.</param>
            <param name="targetPropertyType">The type of the target property to which the source property should be mapped during the mapping process.</param>
            <param name="targetPropertyName">The name of the target property to which the source property should be mapped.</param>
            <returns></returns>
        </member>
        <member name="M:Mapster.PropertySettingBuilder`1.Map``2(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,``1}},System.String)">
            <summary>
            Map a specific property of the source type to a target property using a custom mapping function.
            </summary>
            <typeparam name="TReturn">Type of source property.</typeparam>
            <typeparam name="TReturn2">Type of target property type.</typeparam>
            <param name="member">A lambda expression that identifies the source property to be mapped.</param>
            <param name="mapFunc">A lambda expression that defines the custom mapping function.</param>
            <param name="targetPropertyName">The name of the target property to which the source property should be mapped.</param>
            <returns></returns>
        </member>
        <member name="M:Mapster.Utils.Enum`1.ToString(`0)">
            <summary>
            Converts enum to string using dictionary to avoid reflection perf hit.
            </summary>
            <param name="val">Enum to evaluate</param>
            <returns></returns>
        </member>
        <member name="M:Mapster.Utils.Enum`1.Parse(System.String)">
            <summary>
            Converts string to Enum using case insensitive comparison
            </summary>
            <param name="val">String to evaluate</param>
            <returns></returns>
        </member>
    </members>
</doc>
