<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Fast.EventBus</name>
    </assembly>
    <members>
        <member name="T:Fast.EventBus.EventSubscribeAttribute">
            <summary>
            <see cref="T:Fast.EventBus.EventSubscribeAttribute"/> 事件处理程序特性
            <remarks>
            <para>作用于 <see cref="T:Fast.EventBus.IEventSubscriber"/> 实现类实例方法</para>
            <para>支持多个事件 Id 触发同一个事件处理程序</para>
            </remarks>
            </summary>
        </member>
        <member name="M:Fast.EventBus.EventSubscribeAttribute.#ctor(System.Object)">
            <summary>
            构造函数
            </summary>
            <param name="eventId">事件 Id</param>
            <remarks>只支持事件类型和 Enum 类型</remarks>
        </member>
        <member name="P:Fast.EventBus.EventSubscribeAttribute.EventId">
            <summary>
            事件 Id
            </summary>
        </member>
        <member name="P:Fast.EventBus.EventSubscribeAttribute.GCCollect">
            <summary>
            是否启用执行完成触发 GC 回收
            </summary>
            <remarks>bool 类型，默认为 null</remarks>
        </member>
        <member name="P:Fast.EventBus.EventSubscribeAttribute.NumRetries">
            <summary>
            重试次数
            </summary>
        </member>
        <member name="P:Fast.EventBus.EventSubscribeAttribute.RetryTimeout">
            <summary>
            重试间隔时间
            </summary>
            <remarks>默认1000毫秒</remarks>
        </member>
        <member name="P:Fast.EventBus.EventSubscribeAttribute.ExceptionTypes">
            <summary>
            可以指定特定异常类型才重试
            </summary>
        </member>
        <member name="P:Fast.EventBus.EventSubscribeAttribute.FallbackPolicy">
            <summary>
            重试失败策略配置
            </summary>
        </member>
        <member name="P:Fast.EventBus.EventSubscribeAttribute.Order">
            <summary>
            排序
            </summary>
            <remarks>数值越大的先执行</remarks>
        </member>
        <member name="T:Fast.EventBus.EventSubscribeOperates">
            <summary>
            <see cref="T:Fast.EventBus.EventSubscribeOperates"/> 事件订阅器操作选项
            </summary>
            <remarks>控制动态新增/删除事件订阅器</remarks>
        </member>
        <member name="F:Fast.EventBus.EventSubscribeOperates.Append">
            <summary>
            添加一条订阅器
            </summary>
        </member>
        <member name="F:Fast.EventBus.EventSubscribeOperates.Remove">
            <summary>
            删除一条订阅器
            </summary>
        </member>
        <member name="T:Fast.EventBus.EventHandlerContext">
            <summary>
            <see cref="T:Fast.EventBus.EventHandlerContext"/> 事件处理程序上下文
            </summary>
        </member>
        <member name="M:Fast.EventBus.EventHandlerContext.#ctor(Fast.EventBus.IEventSource,System.Collections.Generic.IDictionary{System.Object,System.Object},System.Reflection.MethodInfo,Fast.EventBus.EventSubscribeAttribute)">
            <summary>
            构造函数
            </summary>
            <param name="eventSource">事件源（事件承载对象）</param>
            <param name="properties">共享上下文数据</param>
            <param name="handlerMethod">触发的方法</param>
            <param name="attribute">订阅特性</param>
        </member>
        <member name="P:Fast.EventBus.EventHandlerContext.Source">
            <summary>
            事件源（事件承载对象）
            </summary>
        </member>
        <member name="P:Fast.EventBus.EventHandlerContext.Properties">
            <summary>
            共享上下文数据
            </summary>
        </member>
        <member name="P:Fast.EventBus.EventHandlerContext.HandlerMethod">
            <summary>
            触发的方法
            </summary>
            <remarks>如果是动态订阅，可能为 null</remarks>
        </member>
        <member name="P:Fast.EventBus.EventHandlerContext.Attribute">
            <summary>
            订阅特性
            </summary>
            <remarks><remarks>如果是动态订阅，可能为 null</remarks></remarks>
        </member>
        <member name="T:Fast.EventBus.EventHandlerExecutedContext">
            <summary>
            <see cref="T:Fast.EventBus.EventHandlerExecutedContext"/> 事件处理程序执行后上下文
            </summary>
        </member>
        <member name="M:Fast.EventBus.EventHandlerExecutedContext.#ctor(Fast.EventBus.IEventSource,System.Collections.Generic.IDictionary{System.Object,System.Object},System.Reflection.MethodInfo,Fast.EventBus.EventSubscribeAttribute)">
            <summary>
            构造函数
            </summary>
            <param name="eventSource">事件源（事件承载对象）</param>
            <param name="properties">共享上下文数据</param>
            <param name="handlerMethod">触发的方法</param>
            <param name="attribute">订阅特性</param>
        </member>
        <member name="P:Fast.EventBus.EventHandlerExecutedContext.ExecutedTime">
            <summary>
            执行后时间
            </summary>
        </member>
        <member name="P:Fast.EventBus.EventHandlerExecutedContext.Exception">
            <summary>
            异常信息
            </summary>
        </member>
        <member name="T:Fast.EventBus.EventHandlerExecutingContext">
            <summary>
            <see cref="T:Fast.EventBus.EventHandlerExecutingContext"/> 事件处理程序执行前上下文
            </summary>
        </member>
        <member name="M:Fast.EventBus.EventHandlerExecutingContext.#ctor(Fast.EventBus.IEventSource,System.Collections.Generic.IDictionary{System.Object,System.Object},System.Reflection.MethodInfo,Fast.EventBus.EventSubscribeAttribute)">
            <summary>
            构造函数
            </summary>
            <param name="eventSource">事件源（事件承载对象）</param>
            <param name="properties">共享上下文数据</param>
            <param name="handlerMethod">触发的方法</param>
            <param name="attribute">订阅特性</param>
        </member>
        <member name="P:Fast.EventBus.EventHandlerExecutingContext.ExecutingTime">
            <summary>
            执行前时间
            </summary>
        </member>
        <member name="T:Fast.EventBus.EventBusExtension">
            <summary>
            <see cref="T:Fast.EventBus.EventBusExtension"/> 事件总线拓展类
            </summary>
        </member>
        <member name="M:Fast.EventBus.EventBusExtension.EventBusToString(System.Enum)">
            <summary>
            将事件枚举 Id 转换成字符串对象
            </summary>
            <param name="em"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.EventBus.EventBusExtension.EventBusToEnum(System.String)">
            <summary>
            将事件枚举字符串转换成枚举对象
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="T:Fast.EventBus.IServiceCollectionExtension">
            <summary>
            <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/> 动态Api 拓展类
            </summary>
        </member>
        <member name="M:Fast.EventBus.IServiceCollectionExtension.AddEventBus(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            添加事件总线服务
            </summary>
            <param name="services"><see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/></param>
            <returns><see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/></returns>
        </member>
        <member name="T:Fast.EventBus.EventBusFactory">
            <summary>
            <see cref="T:Fast.EventBus.EventBusFactory"/> 事件总线工厂默认实现
            </summary>
        </member>
        <member name="F:Fast.EventBus.EventBusFactory._eventSourceStorer">
            <summary>
            事件源存储器
            </summary>
        </member>
        <member name="M:Fast.EventBus.EventBusFactory.#ctor(Fast.EventBus.IEventSourceStorer)">
            <summary>
            构造函数
            </summary>
            <param name="eventSourceStorer">事件源存储器</param>
        </member>
        <member name="M:Fast.EventBus.EventBusFactory.Subscribe(System.String,System.Func{Fast.EventBus.EventHandlerExecutingContext,System.Threading.Tasks.Task},Fast.EventBus.EventSubscribeAttribute,System.Reflection.MethodInfo,System.Threading.CancellationToken)">
            <summary>
            添加事件订阅者
            </summary>
            <param name="eventId">事件 Id</param>
            <param name="handler">事件订阅委托</param>
            <param name="attribute"><see cref="T:Fast.EventBus.EventSubscribeAttribute"/> 特性对象</param>
            <param name="handlerMethod"><see cref="T:System.Reflection.MethodInfo"/> 对象</param>
            <param name="cancellationToken">取消任务 Token</param>
            <returns></returns>
        </member>
        <member name="M:Fast.EventBus.EventBusFactory.Unsubscribe(System.String,System.Threading.CancellationToken)">
            <summary>
            删除事件订阅者
            </summary>
            <param name="eventId">事件 Id</param>
            <param name="cancellationToken">取消任务 Token</param>
            <returns></returns>
        </member>
        <member name="T:Fast.EventBus.IEventBusFactory">
            <summary>
            <see cref="T:Fast.EventBus.IEventBusFactory"/> 事件总线工厂接口
            </summary>
        </member>
        <member name="M:Fast.EventBus.IEventBusFactory.Subscribe(System.String,System.Func{Fast.EventBus.EventHandlerExecutingContext,System.Threading.Tasks.Task},Fast.EventBus.EventSubscribeAttribute,System.Reflection.MethodInfo,System.Threading.CancellationToken)">
            <summary>
            添加事件订阅者
            </summary>
            <param name="eventId">事件 Id</param>
            <param name="handler">事件订阅委托</param>
            <param name="attribute"><see cref="T:Fast.EventBus.EventSubscribeAttribute"/> 特性对象</param>
            <param name="handlerMethod"><see cref="T:System.Reflection.MethodInfo"/> 对象</param>
            <param name="cancellationToken">取消任务 Token</param>
            <returns></returns>
        </member>
        <member name="M:Fast.EventBus.IEventBusFactory.Unsubscribe(System.String,System.Threading.CancellationToken)">
            <summary>
            删除事件订阅者
            </summary>
            <param name="eventId">事件 Id</param>
            <param name="cancellationToken">取消任务 Token</param>
            <returns></returns>
        </member>
        <member name="T:Fast.EventBus.EventBusHostedService">
            <summary>
            <see cref="T:Fast.EventBus.EventBusHostedService"/> 事件总线后台主机服务
            </summary>
        </member>
        <member name="F:Fast.EventBus.EventBusHostedService.GC_COLLECT_INTERVAL_SECONDS">
            <summary>
            GC 回收默认间隔
            </summary>
        </member>
        <member name="E:Fast.EventBus.EventBusHostedService.UnobservedTaskException">
            <summary>
            避免由 CLR 的终结器捕获该异常从而终止应用程序，让所有未觉察异常被觉察
            </summary>
        </member>
        <member name="F:Fast.EventBus.EventBusHostedService._logger">
            <summary>
            日志对象
            </summary>
        </member>
        <member name="F:Fast.EventBus.EventBusHostedService._serviceProvider">
            <summary>
            服务提供器
            </summary>
        </member>
        <member name="F:Fast.EventBus.EventBusHostedService._eventSourceStorer">
            <summary>
            事件源存储器
            </summary>
        </member>
        <member name="F:Fast.EventBus.EventBusHostedService._eventHandlers">
            <summary>
            事件处理程序集合
            </summary>
        </member>
        <member name="M:Fast.EventBus.EventBusHostedService.#ctor(Microsoft.Extensions.Logging.ILogger{Fast.EventBus.EventBusService},System.IServiceProvider,Fast.EventBus.IEventSourceStorer,System.Collections.Generic.IEnumerable{Fast.EventBus.IEventSubscriber})">
            <summary>
            构造函数
            </summary>
            <param name="logger">日志对象</param>
            <param name="serviceProvider">服务提供器</param>
            <param name="eventSourceStorer">事件源存储器</param>
            <param name="eventSubscribers">事件订阅者集合</param>
        </member>
        <member name="P:Fast.EventBus.EventBusHostedService.Monitor">
            <summary>
            事件处理程序监视器
            </summary>
        </member>
        <member name="P:Fast.EventBus.EventBusHostedService.LastGCCollectTime">
            <summary>
            最近一次收集时间
            </summary>
        </member>
        <member name="M:Fast.EventBus.EventBusHostedService.ExecuteAsync(System.Threading.CancellationToken)">
            <summary>
            执行后台任务
            </summary>
            <param name="stoppingToken">后台主机服务停止时取消任务 Token</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/> 实例</returns>
        </member>
        <member name="M:Fast.EventBus.EventBusHostedService.BackgroundProcessing(System.Threading.CancellationToken)">
            <summary>
            后台调用处理程序
            </summary>
            <param name="stoppingToken">后台主机服务停止时取消任务 Token</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/> 实例</returns>
        </member>
        <member name="M:Fast.EventBus.EventBusHostedService.ManageEventSubscribers(Fast.EventBus.EventSubscribeOperateSource)">
            <summary>
            管理事件订阅器动态
            </summary>
            <param name="subscribeOperateSource"></param>
        </member>
        <member name="M:Fast.EventBus.EventBusHostedService.CheckIsSetGCCollect(System.Object)">
            <summary>
            检查是否开启执行完成触发 GC 回收
            </summary>
            <param name="gcCollect"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.EventBus.EventBusHostedService.Log(Microsoft.Extensions.Logging.LogLevel,System.String,System.Object[],System.Exception)">
            <summary>
            记录日志
            </summary>
            <param name="logLevel">日志级别</param>
            <param name="message">消息</param>
            <param name="args">参数</param>
            <param name="ex">异常</param>
        </member>
        <member name="T:Fast.EventBus.IEventSubscriber">
            <summary>
            <see cref="T:Fast.EventBus.IEventSubscriber"/> 事件订阅者依赖接口
            </summary>
            <remarks>
            <para>可自定义事件处理方法，但须符合 Func{EventSubscribeExecutingContext, Task} 签名</para>
            <para>通常只做依赖查找，不做服务调用</para>
            </remarks>
        </member>
        <member name="T:Fast.EventBus.EventBusService">
            <summary>
            <see cref="T:Fast.EventBus.EventBusService"/> EventBusService 日志拓展默认分类名
            </summary>
        </member>
        <member name="T:Fast.EventBus.IEventHandlerMonitor">
            <summary>
            <see cref="T:Fast.EventBus.IEventHandlerMonitor"/> 事件处理程序监视器
            </summary>
        </member>
        <member name="M:Fast.EventBus.IEventHandlerMonitor.OnExecutingAsync(Fast.EventBus.EventHandlerExecutingContext)">
            <summary>
            事件处理程序执行前
            </summary>
            <param name="context">上下文</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/> 实例</returns>
        </member>
        <member name="M:Fast.EventBus.IEventHandlerMonitor.OnExecutedAsync(Fast.EventBus.EventHandlerExecutedContext)">
            <summary>
            事件处理程序执行后
            </summary>
            <param name="context">上下文</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/> 实例</returns>
        </member>
        <member name="T:Fast.EventBus.IEventFallbackPolicy">
            <summary>
            <see cref="T:Fast.EventBus.IEventFallbackPolicy"/> 事件重试失败回调服务
            </summary>
        </member>
        <member name="M:Fast.EventBus.IEventFallbackPolicy.CallbackAsync(Fast.EventBus.EventHandlerExecutingContext,System.Exception)">
            <summary>
            重试失败回调
            </summary>
            <param name="context"></param>
            <param name="ex"></param>
            <returns></returns>
        </member>
        <member name="T:Fast.EventBus.ChannelEventPublisher">
            <summary>
            <see cref="T:Fast.EventBus.ChannelEventPublisher"/> 基于内存通道事件发布者（默认实现）
            </summary>
        </member>
        <member name="F:Fast.EventBus.ChannelEventPublisher._eventSourceStorer">
            <summary>
            事件源存储器
            </summary>
        </member>
        <member name="M:Fast.EventBus.ChannelEventPublisher.#ctor(Fast.EventBus.IEventSourceStorer)">
            <summary>
            构造函数
            </summary>
            <param name="eventSourceStorer">事件源存储器</param>
        </member>
        <member name="M:Fast.EventBus.ChannelEventPublisher.PublishAsync(Fast.EventBus.IEventSource)">
            <summary>
            发布一条消息
            </summary>
            <param name="eventSource">事件源</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/> 实例</returns>
        </member>
        <member name="M:Fast.EventBus.ChannelEventPublisher.PublishDelayAsync(Fast.EventBus.IEventSource,System.Int64)">
            <summary>
            延迟发布一条消息
            </summary>
            <param name="eventSource">事件源</param>
            <param name="delay">延迟数（毫秒）</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/> 实例</returns>
        </member>
        <member name="M:Fast.EventBus.ChannelEventPublisher.PublishAsync(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            发布一条消息
            </summary>
            <param name="eventId">事件 Id</param>
            <param name="payload">事件承载（携带）数据</param>
            <param name="cancellationToken"> 取消任务 Token</param>
            <returns></returns>
        </member>
        <member name="M:Fast.EventBus.ChannelEventPublisher.PublishAsync(System.Enum,System.Object,System.Threading.CancellationToken)">
            <summary>
            发布一条消息
            </summary>
            <param name="eventId">事件 Id</param>
            <param name="payload">事件承载（携带）数据</param>
            <param name="cancellationToken"> 取消任务 Token</param>
            <returns></returns>
        </member>
        <member name="M:Fast.EventBus.ChannelEventPublisher.PublishDelayAsync(System.String,System.Int64,System.Object,System.Threading.CancellationToken)">
            <summary>
            延迟发布一条消息
            </summary>
            <param name="eventId">事件 Id</param>
            <param name="delay">延迟数（毫秒）</param>
            <param name="payload">事件承载（携带）数据</param>
            <param name="cancellationToken"> 取消任务 Token</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/> 实例</returns>
        </member>
        <member name="M:Fast.EventBus.ChannelEventPublisher.PublishDelayAsync(System.Enum,System.Int64,System.Object,System.Threading.CancellationToken)">
            <summary>
            延迟发布一条消息
            </summary>
            <param name="eventId">事件 Id</param>
            <param name="delay">延迟数（毫秒）</param>
            <param name="payload">事件承载（携带）数据</param>
            <param name="cancellationToken"> 取消任务 Token</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/> 实例</returns>
        </member>
        <member name="T:Fast.EventBus.IEventPublisher">
            <summary>
            <see cref="T:Fast.EventBus.IEventPublisher"/> 事件发布服务依赖接口
            </summary>
        </member>
        <member name="M:Fast.EventBus.IEventPublisher.PublishAsync(Fast.EventBus.IEventSource)">
            <summary>
            发布一条消息
            </summary>
            <param name="eventSource">事件源</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/> 实例</returns>
        </member>
        <member name="M:Fast.EventBus.IEventPublisher.PublishDelayAsync(Fast.EventBus.IEventSource,System.Int64)">
            <summary>
            延迟发布一条消息
            </summary>
            <param name="eventSource">事件源</param>
            <param name="delay">延迟数（毫秒）</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/> 实例</returns>
        </member>
        <member name="M:Fast.EventBus.IEventPublisher.PublishAsync(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            发布一条消息
            </summary>
            <param name="eventId">事件 Id</param>
            <param name="payload">事件承载（携带）数据</param>
            <param name="cancellationToken"> 取消任务 Token</param>
            <returns></returns>
        </member>
        <member name="M:Fast.EventBus.IEventPublisher.PublishAsync(System.Enum,System.Object,System.Threading.CancellationToken)">
            <summary>
            发布一条消息
            </summary>
            <param name="eventId">事件 Id</param>
            <param name="payload">事件承载（携带）数据</param>
            <param name="cancellationToken"> 取消任务 Token</param>
            <returns></returns>
        </member>
        <member name="M:Fast.EventBus.IEventPublisher.PublishDelayAsync(System.String,System.Int64,System.Object,System.Threading.CancellationToken)">
            <summary>
            延迟发布一条消息
            </summary>
            <param name="eventId">事件 Id</param>
            <param name="delay">延迟数（毫秒）</param>
            <param name="payload">事件承载（携带）数据</param>
            <param name="cancellationToken"> 取消任务 Token</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/> 实例</returns>
        </member>
        <member name="M:Fast.EventBus.IEventPublisher.PublishDelayAsync(System.Enum,System.Int64,System.Object,System.Threading.CancellationToken)">
            <summary>
            延迟发布一条消息
            </summary>
            <param name="eventId">事件 Id</param>
            <param name="delay">延迟数（毫秒）</param>
            <param name="payload">事件承载（携带）数据</param>
            <param name="cancellationToken"> 取消任务 Token</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/> 实例</returns>
        </member>
        <member name="T:Fast.EventBus.ChannelEventSource">
            <summary>
            <see cref="T:Fast.EventBus.ChannelEventSource"/> 内存通道事件源（事件承载对象）
            </summary>
        </member>
        <member name="M:Fast.EventBus.ChannelEventSource.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Fast.EventBus.ChannelEventSource.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="eventId">事件 Id</param>
        </member>
        <member name="M:Fast.EventBus.ChannelEventSource.#ctor(System.String,System.Object)">
            <summary>
            构造函数
            </summary>
            <param name="eventId">事件 Id</param>
            <param name="payload">事件承载（携带）数据</param>
        </member>
        <member name="M:Fast.EventBus.ChannelEventSource.#ctor(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            构造函数
            </summary>
            <param name="eventId">事件 Id</param>
            <param name="payload">事件承载（携带）数据</param>
            <param name="cancellationToken">取消任务 Token</param>
        </member>
        <member name="M:Fast.EventBus.ChannelEventSource.#ctor(System.Enum)">
            <summary>
            构造函数
            </summary>
            <param name="eventId">事件 Id</param>
        </member>
        <member name="M:Fast.EventBus.ChannelEventSource.#ctor(System.Enum,System.Object)">
            <summary>
            构造函数
            </summary>
            <param name="eventId">事件 Id</param>
            <param name="payload">事件承载（携带）数据</param>
        </member>
        <member name="M:Fast.EventBus.ChannelEventSource.#ctor(System.Enum,System.Object,System.Threading.CancellationToken)">
            <summary>
            构造函数
            </summary>
            <param name="eventId">事件 Id</param>
            <param name="payload">事件承载（携带）数据</param>
            <param name="cancellationToken">取消任务 Token</param>
        </member>
        <member name="P:Fast.EventBus.ChannelEventSource.EventId">
            <summary>
            事件 Id
            </summary>
        </member>
        <member name="P:Fast.EventBus.ChannelEventSource.Payload">
            <summary>
            事件承载（携带）数据
            </summary>
        </member>
        <member name="P:Fast.EventBus.ChannelEventSource.CreatedTime">
            <summary>
            事件创建时间
            </summary>
        </member>
        <member name="P:Fast.EventBus.ChannelEventSource.CancellationToken">
            <summary>
            取消任务 Token
            </summary>
            <remarks>用于取消本次消息处理</remarks>
        </member>
        <member name="T:Fast.EventBus.EventSubscribeOperateSource">
            <summary>
            <see cref="T:Fast.EventBus.EventSubscribeOperateSource"/> 事件总线订阅管理事件源
            </summary>
        </member>
        <member name="P:Fast.EventBus.EventSubscribeOperateSource.EventId">
            <summary>
            事件 Id
            </summary>
        </member>
        <member name="P:Fast.EventBus.EventSubscribeOperateSource.Payload">
            <summary>
            事件承载（携带）数据
            </summary>
        </member>
        <member name="P:Fast.EventBus.EventSubscribeOperateSource.CreatedTime">
            <summary>
            事件创建时间
            </summary>
        </member>
        <member name="P:Fast.EventBus.EventSubscribeOperateSource.CancellationToken">
            <summary>
            取消任务 Token
            </summary>
            <remarks>用于取消本次消息处理</remarks>
        </member>
        <member name="P:Fast.EventBus.EventSubscribeOperateSource.Handler">
            <summary>
            事件处理程序
            </summary>
        </member>
        <member name="P:Fast.EventBus.EventSubscribeOperateSource.Attribute">
            <summary>
            订阅特性
            </summary>
        </member>
        <member name="P:Fast.EventBus.EventSubscribeOperateSource.HandlerMethod">
            <summary>
            触发的方法
            </summary>
        </member>
        <member name="P:Fast.EventBus.EventSubscribeOperateSource.SubscribeEventId">
            <summary>
            实际事件 Id
            </summary>
        </member>
        <member name="P:Fast.EventBus.EventSubscribeOperateSource.Operate">
            <summary>
            事件订阅器操作选项
            </summary>
        </member>
        <member name="T:Fast.EventBus.IEventSource">
            <summary>
            <see cref="T:Fast.EventBus.IEventSource"/> 事件源（事件承载对象）依赖接口
            </summary>
        </member>
        <member name="P:Fast.EventBus.IEventSource.EventId">
            <summary>
            事件 Id
            </summary>
        </member>
        <member name="P:Fast.EventBus.IEventSource.Payload">
            <summary>
            事件承载（携带）数据
            </summary>
        </member>
        <member name="P:Fast.EventBus.IEventSource.CreatedTime">
            <summary>
            事件创建时间
            </summary>
        </member>
        <member name="P:Fast.EventBus.IEventSource.CancellationToken">
            <summary>
            取消任务 Token
            </summary>
            <remarks>用于取消本次消息处理</remarks>
        </member>
        <member name="T:Fast.EventBus.ChannelEventSourceStorer">
            <summary>
            <see cref="T:Fast.EventBus.ChannelEventSourceStorer"/> 内存通道事件源存储器（默认实现）
            </summary>
            <remarks>
            <para>顾名思义，这里指的是事件消息存储中心，提供读写能力</para>
            <para>默认实现为内存中的 <see cref="T:System.Threading.Channels.Channel"/></para>
            </remarks>
        </member>
        <member name="F:Fast.EventBus.ChannelEventSourceStorer._channel">
            <summary>
            内存通道事件源存储器
            </summary>
        </member>
        <member name="M:Fast.EventBus.ChannelEventSourceStorer.#ctor(System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="capacity">管道最多能够处理多少消息，超过该容量进入等待写入</param>
        </member>
        <member name="M:Fast.EventBus.ChannelEventSourceStorer.WriteAsync(Fast.EventBus.IEventSource,System.Threading.CancellationToken)">
            <summary>
            将事件源写入存储器
            </summary>
            <param name="eventSource">事件源对象</param>
            <param name="cancellationToken">取消任务 Token</param>
            <returns><see cref="T:System.Threading.Tasks.ValueTask"/></returns>
        </member>
        <member name="M:Fast.EventBus.ChannelEventSourceStorer.ReadAsync(System.Threading.CancellationToken)">
            <summary>
            从存储器中读取一条事件源
            </summary>
            <param name="cancellationToken">取消任务 Token</param>
            <returns>事件源对象</returns>
        </member>
        <member name="T:Fast.EventBus.IEventSourceStorer">
            <summary>
            <see cref="T:Fast.EventBus.IEventSourceStorer"/> 事件源存储器
            </summary>
            <remarks>
            <para>顾名思义，这里指的是事件消息存储中心，提供读写能力</para>
            <para>默认实现为内存中的 <see cref="T:System.Threading.Channels.Channel"/></para>
            </remarks>
        </member>
        <member name="M:Fast.EventBus.IEventSourceStorer.WriteAsync(Fast.EventBus.IEventSource,System.Threading.CancellationToken)">
            <summary>
            将事件源写入存储器
            </summary>
            <param name="eventSource">事件源对象</param>
            <param name="cancellationToken">取消任务 Token</param>
            <returns><see cref="T:System.Threading.Tasks.ValueTask"/></returns>
        </member>
        <member name="M:Fast.EventBus.IEventSourceStorer.ReadAsync(System.Threading.CancellationToken)">
            <summary>
            从存储器中读取一条事件源
            </summary>
            <param name="cancellationToken">取消任务 Token</param>
            <returns>事件源对象</returns>
        </member>
        <member name="T:Fast.EventBus.EventHandlerWrapper">
            <summary>
            <see cref="T:Fast.EventBus.EventHandlerWrapper"/> 事件处理程序包装类
            </summary>
            <remarks>主要用于主机服务启动时将所有处理程序和事件 Id 进行包装绑定</remarks>
        </member>
        <member name="M:Fast.EventBus.EventHandlerWrapper.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="eventId">事件Id</param>
        </member>
        <member name="P:Fast.EventBus.EventHandlerWrapper.EventId">
            <summary>
            事件 Id
            </summary>
        </member>
        <member name="P:Fast.EventBus.EventHandlerWrapper.Handler">
            <summary>
            事件处理程序
            </summary>
        </member>
        <member name="P:Fast.EventBus.EventHandlerWrapper.HandlerMethod">
            <summary>
            触发的方法
            </summary>
        </member>
        <member name="P:Fast.EventBus.EventHandlerWrapper.Attribute">
            <summary>
            订阅特性
            </summary>
        </member>
        <member name="P:Fast.EventBus.EventHandlerWrapper.GCCollect">
            <summary>
            是否启用执行完成触发 GC 回收
            </summary>
        </member>
        <member name="P:Fast.EventBus.EventHandlerWrapper.Order">
            <summary>
            排序
            </summary>
            <remarks>数值越大的先执行</remarks>
        </member>
        <member name="M:Fast.EventBus.EventHandlerWrapper.ShouldRun(System.String)">
            <summary>
            是否符合条件执行处理程序
            </summary>
            <remarks>支持正则表达式</remarks>
            <param name="eventId">事件 Id</param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
    </members>
</doc>
